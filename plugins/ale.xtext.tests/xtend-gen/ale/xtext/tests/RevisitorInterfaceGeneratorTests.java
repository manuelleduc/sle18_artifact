package ale.xtext.tests;

import ale.xtext.generator.RevisitorInterfaceGenerator;
import java.util.Map;
import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;

@SuppressWarnings("all")
public class RevisitorInterfaceGeneratorTests {
  private final RevisitorInterfaceGenerator rig = new RevisitorInterfaceGenerator();
  
  private String generate(final String ecore, final String genmodel) {
    String _xblockexpression = null;
    {
      final ResourceSetImpl rs = new ResourceSetImpl();
      Map<String, Object> _extensionToFactoryMap = rs.getResourceFactoryRegistry().getExtensionToFactoryMap();
      XMIResourceFactoryImpl _xMIResourceFactoryImpl = new XMIResourceFactoryImpl();
      _extensionToFactoryMap.put("genmodel", _xMIResourceFactoryImpl);
      rs.getPackageRegistry().put(GenModelPackage.eNS_URI, GenModelPackage.eINSTANCE);
      Map<String, Object> _extensionToFactoryMap_1 = rs.getResourceFactoryRegistry().getExtensionToFactoryMap();
      XMIResourceFactoryImpl _xMIResourceFactoryImpl_1 = new XMIResourceFactoryImpl();
      _extensionToFactoryMap_1.put("ecore", _xMIResourceFactoryImpl_1);
      rs.getPackageRegistry().put(EcorePackage.eNS_URI, EcorePackage.eINSTANCE);
      EObject _head = IterableExtensions.<EObject>head(rs.getResource(URI.createURI(genmodel), true).getContents());
      final GenModel genmodelRes = ((GenModel) _head);
      EObject _head_1 = IterableExtensions.<EObject>head(rs.getResource(URI.createURI(ecore), true).getContents());
      final EPackage ecoreRes = ((EPackage) _head_1);
      _xblockexpression = this.rig.generateInterface(ecoreRes, genmodelRes);
    }
    return _xblockexpression;
  }
  
  @Test
  public void testBoolExp() {
    final String res = this.generate("../testdata/boolexp/model/BoolExp.ecore", "../testdata/boolexp/model/BoolExp.genmodel");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package boolexp.revisitor;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface BoolexpRevisitor<Boolexp__AndT extends Boolexp__BinaryExpT, Boolexp__BinaryExpT extends Boolexp__ExpT, Boolexp__ExpT, Boolexp__FalsT extends Boolexp__LitT, Boolexp__LitT extends Boolexp__ExpT, Boolexp__OrT extends Boolexp__BinaryExpT, Boolexp__TruT extends Boolexp__LitT> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolexp__AndT boolexp__And(final boolexp.And it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolexp__FalsT boolexp__Fals(final boolexp.Fals it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolexp__OrT boolexp__Or(final boolexp.Or it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Boolexp__TruT boolexp__Tru(final boolexp.Tru it);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__AndT $(final boolexp.And it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return boolexp__And(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__BinaryExpT $(final boolexp.BinaryExp it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.AndImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__And((boolexp.And) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.OrImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__Or((boolexp.Or) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__ExpT $(final boolexp.Exp it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.AndImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__And((boolexp.And) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.FalsImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__Fals((boolexp.Fals) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.OrImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__Or((boolexp.Or) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.TruImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__Tru((boolexp.Tru) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__FalsT $(final boolexp.Fals it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return boolexp__Fals(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__LitT $(final boolexp.Lit it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.FalsImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__Fals((boolexp.Fals) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == boolexp.impl.TruImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return boolexp__Tru((boolexp.Tru) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__OrT $(final boolexp.Or it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return boolexp__Or(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Boolexp__TruT $(final boolexp.Tru it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return boolexp__Tru(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    Assert.assertEquals(_builder.toString(), res);
  }
  
  @Test
  public void testMulti() {
    final String res = this.generate("../testdata/multi/model/multi.ecore", "../testdata/multi/model/multi.genmodel");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package multi.revisitor;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface MultiRevisitor<Multi__AT, Multi__BT, Multi__CT, Multi__CT_AS_Multi__AT extends Multi__AT, Multi__CT_AS_Multi__BT extends Multi__BT> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Multi__AT multi__A(final multi.A it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Multi__BT multi__B(final multi.B it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Multi__CT multi__C(final multi.C it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Multi__CT_AS_Multi__AT multi__C__AS__multi__A(final multi.C it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Multi__CT_AS_Multi__BT multi__C__AS__multi__B(final multi.C it);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Multi__AT $(final multi.A it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == multi.impl.CImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return multi__C__AS__multi__A((multi.C) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return multi__A(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Multi__BT $(final multi.B it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (it.getClass() == multi.impl.CImpl.class)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return multi__C__AS__multi__B((multi.C) it);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return multi__B(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("default Multi__CT $(final multi.C it) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return multi__C(it);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    Assert.assertEquals(_builder.toString(), res);
  }
}

/**
 * generated by Xtext 2.14.0
 */
package ale.xtext.ale.impl;

import ale.xtext.ale.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AleFactoryImpl extends EFactoryImpl implements AleFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static AleFactory init()
  {
    try
    {
      AleFactory theAleFactory = (AleFactory)EPackage.Registry.INSTANCE.getEFactory(AlePackage.eNS_URI);
      if (theAleFactory != null)
      {
        return theAleFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new AleFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case AlePackage.ALE_ROOT: return createAleRoot();
      case AlePackage.ECORE_IMPORT: return createEcoreImport();
      case AlePackage.ALE_IMPORT: return createAleImport();
      case AlePackage.ALE_CLASS: return createAleClass();
      case AlePackage.ALE_METHOD: return createAleMethod();
      case AlePackage.CONCRETE_METHOD: return createConcreteMethod();
      case AlePackage.ABSTRACT_METHOD: return createAbstractMethod();
      case AlePackage.DEF_METHOD: return createDefMethod();
      case AlePackage.OVERRIDE_METHOD: return createOverrideMethod();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleRoot createAleRoot()
  {
    AleRootImpl aleRoot = new AleRootImpl();
    return aleRoot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EcoreImport createEcoreImport()
  {
    EcoreImportImpl ecoreImport = new EcoreImportImpl();
    return ecoreImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleImport createAleImport()
  {
    AleImportImpl aleImport = new AleImportImpl();
    return aleImport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleClass createAleClass()
  {
    AleClassImpl aleClass = new AleClassImpl();
    return aleClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AleMethod createAleMethod()
  {
    AleMethodImpl aleMethod = new AleMethodImpl();
    return aleMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteMethod createConcreteMethod()
  {
    ConcreteMethodImpl concreteMethod = new ConcreteMethodImpl();
    return concreteMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractMethod createAbstractMethod()
  {
    AbstractMethodImpl abstractMethod = new AbstractMethodImpl();
    return abstractMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefMethod createDefMethod()
  {
    DefMethodImpl defMethod = new DefMethodImpl();
    return defMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OverrideMethod createOverrideMethod()
  {
    OverrideMethodImpl overrideMethod = new OverrideMethodImpl();
    return overrideMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlePackage getAlePackage()
  {
    return (AlePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static AlePackage getPackage()
  {
    return AlePackage.eINSTANCE;
  }

} //AleFactoryImpl

/**
 * generated by Xtext 2.14.0
 */
package ale.xtext.ale;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see ale.xtext.ale.AleFactory
 * @model kind="package"
 * @generated
 */
public interface AlePackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "ale";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.xtext.ale/Ale";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "ale";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  AlePackage eINSTANCE = ale.xtext.ale.impl.AlePackageImpl.init();

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AleRootImpl <em>Root</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AleRootImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAleRoot()
   * @generated
   */
  int ALE_ROOT = 0;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_ROOT__NAME = 0;

  /**
   * The feature id for the '<em><b>Java Imports</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_ROOT__JAVA_IMPORTS = 1;

  /**
   * The feature id for the '<em><b>Ecore Import</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_ROOT__ECORE_IMPORT = 2;

  /**
   * The feature id for the '<em><b>Ale Imports</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_ROOT__ALE_IMPORTS = 3;

  /**
   * The feature id for the '<em><b>Classes</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_ROOT__CLASSES = 4;

  /**
   * The number of structural features of the '<em>Root</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_ROOT_FEATURE_COUNT = 5;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.EcoreImportImpl <em>Ecore Import</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.EcoreImportImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getEcoreImport()
   * @generated
   */
  int ECORE_IMPORT = 1;

  /**
   * The feature id for the '<em><b>Uri</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ECORE_IMPORT__URI = 0;

  /**
   * The number of structural features of the '<em>Ecore Import</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ECORE_IMPORT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AleImportImpl <em>Import</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AleImportImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAleImport()
   * @generated
   */
  int ALE_IMPORT = 2;

  /**
   * The feature id for the '<em><b>Ref</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_IMPORT__REF = 0;

  /**
   * The number of structural features of the '<em>Import</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_IMPORT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AleClassImpl <em>Class</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AleClassImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAleClass()
   * @generated
   */
  int ALE_CLASS = 3;

  /**
   * The feature id for the '<em><b>Abstract</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS__ABSTRACT = 0;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS__NAME = 1;

  /**
   * The feature id for the '<em><b>Methods</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS__METHODS = 2;

  /**
   * The number of structural features of the '<em>Class</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_CLASS_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AleMethodImpl <em>Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AleMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAleMethod()
   * @generated
   */
  int ALE_METHOD = 4;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_METHOD__TYPE = 0;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_METHOD__NAME = 1;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_METHOD__PARAMS = 2;

  /**
   * The number of structural features of the '<em>Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ALE_METHOD_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.ConcreteMethodImpl <em>Concrete Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.ConcreteMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getConcreteMethod()
   * @generated
   */
  int CONCRETE_METHOD = 5;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__TYPE = ALE_METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__NAME = ALE_METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__PARAMS = ALE_METHOD__PARAMS;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD__BLOCK = ALE_METHOD_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Concrete Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONCRETE_METHOD_FEATURE_COUNT = ALE_METHOD_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.AbstractMethodImpl <em>Abstract Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.AbstractMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getAbstractMethod()
   * @generated
   */
  int ABSTRACT_METHOD = 6;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD__TYPE = ALE_METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD__NAME = ALE_METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD__PARAMS = ALE_METHOD__PARAMS;

  /**
   * The number of structural features of the '<em>Abstract Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ABSTRACT_METHOD_FEATURE_COUNT = ALE_METHOD_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.DefMethodImpl <em>Def Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.DefMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getDefMethod()
   * @generated
   */
  int DEF_METHOD = 7;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__TYPE = CONCRETE_METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__NAME = CONCRETE_METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__PARAMS = CONCRETE_METHOD__PARAMS;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD__BLOCK = CONCRETE_METHOD__BLOCK;

  /**
   * The number of structural features of the '<em>Def Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DEF_METHOD_FEATURE_COUNT = CONCRETE_METHOD_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link ale.xtext.ale.impl.OverrideMethodImpl <em>Override Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see ale.xtext.ale.impl.OverrideMethodImpl
   * @see ale.xtext.ale.impl.AlePackageImpl#getOverrideMethod()
   * @generated
   */
  int OVERRIDE_METHOD = 8;

  /**
   * The feature id for the '<em><b>Type</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__TYPE = CONCRETE_METHOD__TYPE;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__NAME = CONCRETE_METHOD__NAME;

  /**
   * The feature id for the '<em><b>Params</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__PARAMS = CONCRETE_METHOD__PARAMS;

  /**
   * The feature id for the '<em><b>Block</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD__BLOCK = CONCRETE_METHOD__BLOCK;

  /**
   * The number of structural features of the '<em>Override Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OVERRIDE_METHOD_FEATURE_COUNT = CONCRETE_METHOD_FEATURE_COUNT + 0;


  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AleRoot <em>Root</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Root</em>'.
   * @see ale.xtext.ale.AleRoot
   * @generated
   */
  EClass getAleRoot();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.AleRoot#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see ale.xtext.ale.AleRoot#getName()
   * @see #getAleRoot()
   * @generated
   */
  EAttribute getAleRoot_Name();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.AleRoot#getJavaImports <em>Java Imports</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Java Imports</em>'.
   * @see ale.xtext.ale.AleRoot#getJavaImports()
   * @see #getAleRoot()
   * @generated
   */
  EReference getAleRoot_JavaImports();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.AleRoot#getEcoreImport <em>Ecore Import</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Ecore Import</em>'.
   * @see ale.xtext.ale.AleRoot#getEcoreImport()
   * @see #getAleRoot()
   * @generated
   */
  EReference getAleRoot_EcoreImport();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.AleRoot#getAleImports <em>Ale Imports</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Ale Imports</em>'.
   * @see ale.xtext.ale.AleRoot#getAleImports()
   * @see #getAleRoot()
   * @generated
   */
  EReference getAleRoot_AleImports();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.AleRoot#getClasses <em>Classes</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Classes</em>'.
   * @see ale.xtext.ale.AleRoot#getClasses()
   * @see #getAleRoot()
   * @generated
   */
  EReference getAleRoot_Classes();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.EcoreImport <em>Ecore Import</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Ecore Import</em>'.
   * @see ale.xtext.ale.EcoreImport
   * @generated
   */
  EClass getEcoreImport();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.EcoreImport#getUri <em>Uri</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Uri</em>'.
   * @see ale.xtext.ale.EcoreImport#getUri()
   * @see #getEcoreImport()
   * @generated
   */
  EAttribute getEcoreImport_Uri();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AleImport <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Import</em>'.
   * @see ale.xtext.ale.AleImport
   * @generated
   */
  EClass getAleImport();

  /**
   * Returns the meta object for the reference '{@link ale.xtext.ale.AleImport#getRef <em>Ref</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Ref</em>'.
   * @see ale.xtext.ale.AleImport#getRef()
   * @see #getAleImport()
   * @generated
   */
  EReference getAleImport_Ref();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AleClass <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Class</em>'.
   * @see ale.xtext.ale.AleClass
   * @generated
   */
  EClass getAleClass();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.AleClass#isAbstract <em>Abstract</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Abstract</em>'.
   * @see ale.xtext.ale.AleClass#isAbstract()
   * @see #getAleClass()
   * @generated
   */
  EAttribute getAleClass_Abstract();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.AleClass#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see ale.xtext.ale.AleClass#getName()
   * @see #getAleClass()
   * @generated
   */
  EAttribute getAleClass_Name();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.AleClass#getMethods <em>Methods</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Methods</em>'.
   * @see ale.xtext.ale.AleClass#getMethods()
   * @see #getAleClass()
   * @generated
   */
  EReference getAleClass_Methods();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AleMethod <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Method</em>'.
   * @see ale.xtext.ale.AleMethod
   * @generated
   */
  EClass getAleMethod();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.AleMethod#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Type</em>'.
   * @see ale.xtext.ale.AleMethod#getType()
   * @see #getAleMethod()
   * @generated
   */
  EReference getAleMethod_Type();

  /**
   * Returns the meta object for the attribute '{@link ale.xtext.ale.AleMethod#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see ale.xtext.ale.AleMethod#getName()
   * @see #getAleMethod()
   * @generated
   */
  EAttribute getAleMethod_Name();

  /**
   * Returns the meta object for the containment reference list '{@link ale.xtext.ale.AleMethod#getParams <em>Params</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Params</em>'.
   * @see ale.xtext.ale.AleMethod#getParams()
   * @see #getAleMethod()
   * @generated
   */
  EReference getAleMethod_Params();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.ConcreteMethod <em>Concrete Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Concrete Method</em>'.
   * @see ale.xtext.ale.ConcreteMethod
   * @generated
   */
  EClass getConcreteMethod();

  /**
   * Returns the meta object for the containment reference '{@link ale.xtext.ale.ConcreteMethod#getBlock <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Block</em>'.
   * @see ale.xtext.ale.ConcreteMethod#getBlock()
   * @see #getConcreteMethod()
   * @generated
   */
  EReference getConcreteMethod_Block();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.AbstractMethod <em>Abstract Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Abstract Method</em>'.
   * @see ale.xtext.ale.AbstractMethod
   * @generated
   */
  EClass getAbstractMethod();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.DefMethod <em>Def Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Def Method</em>'.
   * @see ale.xtext.ale.DefMethod
   * @generated
   */
  EClass getDefMethod();

  /**
   * Returns the meta object for class '{@link ale.xtext.ale.OverrideMethod <em>Override Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Override Method</em>'.
   * @see ale.xtext.ale.OverrideMethod
   * @generated
   */
  EClass getOverrideMethod();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  AleFactory getAleFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AleRootImpl <em>Root</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AleRootImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAleRoot()
     * @generated
     */
    EClass ALE_ROOT = eINSTANCE.getAleRoot();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ALE_ROOT__NAME = eINSTANCE.getAleRoot_Name();

    /**
     * The meta object literal for the '<em><b>Java Imports</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_ROOT__JAVA_IMPORTS = eINSTANCE.getAleRoot_JavaImports();

    /**
     * The meta object literal for the '<em><b>Ecore Import</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_ROOT__ECORE_IMPORT = eINSTANCE.getAleRoot_EcoreImport();

    /**
     * The meta object literal for the '<em><b>Ale Imports</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_ROOT__ALE_IMPORTS = eINSTANCE.getAleRoot_AleImports();

    /**
     * The meta object literal for the '<em><b>Classes</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_ROOT__CLASSES = eINSTANCE.getAleRoot_Classes();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.EcoreImportImpl <em>Ecore Import</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.EcoreImportImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getEcoreImport()
     * @generated
     */
    EClass ECORE_IMPORT = eINSTANCE.getEcoreImport();

    /**
     * The meta object literal for the '<em><b>Uri</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ECORE_IMPORT__URI = eINSTANCE.getEcoreImport_Uri();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AleImportImpl <em>Import</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AleImportImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAleImport()
     * @generated
     */
    EClass ALE_IMPORT = eINSTANCE.getAleImport();

    /**
     * The meta object literal for the '<em><b>Ref</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_IMPORT__REF = eINSTANCE.getAleImport_Ref();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AleClassImpl <em>Class</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AleClassImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAleClass()
     * @generated
     */
    EClass ALE_CLASS = eINSTANCE.getAleClass();

    /**
     * The meta object literal for the '<em><b>Abstract</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ALE_CLASS__ABSTRACT = eINSTANCE.getAleClass_Abstract();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ALE_CLASS__NAME = eINSTANCE.getAleClass_Name();

    /**
     * The meta object literal for the '<em><b>Methods</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_CLASS__METHODS = eINSTANCE.getAleClass_Methods();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AleMethodImpl <em>Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AleMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAleMethod()
     * @generated
     */
    EClass ALE_METHOD = eINSTANCE.getAleMethod();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_METHOD__TYPE = eINSTANCE.getAleMethod_Type();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ALE_METHOD__NAME = eINSTANCE.getAleMethod_Name();

    /**
     * The meta object literal for the '<em><b>Params</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference ALE_METHOD__PARAMS = eINSTANCE.getAleMethod_Params();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.ConcreteMethodImpl <em>Concrete Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.ConcreteMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getConcreteMethod()
     * @generated
     */
    EClass CONCRETE_METHOD = eINSTANCE.getConcreteMethod();

    /**
     * The meta object literal for the '<em><b>Block</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONCRETE_METHOD__BLOCK = eINSTANCE.getConcreteMethod_Block();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.AbstractMethodImpl <em>Abstract Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.AbstractMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getAbstractMethod()
     * @generated
     */
    EClass ABSTRACT_METHOD = eINSTANCE.getAbstractMethod();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.DefMethodImpl <em>Def Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.DefMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getDefMethod()
     * @generated
     */
    EClass DEF_METHOD = eINSTANCE.getDefMethod();

    /**
     * The meta object literal for the '{@link ale.xtext.ale.impl.OverrideMethodImpl <em>Override Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see ale.xtext.ale.impl.OverrideMethodImpl
     * @see ale.xtext.ale.impl.AlePackageImpl#getOverrideMethod()
     * @generated
     */
    EClass OVERRIDE_METHOD = eINSTANCE.getOverrideMethod();

  }

} //AlePackage

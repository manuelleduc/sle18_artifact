/**
 * generated by Xtext 2.12.0
 */
package iot.lua.xtext.scoping;

import activitydiagram.ActivitydiagramPackage;
import activitydiagram.BooleanVariable;
import com.google.common.base.Objects;
import idlmm.OperationDef;
import iot.Sketch;
import iot.lua.xtext.scoping.AbstractIotLuaXtextScopeProvider;
import iot_lua.Iot_luaPackage;
import iot_lua.impl.BooleanVariableBindStatement_AssignmentImpl;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.xtext.lua.lua.Expression;
import org.xtext.lua.lua.Expression_VariableName;
import org.xtext.lua.lua.Statement_Assignment;
import org.xtext.lua.lua.Statement_FunctioncallOrAssignment;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class IotLuaXtextScopeProvider extends AbstractIotLuaXtextScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _equals = Objects.equal(reference, Iot_luaPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE);
    if (_equals) {
      final iot.System system = EcoreUtil2.<iot.System>getContainerOfType(context, iot.System.class);
      final List<OperationDef> operations = EcoreUtil2.<OperationDef>getAllContentsOfType(system, OperationDef.class);
      final Function1<OperationDef, IEObjectDescription> _function = (OperationDef it) -> {
        IEObjectDescription _xblockexpression = null;
        {
          final OperationDef od = ((OperationDef) it);
          _xblockexpression = EObjectDescription.create(od.getIdentifier(), od);
        }
        return _xblockexpression;
      };
      return MapBasedScope.createScope(IScope.NULLSCOPE, ListExtensions.<OperationDef, IEObjectDescription>map(operations, _function));
    } else {
      boolean _equals_1 = Objects.equal(reference, ActivitydiagramPackage.Literals.CONTROL_FLOW__GUARD);
      if (_equals_1) {
        final Sketch sketch = EcoreUtil2.<Sketch>getContainerOfType(context, Sketch.class);
        final List<BooleanVariable> variables = EcoreUtil2.<BooleanVariable>getAllContentsOfType(sketch, BooleanVariable.class);
        final Function1<BooleanVariable, IEObjectDescription> _function_1 = (BooleanVariable it) -> {
          IEObjectDescription _xblockexpression = null;
          {
            final BooleanVariableBindStatement_AssignmentImpl od = ((BooleanVariableBindStatement_AssignmentImpl) it);
            Statement_FunctioncallOrAssignment _delegate = od.getDelegate();
            Expression _head = IterableExtensions.<Expression>head(((Statement_Assignment) _delegate).getVariable());
            final String name = ((Expression_VariableName) _head).getVariable();
            _xblockexpression = EObjectDescription.create(name, od);
          }
          return _xblockexpression;
        };
        return MapBasedScope.createScope(IScope.NULLSCOPE, ListExtensions.<BooleanVariable, IEObjectDescription>map(variables, _function_1));
      }
    }
    return super.getScope(context, reference);
  }
}

/*
 * generated by Xtext 2.12.0
 */
package iot.lua.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IotLuaXtextGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cComponentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cComponentsHWComponentParserRuleCall_3_0_0 = (RuleCall)cComponentsAssignment_3_0.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cComponentsHWComponentParserRuleCall_3_1_0 = (RuleCall)cComponentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cBoardsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cBoardsBoardParserRuleCall_4_0_0 = (RuleCall)cBoardsAssignment_4_0.eContents().get(0);
		private final Assignment cBoardsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBoardsBoardParserRuleCall_4_1_0 = (RuleCall)cBoardsAssignment_4_1.eContents().get(0);
		private final Assignment cSketchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSketchSketchParserRuleCall_5_0 = (RuleCall)cSketchAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//System iot::System:
		//	'system' name=ID '{' (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)?
		//	sketch=Sketch?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID '{' (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)? sketch=Sketch?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(components+=HWComponent components+=HWComponent*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//components+=HWComponent
		public Assignment getComponentsAssignment_3_0() { return cComponentsAssignment_3_0; }
		
		//HWComponent
		public RuleCall getComponentsHWComponentParserRuleCall_3_0_0() { return cComponentsHWComponentParserRuleCall_3_0_0; }
		
		//components+=HWComponent*
		public Assignment getComponentsAssignment_3_1() { return cComponentsAssignment_3_1; }
		
		//HWComponent
		public RuleCall getComponentsHWComponentParserRuleCall_3_1_0() { return cComponentsHWComponentParserRuleCall_3_1_0; }
		
		//(boards+=Board boards+=Board*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//boards+=Board
		public Assignment getBoardsAssignment_4_0() { return cBoardsAssignment_4_0; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_4_0_0() { return cBoardsBoardParserRuleCall_4_0_0; }
		
		//boards+=Board*
		public Assignment getBoardsAssignment_4_1() { return cBoardsAssignment_4_1; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_4_1_0() { return cBoardsBoardParserRuleCall_4_1_0; }
		
		//sketch=Sketch?
		public Assignment getSketchAssignment_5() { return cSketchAssignment_5; }
		
		//Sketch
		public RuleCall getSketchSketchParserRuleCall_5_0() { return cSketchSketchParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class HWComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.HWComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Contained returns idlmm::Contained:
		////	OperationDef;
		//HWComponent iot::HWComp:
		//	Sensor | Actuator;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cProvidesKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cServicesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cServicesIotOperationDefParserRuleCall_2_1_1_0 = (RuleCall)cServicesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Sensor iot::Sensor:
		//	'sensor' name=ID ('{' ('provides' services+=IotOperationDef)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID ('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//('provides' services+=IotOperationDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_1_0() { return cProvidesKeyword_2_1_0; }
		
		//services+=IotOperationDef
		public Assignment getServicesAssignment_2_1_1() { return cServicesAssignment_2_1_1; }
		
		//IotOperationDef
		public RuleCall getServicesIotOperationDefParserRuleCall_2_1_1_0() { return cServicesIotOperationDefParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cProvidesKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cServicesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cServicesIotOperationDefParserRuleCall_2_1_1_0 = (RuleCall)cServicesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Actuator iot::Actuator:
		//	'actuator' name=ID ('{' ('provides' services+=IotOperationDef)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'actuator' name=ID ('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//('provides' services+=IotOperationDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_1_0() { return cProvidesKeyword_2_1_0; }
		
		//services+=IotOperationDef
		public Assignment getServicesAssignment_2_1_1() { return cServicesAssignment_2_1_1; }
		
		//IotOperationDef
		public RuleCall getServicesIotOperationDefParserRuleCall_2_1_1_0() { return cServicesIotOperationDefParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeBoardTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cProvidesKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cComponentsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cComponentsHWCompCrossReference_6_1_1_0 = (CrossReference)cComponentsAssignment_6_1_1.eContents().get(0);
		private final RuleCall cComponentsHWCompIDTerminalRuleCall_6_1_1_0_1 = (RuleCall)cComponentsHWCompCrossReference_6_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Board iot::Board:
		//	{iot::Board}
		//	'board' name=ID '[' type=BoardType ']' ('{' ('provides' components+=[iot::HWComp])*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot::Board} 'board' name=ID '[' type=BoardType ']' ('{' ('provides' components+=[iot::HWComp])* '}')?
		public Group getGroup() { return cGroup; }
		
		//{iot::Board}
		public Action getBoardAction_0() { return cBoardAction_0; }
		
		//'board'
		public Keyword getBoardKeyword_1() { return cBoardKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//type=BoardType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//BoardType
		public RuleCall getTypeBoardTypeEnumRuleCall_4_0() { return cTypeBoardTypeEnumRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//('{' ('provides' components+=[iot::HWComp])* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//('provides' components+=[iot::HWComp])*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'provides'
		public Keyword getProvidesKeyword_6_1_0() { return cProvidesKeyword_6_1_0; }
		
		//components+=[iot::HWComp]
		public Assignment getComponentsAssignment_6_1_1() { return cComponentsAssignment_6_1_1; }
		
		//[iot::HWComp]
		public CrossReference getComponentsHWCompCrossReference_6_1_1_0() { return cComponentsHWCompCrossReference_6_1_1_0; }
		
		//ID
		public RuleCall getComponentsHWCompIDTerminalRuleCall_6_1_1_0_1() { return cComponentsHWCompIDTerminalRuleCall_6_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}
	public class SketchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Sketch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSketchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSketchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivityIotActivityParserRuleCall_3_0 = (RuleCall)cActivityAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sketch iot::Sketch:
		//	{iot::Sketch}
		//	'sketch'
		//	'{'
		//	activity=IotActivity
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{iot::Sketch} 'sketch' '{' activity=IotActivity '}'
		public Group getGroup() { return cGroup; }
		
		//{iot::Sketch}
		public Action getSketchAction_0() { return cSketchAction_0; }
		
		//'sketch'
		public Keyword getSketchKeyword_1() { return cSketchKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//activity=IotActivity
		public Assignment getActivityAssignment_3() { return cActivityAssignment_3; }
		
		//IotActivity
		public RuleCall getActivityIotActivityParserRuleCall_3_0() { return cActivityIotActivityParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class IotOperationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.IotOperationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIotOperationDefBindOperationDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateOperationDefParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//IotOperationDef iot::IotOperationDef:
		//	{iot_lua::IotOperationDefBindOperationDef} delegate=OperationDef;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::IotOperationDefBindOperationDef} delegate=OperationDef
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::IotOperationDefBindOperationDef}
		public Action getIotOperationDefBindOperationDefAction_0() { return cIotOperationDefBindOperationDefAction_0; }
		
		//delegate=OperationDef
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//OperationDef
		public RuleCall getDelegateOperationDefParserRuleCall_1_0() { return cDelegateOperationDefParserRuleCall_1_0; }
	}
	public class OperationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.OperationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStmtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStmtIdlStmtParserRuleCall_6_0 = (RuleCall)cStmtAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OperationDef idlmm::OperationDef:
		//	'operation'
		//	identifier=ID
		//	'(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')'
		//	'{'
		//	stmt=IdlStmt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' identifier=ID '(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')' '{' stmt=IdlStmt '}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=ParameterDef (',' parameters+=ParameterDef)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=ParameterDef
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_3_0_0() { return cParametersParameterDefParserRuleCall_3_0_0; }
		
		//(',' parameters+=ParameterDef)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=ParameterDef
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_3_1_1_0() { return cParametersParameterDefParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//stmt=IdlStmt
		public Assignment getStmtAssignment_6() { return cStmtAssignment_6; }
		
		//IdlStmt
		public RuleCall getStmtIdlStmtParserRuleCall_6_0() { return cStmtIdlStmtParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class IdlStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.IdlStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdlStmtBindBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateBlockParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//IdlStmt idlmm::IdlStmt:
		//	{iot_lua::IdlStmtBindBlock} delegate=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::IdlStmtBindBlock} delegate=Block
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::IdlStmtBindBlock}
		public Action getIdlStmtBindBlockAction_0() { return cIdlStmtBindBlockAction_0; }
		
		//delegate=Block
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//Block
		public RuleCall getDelegateBlockParserRuleCall_1_0() { return cDelegateBlockParserRuleCall_1_0; }
	}
	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParam_attributeEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ParameterDef idlmm::ParameterDef:
		//	direction=param_attribute //(containedType=PrimitiveDef)
		//	identifier=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=param_attribute //(containedType=PrimitiveDef)
		//identifier=ID
		public Group getGroup() { return cGroup; }
		
		//direction=param_attribute
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//param_attribute
		public RuleCall getDirectionParam_attributeEnumRuleCall_0_0() { return cDirectionParam_attributeEnumRuleCall_0_0; }
		
		////(containedType=PrimitiveDef)
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}
	public class PrimitiveDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.PrimitiveDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloating_pt_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharstr_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOther_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveDef idlmm::PrimitiveDef:
		//	integer_type
		//	| floating_pt_type
		//	| charstr_type
		//	| other_type;
		@Override public ParserRule getRule() { return rule; }
		
		//integer_type | floating_pt_type | charstr_type | other_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer_type
		public RuleCall getInteger_typeParserRuleCall_0() { return cInteger_typeParserRuleCall_0; }
		
		//floating_pt_type
		public RuleCall getFloating_pt_typeParserRuleCall_1() { return cFloating_pt_typeParserRuleCall_1; }
		
		//charstr_type
		public RuleCall getCharstr_typeParserRuleCall_2() { return cCharstr_typeParserRuleCall_2; }
		
		//other_type
		public RuleCall getOther_typeParserRuleCall_3() { return cOther_typeParserRuleCall_3; }
	}
	public class Floating_pt_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.floating_pt_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindFloat_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindDouble_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindLongdouble_typeParserRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		
		////---------------------------
		//// BASE TYPES
		////---------------------------
		//floating_pt_type idlmm::PrimitiveDef:
		//	kind=float_type
		//	| kind=double_type
		//	| kind=longdouble_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=float_type | kind=double_type | kind=longdouble_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=float_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//float_type
		public RuleCall getKindFloat_typeEnumRuleCall_0_0() { return cKindFloat_typeEnumRuleCall_0_0; }
		
		//kind=double_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//double_type
		public RuleCall getKindDouble_typeEnumRuleCall_1_0() { return cKindDouble_typeEnumRuleCall_1_0; }
		
		//kind=longdouble_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//longdouble_type
		public RuleCall getKindLongdouble_typeParserRuleCall_2_0() { return cKindLongdouble_typeParserRuleCall_2_0; }
	}
	public class Longdouble_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.longdouble_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//longdouble_type idlmm::PrimitiveKind:
		//	'long' 'double';
		@Override public ParserRule getRule() { return rule; }
		
		//'long' 'double'
		public Group getGroup() { return cGroup; }
		
		//'long'
		public Keyword getLongKeyword_0() { return cLongKeyword_0; }
		
		//'double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}
	public class Integer_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.integer_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindShort_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindLong_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindLonglong_typeParserRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cKindAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cKindUshort_typeParserRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Assignment cKindAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cKindUlong_typeParserRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Assignment cKindAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cKindUlonglong_typeParserRuleCall_5_0 = (RuleCall)cKindAssignment_5.eContents().get(0);
		
		//integer_type idlmm::PrimitiveDef:
		//	kind=short_type
		//	| kind=long_type
		//	| kind=longlong_type
		//	| kind=ushort_type
		//	| kind=ulong_type
		//	| kind=ulonglong_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=short_type | kind=long_type | kind=longlong_type | kind=ushort_type | kind=ulong_type | kind=ulonglong_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=short_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//short_type
		public RuleCall getKindShort_typeEnumRuleCall_0_0() { return cKindShort_typeEnumRuleCall_0_0; }
		
		//kind=long_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//long_type
		public RuleCall getKindLong_typeEnumRuleCall_1_0() { return cKindLong_typeEnumRuleCall_1_0; }
		
		//kind=longlong_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//longlong_type
		public RuleCall getKindLonglong_typeParserRuleCall_2_0() { return cKindLonglong_typeParserRuleCall_2_0; }
		
		//kind=ushort_type
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }
		
		//ushort_type
		public RuleCall getKindUshort_typeParserRuleCall_3_0() { return cKindUshort_typeParserRuleCall_3_0; }
		
		//kind=ulong_type
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }
		
		//ulong_type
		public RuleCall getKindUlong_typeParserRuleCall_4_0() { return cKindUlong_typeParserRuleCall_4_0; }
		
		//kind=ulonglong_type
		public Assignment getKindAssignment_5() { return cKindAssignment_5; }
		
		//ulonglong_type
		public RuleCall getKindUlonglong_typeParserRuleCall_5_0() { return cKindUlonglong_typeParserRuleCall_5_0; }
	}
	public class Longlong_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.longlong_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//longlong_type idlmm::PrimitiveKind:
		//	'long' 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'long' 'long'
		public Group getGroup() { return cGroup; }
		
		//'long'
		public Keyword getLongKeyword_0() { return cLongKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class Ushort_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ushort_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsignedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ushort_type idlmm::PrimitiveKind:
		//	'unsigned' 'short';
		@Override public ParserRule getRule() { return rule; }
		
		//'unsigned' 'short'
		public Group getGroup() { return cGroup; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_0() { return cUnsignedKeyword_0; }
		
		//'short'
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
	}
	public class Ulong_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ulong_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsignedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ulong_type idlmm::PrimitiveKind:
		//	'unsigned' 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'unsigned' 'long'
		public Group getGroup() { return cGroup; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_0() { return cUnsignedKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class Ulonglong_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ulonglong_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsignedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ulonglong_type idlmm::PrimitiveKind:
		//	'unsigned' 'long' 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'unsigned' 'long' 'long'
		public Group getGroup() { return cGroup; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_0() { return cUnsignedKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
		
		//'long'
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }
	}
	public class Charstr_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.charstr_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindChar_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindWide_char_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindString_typeEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cKindAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cKindWide_string_typeEnumRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		
		//charstr_type idlmm::PrimitiveDef:
		//	kind=char_type
		//	| kind=wide_char_type
		//	| kind=string_type
		//	| kind=wide_string_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=char_type | kind=wide_char_type | kind=string_type | kind=wide_string_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=char_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//char_type
		public RuleCall getKindChar_typeEnumRuleCall_0_0() { return cKindChar_typeEnumRuleCall_0_0; }
		
		//kind=wide_char_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//wide_char_type
		public RuleCall getKindWide_char_typeEnumRuleCall_1_0() { return cKindWide_char_typeEnumRuleCall_1_0; }
		
		//kind=string_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//string_type
		public RuleCall getKindString_typeEnumRuleCall_2_0() { return cKindString_typeEnumRuleCall_2_0; }
		
		//kind=wide_string_type
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }
		
		//wide_string_type
		public RuleCall getKindWide_string_typeEnumRuleCall_3_0() { return cKindWide_string_typeEnumRuleCall_3_0; }
	}
	public class Other_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.other_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindBoolean_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindOctet_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindAny_typeEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		
		//other_type idlmm::PrimitiveDef:
		//	kind=boolean_type
		//	| kind=octet_type
		//	| kind=any_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=boolean_type | kind=octet_type | kind=any_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=boolean_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//boolean_type
		public RuleCall getKindBoolean_typeEnumRuleCall_0_0() { return cKindBoolean_typeEnumRuleCall_0_0; }
		
		//kind=octet_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//octet_type
		public RuleCall getKindOctet_typeEnumRuleCall_1_0() { return cKindOctet_typeEnumRuleCall_1_0; }
		
		//kind=any_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//any_type
		public RuleCall getKindAny_typeEnumRuleCall_2_0() { return cKindAny_typeEnumRuleCall_2_0; }
	}
	public class ChunkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Chunk");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Chunk lua::Block:
		//	Block;
		@Override public ParserRule getRule() { return rule; }
		
		//Block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_1_0_0 = (RuleCall)cStatementsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReturnValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cReturnValueLastStatementParserRuleCall_2_0_0 = (RuleCall)cReturnValueAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Block lua::Block:
		//	{lua::Block} (statements+=Statement ';'?)* (returnValue=LastStatement ';'?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{lua::Block} (statements+=Statement ';'?)* (returnValue=LastStatement ';'?)?
		public Group getGroup() { return cGroup; }
		
		//{lua::Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//(statements+=Statement ';'?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_1_0() { return cStatementsAssignment_1_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0_0() { return cStatementsStatementParserRuleCall_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//(returnValue=LastStatement ';'?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//returnValue=LastStatement
		public Assignment getReturnValueAssignment_2_0() { return cReturnValueAssignment_2_0; }
		
		//LastStatement
		public RuleCall getReturnValueLastStatementParserRuleCall_2_0_0() { return cReturnValueLastStatementParserRuleCall_2_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class LastStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.LastStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLastStatement_ReturnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLastStatement_BreakParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// ****************************************************
		//// LAST STATEMENT
		//// ****************************************************
		//LastStatement lua::LastStatement:
		//	LastStatement_Return | LastStatement_Break;
		@Override public ParserRule getRule() { return rule; }
		
		//LastStatement_Return | LastStatement_Break
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LastStatement_Return
		public RuleCall getLastStatement_ReturnParserRuleCall_0() { return cLastStatement_ReturnParserRuleCall_0; }
		
		//LastStatement_Break
		public RuleCall getLastStatement_BreakParserRuleCall_1() { return cLastStatement_BreakParserRuleCall_1; }
	}
	public class LastStatement_ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.LastStatement_Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLastStatement_ReturnWithValueAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cReturnValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cReturnValuesExpressionParserRuleCall_2_0_0 = (RuleCall)cReturnValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cReturnValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cReturnValuesExpressionParserRuleCall_2_1_1_0 = (RuleCall)cReturnValuesAssignment_2_1_1.eContents().get(0);
		
		//// The return statement is used to return values from a function or a chunk
		//LastStatement_Return lua::LastStatement_Return:
		//	'return' {lua::LastStatement_ReturnWithValue} (returnValues+=Expression (',' returnValues+=Expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' {lua::LastStatement_ReturnWithValue} (returnValues+=Expression (',' returnValues+=Expression)*)?
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//{lua::LastStatement_ReturnWithValue}
		public Action getLastStatement_ReturnWithValueAction_1() { return cLastStatement_ReturnWithValueAction_1; }
		
		//(returnValues+=Expression (',' returnValues+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//returnValues+=Expression
		public Assignment getReturnValuesAssignment_2_0() { return cReturnValuesAssignment_2_0; }
		
		//Expression
		public RuleCall getReturnValuesExpressionParserRuleCall_2_0_0() { return cReturnValuesExpressionParserRuleCall_2_0_0; }
		
		//(',' returnValues+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//returnValues+=Expression
		public Assignment getReturnValuesAssignment_2_1_1() { return cReturnValuesAssignment_2_1_1; }
		
		//Expression
		public RuleCall getReturnValuesExpressionParserRuleCall_2_1_1_0() { return cReturnValuesExpressionParserRuleCall_2_1_1_0; }
	}
	public class LastStatement_BreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.LastStatement_Break");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cLastStatement_BreakAction_1 = (Action)cGroup.eContents().get(1);
		
		//// The break statement is used to terminate the execution of a while, repeat, or for loop, skipping to the next statement after the loop
		//LastStatement_Break lua::LastStatement_Break:
		//	'break' {lua::LastStatement_Break};
		@Override public ParserRule getRule() { return rule; }
		
		//'break' {lua::LastStatement_Break}
		public Group getGroup() { return cGroup; }
		
		//'break'
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//{lua::LastStatement_Break}
		public Action getLastStatement_BreakAction_1() { return cLastStatement_BreakAction_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatement_BlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatement_WhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStatement_RepeatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatement_If_Then_ElseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStatement_For_NumericParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStatement_For_GenericParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStatement_GlobalFunction_DeclarationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cStatement_LocalFunction_DeclarationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStatement_Local_Variable_DeclarationParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStatement_FunctioncallOrAssignmentParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//// ****************************************************
		//// STATEMENT
		//// ****************************************************
		//Statement lua::Statement:
		//	Statement_Block | Statement_While | Statement_Repeat | Statement_If_Then_Else | Statement_For_Numeric |
		//	Statement_For_Generic | Statement_GlobalFunction_Declaration | Statement_LocalFunction_Declaration |
		//	Statement_Local_Variable_Declaration | Statement_FunctioncallOrAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Statement_Block | Statement_While | Statement_Repeat | Statement_If_Then_Else | Statement_For_Numeric |
		//Statement_For_Generic | Statement_GlobalFunction_Declaration | Statement_LocalFunction_Declaration |
		//Statement_Local_Variable_Declaration | Statement_FunctioncallOrAssignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Statement_Block
		public RuleCall getStatement_BlockParserRuleCall_0() { return cStatement_BlockParserRuleCall_0; }
		
		//Statement_While
		public RuleCall getStatement_WhileParserRuleCall_1() { return cStatement_WhileParserRuleCall_1; }
		
		//Statement_Repeat
		public RuleCall getStatement_RepeatParserRuleCall_2() { return cStatement_RepeatParserRuleCall_2; }
		
		//Statement_If_Then_Else
		public RuleCall getStatement_If_Then_ElseParserRuleCall_3() { return cStatement_If_Then_ElseParserRuleCall_3; }
		
		//Statement_For_Numeric
		public RuleCall getStatement_For_NumericParserRuleCall_4() { return cStatement_For_NumericParserRuleCall_4; }
		
		//Statement_For_Generic
		public RuleCall getStatement_For_GenericParserRuleCall_5() { return cStatement_For_GenericParserRuleCall_5; }
		
		//Statement_GlobalFunction_Declaration
		public RuleCall getStatement_GlobalFunction_DeclarationParserRuleCall_6() { return cStatement_GlobalFunction_DeclarationParserRuleCall_6; }
		
		//Statement_LocalFunction_Declaration
		public RuleCall getStatement_LocalFunction_DeclarationParserRuleCall_7() { return cStatement_LocalFunction_DeclarationParserRuleCall_7; }
		
		//Statement_Local_Variable_Declaration
		public RuleCall getStatement_Local_Variable_DeclarationParserRuleCall_8() { return cStatement_Local_Variable_DeclarationParserRuleCall_8; }
		
		//Statement_FunctioncallOrAssignment
		public RuleCall getStatement_FunctioncallOrAssignmentParserRuleCall_9() { return cStatement_FunctioncallOrAssignmentParserRuleCall_9; }
	}
	public class Statement_BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// A block can be explicitly delimited to produce a single statement. "do ... end"
		//Statement_Block lua::Statement_Block:
		//	'do' block=Block 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'do' block=Block 'end'
		public Group getGroup() { return cGroup; }
		
		//'do'
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
		
		//'end'
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class Statement_WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Control structure. "while ... do ... end"
		//Statement_While lua::Statement_While:
		//	'while' expression=Expression 'do' block=Block 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' expression=Expression 'do' block=Block 'end'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class Statement_RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		private final Keyword cUntilKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//// Control structure. "repeat ... until ..."
		//Statement_Repeat lua::Statement_Repeat:
		//	'repeat' block=Block 'until' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'repeat' block=Block 'until' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'repeat'
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//block=Block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
		
		//'until'
		public Keyword getUntilKeyword_2() { return cUntilKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}
	public class Statement_If_Then_ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_If_Then_Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIfExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIfExpressionExpressionParserRuleCall_1_0 = (RuleCall)cIfExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfBlockBlockParserRuleCall_3_0 = (RuleCall)cIfBlockAssignment_3.eContents().get(0);
		private final Assignment cElseIfAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseIfStatement_If_Then_Else_ElseIfPartParserRuleCall_4_0 = (RuleCall)cElseIfAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseBlockAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_5_1_0 = (RuleCall)cElseBlockAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Control structure. "if ... then ... elseif ... elseif ... else ... end"
		//Statement_If_Then_Else lua::Statement_If_Then_Else:
		//	'if' ifExpression=Expression 'then' ifBlock=Block elseIf+=Statement_If_Then_Else_ElseIfPart* ('else' elseBlock=Block)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' ifExpression=Expression 'then' ifBlock=Block elseIf+=Statement_If_Then_Else_ElseIfPart* ('else' elseBlock=Block)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//ifExpression=Expression
		public Assignment getIfExpressionAssignment_1() { return cIfExpressionAssignment_1; }
		
		//Expression
		public RuleCall getIfExpressionExpressionParserRuleCall_1_0() { return cIfExpressionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//ifBlock=Block
		public Assignment getIfBlockAssignment_3() { return cIfBlockAssignment_3; }
		
		//Block
		public RuleCall getIfBlockBlockParserRuleCall_3_0() { return cIfBlockBlockParserRuleCall_3_0; }
		
		//elseIf+=Statement_If_Then_Else_ElseIfPart*
		public Assignment getElseIfAssignment_4() { return cElseIfAssignment_4; }
		
		//Statement_If_Then_Else_ElseIfPart
		public RuleCall getElseIfStatement_If_Then_Else_ElseIfPartParserRuleCall_4_0() { return cElseIfStatement_If_Then_Else_ElseIfPartParserRuleCall_4_0; }
		
		//('else' elseBlock=Block)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//elseBlock=Block
		public Assignment getElseBlockAssignment_5_1() { return cElseBlockAssignment_5_1; }
		
		//Block
		public RuleCall getElseBlockBlockParserRuleCall_5_1_0() { return cElseBlockBlockParserRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class Statement_If_Then_Else_ElseIfPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_If_Then_Else_ElseIfPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElseifExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElseifExpressionExpressionParserRuleCall_1_0 = (RuleCall)cElseifExpressionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElseifBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElseifBlockBlockParserRuleCall_3_0 = (RuleCall)cElseifBlockAssignment_3.eContents().get(0);
		
		//Statement_If_Then_Else_ElseIfPart lua::Statement_If_Then_Else_ElseIfPart:
		//	'elseif' elseifExpression=Expression 'then' elseifBlock=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'elseif' elseifExpression=Expression 'then' elseifBlock=Block
		public Group getGroup() { return cGroup; }
		
		//'elseif'
		public Keyword getElseifKeyword_0() { return cElseifKeyword_0; }
		
		//elseifExpression=Expression
		public Assignment getElseifExpressionAssignment_1() { return cElseifExpressionAssignment_1; }
		
		//Expression
		public RuleCall getElseifExpressionExpressionParserRuleCall_1_0() { return cElseifExpressionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//elseifBlock=Block
		public Assignment getElseifBlockAssignment_3() { return cElseifBlockAssignment_3; }
		
		//Block
		public RuleCall getElseifBlockBlockParserRuleCall_3_0() { return cElseifBlockBlockParserRuleCall_3_0; }
	}
	public class Statement_For_NumericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_For_Numeric");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIteratorNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIteratorNameIDTerminalRuleCall_1_0 = (RuleCall)cIteratorNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStartExprExpressionParserRuleCall_3_0 = (RuleCall)cStartExprAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUntilExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUntilExprExpressionParserRuleCall_5_0 = (RuleCall)cUntilExprAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cStepExprAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cStepExprExpressionParserRuleCall_6_1_0 = (RuleCall)cStepExprAssignment_6_1.eContents().get(0);
		private final Keyword cDoKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBlockAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBlockBlockParserRuleCall_8_0 = (RuleCall)cBlockAssignment_8.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//// The numeric for loop repeats a block of code while a control variable runs through an arithmetic progression "for ...=..., ... [,...] do ... end"
		//Statement_For_Numeric lua::Statement_For_Numeric:
		//	'for' iteratorName=ID '=' startExpr=Expression "," untilExpr=Expression ("," stepExpr=Expression)? 'do' block=Block
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' iteratorName=ID '=' startExpr=Expression "," untilExpr=Expression ("," stepExpr=Expression)? 'do' block=Block
		//'end'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//iteratorName=ID
		public Assignment getIteratorNameAssignment_1() { return cIteratorNameAssignment_1; }
		
		//ID
		public RuleCall getIteratorNameIDTerminalRuleCall_1_0() { return cIteratorNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//startExpr=Expression
		public Assignment getStartExprAssignment_3() { return cStartExprAssignment_3; }
		
		//Expression
		public RuleCall getStartExprExpressionParserRuleCall_3_0() { return cStartExprExpressionParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//untilExpr=Expression
		public Assignment getUntilExprAssignment_5() { return cUntilExprAssignment_5; }
		
		//Expression
		public RuleCall getUntilExprExpressionParserRuleCall_5_0() { return cUntilExprExpressionParserRuleCall_5_0; }
		
		//("," stepExpr=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//stepExpr=Expression
		public Assignment getStepExprAssignment_6_1() { return cStepExprAssignment_6_1; }
		
		//Expression
		public RuleCall getStepExprExpressionParserRuleCall_6_1_0() { return cStepExprExpressionParserRuleCall_6_1_0; }
		
		//'do'
		public Keyword getDoKeyword_7() { return cDoKeyword_7; }
		
		//block=Block
		public Assignment getBlockAssignment_8() { return cBlockAssignment_8; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_8_0() { return cBlockBlockParserRuleCall_8_0; }
		
		//'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class Statement_For_GenericElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_For_Generic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamesIDTerminalRuleCall_2_1_0 = (RuleCall)cNamesAssignment_2_1.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionsExpressionParserRuleCall_4_0 = (RuleCall)cExpressionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExpressionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_5_1_0 = (RuleCall)cExpressionsAssignment_5_1.eContents().get(0);
		private final Keyword cDoKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBlockBlockParserRuleCall_7_0 = (RuleCall)cBlockAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// The generic for statement works over functions, called iterators. On each iteration, the iterator function is called to produce a new value, stopping when this new value is nil "for ... in ... do ... end"
		//Statement_For_Generic lua::Statement_For_Generic:
		//	'for' names+=ID (',' names+=ID)* 'in' expressions+=Expression (',' expressions+=Expression)* 'do' block=Block 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' names+=ID (',' names+=ID)* 'in' expressions+=Expression (',' expressions+=Expression)* 'do' block=Block 'end'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_1_0() { return cNamesIDTerminalRuleCall_1_0; }
		
		//(',' names+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//names+=ID
		public Assignment getNamesAssignment_2_1() { return cNamesAssignment_2_1; }
		
		//ID
		public RuleCall getNamesIDTerminalRuleCall_2_1_0() { return cNamesIDTerminalRuleCall_2_1_0; }
		
		//'in'
		public Keyword getInKeyword_3() { return cInKeyword_3; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_4() { return cExpressionsAssignment_4; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_4_0() { return cExpressionsExpressionParserRuleCall_4_0; }
		
		//(',' expressions+=Expression)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_5_1() { return cExpressionsAssignment_5_1; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_5_1_0() { return cExpressionsExpressionParserRuleCall_5_1_0; }
		
		//'do'
		public Keyword getDoKeyword_6() { return cDoKeyword_6; }
		
		//block=Block
		public Assignment getBlockAssignment_7() { return cBlockAssignment_7; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_7_0() { return cBlockBlockParserRuleCall_7_0; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}
	public class Statement_GlobalFunction_DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_GlobalFunction_Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixIDTerminalRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPrefixAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPrefixIDTerminalRuleCall_2_1_0 = (RuleCall)cPrefixAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFunctionNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctionNameIDTerminalRuleCall_3_1_0 = (RuleCall)cFunctionNameAssignment_3_1.eContents().get(0);
		private final Assignment cFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionFunctionParserRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Statement_GlobalFunction_Declaration lua::Statement_GlobalFunction_Declaration:
		//	'function' prefix+=ID ('.' prefix+=ID)* (':' functionName=ID)? function=Function 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' prefix+=ID ('.' prefix+=ID)* (':' functionName=ID)? function=Function 'end'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//prefix+=ID
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_0() { return cPrefixIDTerminalRuleCall_1_0; }
		
		//('.' prefix+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//prefix+=ID
		public Assignment getPrefixAssignment_2_1() { return cPrefixAssignment_2_1; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_2_1_0() { return cPrefixIDTerminalRuleCall_2_1_0; }
		
		//(':' functionName=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//functionName=ID
		public Assignment getFunctionNameAssignment_3_1() { return cFunctionNameAssignment_3_1; }
		
		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_3_1_0() { return cFunctionNameIDTerminalRuleCall_3_1_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_4_0() { return cFunctionFunctionParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class Statement_LocalFunction_DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_LocalFunction_Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionNameIDTerminalRuleCall_2_0 = (RuleCall)cFunctionNameAssignment_2.eContents().get(0);
		private final Assignment cFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunctionFunctionParserRuleCall_3_0 = (RuleCall)cFunctionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Statement_LocalFunction_Declaration lua::Statement_LocalFunction_Declaration:
		//	'local' 'function' functionName=ID function=Function 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'local' 'function' functionName=ID function=Function 'end'
		public Group getGroup() { return cGroup; }
		
		//'local'
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//functionName=ID
		public Assignment getFunctionNameAssignment_2() { return cFunctionNameAssignment_2; }
		
		//ID
		public RuleCall getFunctionNameIDTerminalRuleCall_2_0() { return cFunctionNameIDTerminalRuleCall_2_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_3() { return cFunctionAssignment_3; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_3_0() { return cFunctionFunctionParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class Statement_Local_Variable_DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_Local_Variable_Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableNamesIDTerminalRuleCall_1_0 = (RuleCall)cVariableNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariableNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariableNamesIDTerminalRuleCall_2_1_0 = (RuleCall)cVariableNamesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInitialValueExpressionParserRuleCall_3_2_1_0 = (RuleCall)cInitialValueAssignment_3_2_1.eContents().get(0);
		
		//// Local variables can be declared anywhere inside a block. The declaration can include an initial assignment "local ... [= ...]"
		//Statement_Local_Variable_Declaration lua::Statement_Local_Variable_Declaration:
		//	'local' variableNames+=ID (',' variableNames+=ID)* ('=' initialValue+=Expression (',' initialValue+=Expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'local' variableNames+=ID (',' variableNames+=ID)* ('=' initialValue+=Expression (',' initialValue+=Expression)*)?
		public Group getGroup() { return cGroup; }
		
		//'local'
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }
		
		//variableNames+=ID
		public Assignment getVariableNamesAssignment_1() { return cVariableNamesAssignment_1; }
		
		//ID
		public RuleCall getVariableNamesIDTerminalRuleCall_1_0() { return cVariableNamesIDTerminalRuleCall_1_0; }
		
		//(',' variableNames+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variableNames+=ID
		public Assignment getVariableNamesAssignment_2_1() { return cVariableNamesAssignment_2_1; }
		
		//ID
		public RuleCall getVariableNamesIDTerminalRuleCall_2_1_0() { return cVariableNamesIDTerminalRuleCall_2_1_0; }
		
		//('=' initialValue+=Expression (',' initialValue+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//initialValue+=Expression
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_3_1_0() { return cInitialValueExpressionParserRuleCall_3_1_0; }
		
		//(',' initialValue+=Expression)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//initialValue+=Expression
		public Assignment getInitialValueAssignment_3_2_1() { return cInitialValueAssignment_3_2_1; }
		
		//Expression
		public RuleCall getInitialValueExpressionParserRuleCall_3_2_1_0() { return cInitialValueExpressionParserRuleCall_3_2_1_0; }
	}
	public class Statement_FunctioncallOrAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Statement_FunctioncallOrAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_AccessMemberOrArrayElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cStatement_AssignmentVariableAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cVariableExpression_AccessMemberOrArrayElementParserRuleCall_1_0_1_1_0 = (RuleCall)cVariableAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cValuesAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cValuesExpressionParserRuleCall_1_0_3_0 = (RuleCall)cValuesAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Keyword cCommaKeyword_1_0_4_0 = (Keyword)cGroup_1_0_4.eContents().get(0);
		private final Assignment cValuesAssignment_1_0_4_1 = (Assignment)cGroup_1_0_4.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_1_0_4_1_0 = (RuleCall)cValuesAssignment_1_0_4_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cStatement_CallMemberFunctionObjectAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cMemberFunctionNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMemberFunctionNameIDTerminalRuleCall_1_1_2_0 = (RuleCall)cMemberFunctionNameAssignment_1_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_3_0 = (RuleCall)cArgumentsAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cStatement_CallFunctionObjectAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsFunctioncall_ArgumentsParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		
		//Statement_FunctioncallOrAssignment lua::Statement_FunctioncallOrAssignment:
		//	Expression_AccessMemberOrArrayElement ({lua::Statement_Assignment.variable+=current} (=> ','
		//	variable+=Expression_AccessMemberOrArrayElement)* '='
		//	values+=Expression (',' values+=Expression)* | ':' {lua::Statement_CallMemberFunction.object=current}
		//	memberFunctionName=ID arguments=Functioncall_Arguments | {lua::Statement_CallFunction.object=current}
		//	arguments=Functioncall_Arguments);
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_AccessMemberOrArrayElement ({lua::Statement_Assignment.variable+=current} (=> ','
		//variable+=Expression_AccessMemberOrArrayElement)* '=' values+=Expression (',' values+=Expression)* | ':'
		//{lua::Statement_CallMemberFunction.object=current} memberFunctionName=ID arguments=Functioncall_Arguments |
		//{lua::Statement_CallFunction.object=current} arguments=Functioncall_Arguments)
		public Group getGroup() { return cGroup; }
		
		//Expression_AccessMemberOrArrayElement
		public RuleCall getExpression_AccessMemberOrArrayElementParserRuleCall_0() { return cExpression_AccessMemberOrArrayElementParserRuleCall_0; }
		
		//{lua::Statement_Assignment.variable+=current} (=> ',' variable+=Expression_AccessMemberOrArrayElement)* '='
		//values+=Expression (',' values+=Expression)* | ':' {lua::Statement_CallMemberFunction.object=current}
		//memberFunctionName=ID arguments=Functioncall_Arguments | {lua::Statement_CallFunction.object=current}
		//arguments=Functioncall_Arguments
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{lua::Statement_Assignment.variable+=current} (=> ',' variable+=Expression_AccessMemberOrArrayElement)* '='
		//values+=Expression (',' values+=Expression)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{lua::Statement_Assignment.variable+=current}
		public Action getStatement_AssignmentVariableAction_1_0_0() { return cStatement_AssignmentVariableAction_1_0_0; }
		
		//(=> ',' variable+=Expression_AccessMemberOrArrayElement)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//=> ','
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }
		
		//variable+=Expression_AccessMemberOrArrayElement
		public Assignment getVariableAssignment_1_0_1_1() { return cVariableAssignment_1_0_1_1; }
		
		//Expression_AccessMemberOrArrayElement
		public RuleCall getVariableExpression_AccessMemberOrArrayElementParserRuleCall_1_0_1_1_0() { return cVariableExpression_AccessMemberOrArrayElementParserRuleCall_1_0_1_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_2() { return cEqualsSignKeyword_1_0_2; }
		
		//values+=Expression
		public Assignment getValuesAssignment_1_0_3() { return cValuesAssignment_1_0_3; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_1_0_3_0() { return cValuesExpressionParserRuleCall_1_0_3_0; }
		
		//(',' values+=Expression)*
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }
		
		//','
		public Keyword getCommaKeyword_1_0_4_0() { return cCommaKeyword_1_0_4_0; }
		
		//values+=Expression
		public Assignment getValuesAssignment_1_0_4_1() { return cValuesAssignment_1_0_4_1; }
		
		//Expression
		public RuleCall getValuesExpressionParserRuleCall_1_0_4_1_0() { return cValuesExpressionParserRuleCall_1_0_4_1_0; }
		
		//// Call of a member function
		//':' {lua::Statement_CallMemberFunction.object=current} memberFunctionName=ID arguments=Functioncall_Arguments
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }
		
		//{lua::Statement_CallMemberFunction.object=current}
		public Action getStatement_CallMemberFunctionObjectAction_1_1_1() { return cStatement_CallMemberFunctionObjectAction_1_1_1; }
		
		//memberFunctionName=ID
		public Assignment getMemberFunctionNameAssignment_1_1_2() { return cMemberFunctionNameAssignment_1_1_2; }
		
		//ID
		public RuleCall getMemberFunctionNameIDTerminalRuleCall_1_1_2_0() { return cMemberFunctionNameIDTerminalRuleCall_1_1_2_0; }
		
		//arguments=Functioncall_Arguments
		public Assignment getArgumentsAssignment_1_1_3() { return cArgumentsAssignment_1_1_3; }
		
		//Functioncall_Arguments
		public RuleCall getArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_3_0() { return cArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_3_0; }
		
		//{lua::Statement_CallFunction.object=current} arguments=Functioncall_Arguments
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{lua::Statement_CallFunction.object=current}
		public Action getStatement_CallFunctionObjectAction_1_2_0() { return cStatement_CallFunctionObjectAction_1_2_0; }
		
		//arguments=Functioncall_Arguments
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }
		
		//Functioncall_Arguments
		public RuleCall getArgumentsFunctioncall_ArgumentsParserRuleCall_1_2_1_0() { return cArgumentsFunctioncall_ArgumentsParserRuleCall_1_2_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression");
		private final RuleCall cExpression_OrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// ****************************************************
		//// EXPRESSIONS
		//// ****************************************************
		//// Delegate to the priority chain of operators by calling the rule for the lowest priority operator
		//Expression lua::Expression:
		//	Expression_Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Or
		public RuleCall getExpression_OrParserRuleCall() { return cExpression_OrParserRuleCall; }
	}
	public class Expression_OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_AndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cExpression_OrLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression_AndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Or: left associative, priority 0
		//Expression_Or lua::Expression:
		//	Expression_And ('or' {lua::Expression_Or.left=current} right=Expression_And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_And ('or' {lua::Expression_Or.left=current} right=Expression_And)*
		public Group getGroup() { return cGroup; }
		
		//Expression_And
		public RuleCall getExpression_AndParserRuleCall_0() { return cExpression_AndParserRuleCall_0; }
		
		//('or' {lua::Expression_Or.left=current} right=Expression_And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'or'
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }
		
		//{lua::Expression_Or.left=current}
		public Action getExpression_OrLeftAction_1_1() { return cExpression_OrLeftAction_1_1; }
		
		//right=Expression_And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression_And
		public RuleCall getRightExpression_AndParserRuleCall_1_2_0() { return cRightExpression_AndParserRuleCall_1_2_0; }
	}
	public class Expression_AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_CompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cExpression_AndLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression_CompareParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// And: left associative, priority 1
		//Expression_And lua::Expression:
		//	Expression_Compare ('and' {lua::Expression_And.left=current} right=Expression_Compare)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Compare ('and' {lua::Expression_And.left=current} right=Expression_Compare)*
		public Group getGroup() { return cGroup; }
		
		//Expression_Compare
		public RuleCall getExpression_CompareParserRuleCall_0() { return cExpression_CompareParserRuleCall_0; }
		
		//('and' {lua::Expression_And.left=current} right=Expression_Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//{lua::Expression_And.left=current}
		public Action getExpression_AndLeftAction_1_1() { return cExpression_AndLeftAction_1_1; }
		
		//right=Expression_Compare
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression_Compare
		public RuleCall getRightExpression_CompareParserRuleCall_1_2_0() { return cRightExpression_CompareParserRuleCall_1_2_0; }
	}
	public class Expression_CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_ConcatenationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cExpression_LargerLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cExpression_Larger_EqualLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Action cExpression_SmallerLeftAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Action cExpression_Smaller_EqualLeftAction_1_3_1 = (Action)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Action cExpression_EqualLeftAction_1_4_1 = (Action)cGroup_1_4.eContents().get(1);
		private final Assignment cRightAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_4_2_0 = (RuleCall)cRightAssignment_1_4_2.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final Keyword cTildeEqualsSignKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Action cExpression_Not_EqualLeftAction_1_5_1 = (Action)cGroup_1_5.eContents().get(1);
		private final Assignment cRightAssignment_1_5_2 = (Assignment)cGroup_1_5.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_5_2_0 = (RuleCall)cRightAssignment_1_5_2.eContents().get(0);
		
		//// Comparisons: left associative, priority 2
		//Expression_Compare lua::Expression:
		//	Expression_Concatenation ('>' {lua::Expression_Larger.left=current} right=Expression_Concatenation | '>='
		//	{lua::Expression_Larger_Equal.left=current} right=Expression_Concatenation | '<'
		//	{lua::Expression_Smaller.left=current} right=Expression_Concatenation | '<='
		//	{lua::Expression_Smaller_Equal.left=current} right=Expression_Concatenation | '=='
		//	{lua::Expression_Equal.left=current} right=Expression_Concatenation | '~=' {lua::Expression_Not_Equal.left=current}
		//	right=Expression_Concatenation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Concatenation ('>' {lua::Expression_Larger.left=current} right=Expression_Concatenation | '>='
		//{lua::Expression_Larger_Equal.left=current} right=Expression_Concatenation | '<' {lua::Expression_Smaller.left=current}
		//right=Expression_Concatenation | '<=' {lua::Expression_Smaller_Equal.left=current} right=Expression_Concatenation |
		//'==' {lua::Expression_Equal.left=current} right=Expression_Concatenation | '~='
		//{lua::Expression_Not_Equal.left=current} right=Expression_Concatenation)*
		public Group getGroup() { return cGroup; }
		
		//Expression_Concatenation
		public RuleCall getExpression_ConcatenationParserRuleCall_0() { return cExpression_ConcatenationParserRuleCall_0; }
		
		//('>' {lua::Expression_Larger.left=current} right=Expression_Concatenation | '>='
		//{lua::Expression_Larger_Equal.left=current} right=Expression_Concatenation | '<' {lua::Expression_Smaller.left=current}
		//right=Expression_Concatenation | '<=' {lua::Expression_Smaller_Equal.left=current} right=Expression_Concatenation |
		//'==' {lua::Expression_Equal.left=current} right=Expression_Concatenation | '~='
		//{lua::Expression_Not_Equal.left=current} right=Expression_Concatenation)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'>' {lua::Expression_Larger.left=current} right=Expression_Concatenation
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0() { return cGreaterThanSignKeyword_1_0_0; }
		
		//{lua::Expression_Larger.left=current}
		public Action getExpression_LargerLeftAction_1_0_1() { return cExpression_LargerLeftAction_1_0_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_0_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_0_2_0; }
		
		//'>=' {lua::Expression_Larger_Equal.left=current} right=Expression_Concatenation
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1_0() { return cGreaterThanSignEqualsSignKeyword_1_1_0; }
		
		//{lua::Expression_Larger_Equal.left=current}
		public Action getExpression_Larger_EqualLeftAction_1_1_1() { return cExpression_Larger_EqualLeftAction_1_1_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_1_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_1_2_0; }
		
		//'<' {lua::Expression_Smaller.left=current} right=Expression_Concatenation
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_2_0() { return cLessThanSignKeyword_1_2_0; }
		
		//{lua::Expression_Smaller.left=current}
		public Action getExpression_SmallerLeftAction_1_2_1() { return cExpression_SmallerLeftAction_1_2_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_2_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_2_2_0; }
		
		//'<=' {lua::Expression_Smaller_Equal.left=current} right=Expression_Concatenation
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_3_0() { return cLessThanSignEqualsSignKeyword_1_3_0; }
		
		//{lua::Expression_Smaller_Equal.left=current}
		public Action getExpression_Smaller_EqualLeftAction_1_3_1() { return cExpression_Smaller_EqualLeftAction_1_3_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_3_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_3_2_0; }
		
		//'==' {lua::Expression_Equal.left=current} right=Expression_Concatenation
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_4_0() { return cEqualsSignEqualsSignKeyword_1_4_0; }
		
		//{lua::Expression_Equal.left=current}
		public Action getExpression_EqualLeftAction_1_4_1() { return cExpression_EqualLeftAction_1_4_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_4_2() { return cRightAssignment_1_4_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_4_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_4_2_0; }
		
		//'~=' {lua::Expression_Not_Equal.left=current} right=Expression_Concatenation
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//'~='
		public Keyword getTildeEqualsSignKeyword_1_5_0() { return cTildeEqualsSignKeyword_1_5_0; }
		
		//{lua::Expression_Not_Equal.left=current}
		public Action getExpression_Not_EqualLeftAction_1_5_1() { return cExpression_Not_EqualLeftAction_1_5_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_5_2() { return cRightAssignment_1_5_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_5_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_5_2_0; }
	}
	public class Expression_ConcatenationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Concatenation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_PlusMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cExpression_ConcatenationLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression_ConcatenationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Concatenation: right associative, priority 3
		//Expression_Concatenation lua::Expression:
		//	Expression_PlusMinus ('..' {lua::Expression_Concatenation.left=current} right=Expression_Concatenation)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_PlusMinus ('..' {lua::Expression_Concatenation.left=current} right=Expression_Concatenation)?
		public Group getGroup() { return cGroup; }
		
		//Expression_PlusMinus
		public RuleCall getExpression_PlusMinusParserRuleCall_0() { return cExpression_PlusMinusParserRuleCall_0; }
		
		//('..' {lua::Expression_Concatenation.left=current} right=Expression_Concatenation)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_0() { return cFullStopFullStopKeyword_1_0; }
		
		//{lua::Expression_Concatenation.left=current}
		public Action getExpression_ConcatenationLeftAction_1_1() { return cExpression_ConcatenationLeftAction_1_1; }
		
		//right=Expression_Concatenation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression_Concatenation
		public RuleCall getRightExpression_ConcatenationParserRuleCall_1_2_0() { return cRightExpression_ConcatenationParserRuleCall_1_2_0; }
	}
	public class Expression_PlusMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_PlusMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_MultiplicationDivisionModuloParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cExpression_PlusLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression_MultiplicationDivisionModuloParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cExpression_MinusLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression_MultiplicationDivisionModuloParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//// addition/subtraction: left associative, priority 4
		//Expression_PlusMinus lua::Expression:
		//	Expression_MultiplicationDivisionModulo ('+' {lua::Expression_Plus.left=current}
		//	right=Expression_MultiplicationDivisionModulo | '-' {lua::Expression_Minus.left=current}
		//	right=Expression_MultiplicationDivisionModulo)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_MultiplicationDivisionModulo ('+' {lua::Expression_Plus.left=current}
		//right=Expression_MultiplicationDivisionModulo | '-' {lua::Expression_Minus.left=current}
		//right=Expression_MultiplicationDivisionModulo)*
		public Group getGroup() { return cGroup; }
		
		//Expression_MultiplicationDivisionModulo
		public RuleCall getExpression_MultiplicationDivisionModuloParserRuleCall_0() { return cExpression_MultiplicationDivisionModuloParserRuleCall_0; }
		
		//('+' {lua::Expression_Plus.left=current} right=Expression_MultiplicationDivisionModulo | '-'
		//{lua::Expression_Minus.left=current} right=Expression_MultiplicationDivisionModulo)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'+' {lua::Expression_Plus.left=current} right=Expression_MultiplicationDivisionModulo
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//{lua::Expression_Plus.left=current}
		public Action getExpression_PlusLeftAction_1_0_1() { return cExpression_PlusLeftAction_1_0_1; }
		
		//right=Expression_MultiplicationDivisionModulo
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression_MultiplicationDivisionModulo
		public RuleCall getRightExpression_MultiplicationDivisionModuloParserRuleCall_1_0_2_0() { return cRightExpression_MultiplicationDivisionModuloParserRuleCall_1_0_2_0; }
		
		//'-' {lua::Expression_Minus.left=current} right=Expression_MultiplicationDivisionModulo
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1_0() { return cHyphenMinusKeyword_1_1_0; }
		
		//{lua::Expression_Minus.left=current}
		public Action getExpression_MinusLeftAction_1_1_1() { return cExpression_MinusLeftAction_1_1_1; }
		
		//right=Expression_MultiplicationDivisionModulo
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression_MultiplicationDivisionModulo
		public RuleCall getRightExpression_MultiplicationDivisionModuloParserRuleCall_1_1_2_0() { return cRightExpression_MultiplicationDivisionModuloParserRuleCall_1_1_2_0; }
	}
	public class Expression_MultiplicationDivisionModuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_MultiplicationDivisionModulo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_UnaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cExpression_MultiplicationLeftAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpression_UnaryParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cExpression_DivisionLeftAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpression_UnaryParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cPercentSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Action cExpression_ModuloLeftAction_1_2_1 = (Action)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightExpression_UnaryParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		
		//// multiplication/division, left associative, priority 5
		//Expression_MultiplicationDivisionModulo lua::Expression:
		//	Expression_Unary ('*' {lua::Expression_Multiplication.left=current} right=Expression_Unary | '/'
		//	{lua::Expression_Division.left=current} right=Expression_Unary | '%' {lua::Expression_Modulo.left=current}
		//	right=Expression_Unary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Unary ('*' {lua::Expression_Multiplication.left=current} right=Expression_Unary | '/'
		//{lua::Expression_Division.left=current} right=Expression_Unary | '%' {lua::Expression_Modulo.left=current}
		//right=Expression_Unary)*
		public Group getGroup() { return cGroup; }
		
		//Expression_Unary
		public RuleCall getExpression_UnaryParserRuleCall_0() { return cExpression_UnaryParserRuleCall_0; }
		
		//('*' {lua::Expression_Multiplication.left=current} right=Expression_Unary | '/' {lua::Expression_Division.left=current}
		//right=Expression_Unary | '%' {lua::Expression_Modulo.left=current} right=Expression_Unary)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'*' {lua::Expression_Multiplication.left=current} right=Expression_Unary
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }
		
		//{lua::Expression_Multiplication.left=current}
		public Action getExpression_MultiplicationLeftAction_1_0_1() { return cExpression_MultiplicationLeftAction_1_0_1; }
		
		//right=Expression_Unary
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Expression_Unary
		public RuleCall getRightExpression_UnaryParserRuleCall_1_0_2_0() { return cRightExpression_UnaryParserRuleCall_1_0_2_0; }
		
		//'/' {lua::Expression_Division.left=current} right=Expression_Unary
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }
		
		//{lua::Expression_Division.left=current}
		public Action getExpression_DivisionLeftAction_1_1_1() { return cExpression_DivisionLeftAction_1_1_1; }
		
		//right=Expression_Unary
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//Expression_Unary
		public RuleCall getRightExpression_UnaryParserRuleCall_1_1_2_0() { return cRightExpression_UnaryParserRuleCall_1_1_2_0; }
		
		//'%' {lua::Expression_Modulo.left=current} right=Expression_Unary
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_1_2_0() { return cPercentSignKeyword_1_2_0; }
		
		//{lua::Expression_Modulo.left=current}
		public Action getExpression_ModuloLeftAction_1_2_1() { return cExpression_ModuloLeftAction_1_2_1; }
		
		//right=Expression_Unary
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }
		
		//Expression_Unary
		public RuleCall getRightExpression_UnaryParserRuleCall_1_2_2_0() { return cRightExpression_UnaryParserRuleCall_1_2_2_0; }
	}
	public class Expression_UnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Unary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_ExponentiationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNotKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cExpression_NegateAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cExpAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpExpression_UnaryParserRuleCall_1_2_0 = (RuleCall)cExpAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cExpression_LengthAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpExpression_UnaryParserRuleCall_2_2_0 = (RuleCall)cExpAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Action cExpression_InvertAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final Assignment cExpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpExpression_UnaryParserRuleCall_3_2_0 = (RuleCall)cExpAssignment_3_2.eContents().get(0);
		
		//// Unary operators: right associative, priority 6
		//Expression_Unary lua::Expression:
		//	Expression_Exponentiation | 'not' {lua::Expression_Negate} exp=Expression_Unary | '#' {lua::Expression_Length}
		//	exp=Expression_Unary | '-' {lua::Expression_Invert} exp=Expression_Unary;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Exponentiation | 'not' {lua::Expression_Negate} exp=Expression_Unary | '#' {lua::Expression_Length}
		//exp=Expression_Unary | '-' {lua::Expression_Invert} exp=Expression_Unary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression_Exponentiation
		public RuleCall getExpression_ExponentiationParserRuleCall_0() { return cExpression_ExponentiationParserRuleCall_0; }
		
		//'not' {lua::Expression_Negate} exp=Expression_Unary
		public Group getGroup_1() { return cGroup_1; }
		
		//'not'
		public Keyword getNotKeyword_1_0() { return cNotKeyword_1_0; }
		
		//{lua::Expression_Negate}
		public Action getExpression_NegateAction_1_1() { return cExpression_NegateAction_1_1; }
		
		//exp=Expression_Unary
		public Assignment getExpAssignment_1_2() { return cExpAssignment_1_2; }
		
		//Expression_Unary
		public RuleCall getExpExpression_UnaryParserRuleCall_1_2_0() { return cExpExpression_UnaryParserRuleCall_1_2_0; }
		
		//'#' {lua::Expression_Length} exp=Expression_Unary
		public Group getGroup_2() { return cGroup_2; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }
		
		//{lua::Expression_Length}
		public Action getExpression_LengthAction_2_1() { return cExpression_LengthAction_2_1; }
		
		//exp=Expression_Unary
		public Assignment getExpAssignment_2_2() { return cExpAssignment_2_2; }
		
		//Expression_Unary
		public RuleCall getExpExpression_UnaryParserRuleCall_2_2_0() { return cExpExpression_UnaryParserRuleCall_2_2_0; }
		
		//'-' {lua::Expression_Invert} exp=Expression_Unary
		public Group getGroup_3() { return cGroup_3; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }
		
		//{lua::Expression_Invert}
		public Action getExpression_InvertAction_3_1() { return cExpression_InvertAction_3_1; }
		
		//exp=Expression_Unary
		public Assignment getExpAssignment_3_2() { return cExpAssignment_3_2; }
		
		//Expression_Unary
		public RuleCall getExpExpression_UnaryParserRuleCall_3_2_0() { return cExpExpression_UnaryParserRuleCall_3_2_0; }
	}
	public class Expression_ExponentiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Exponentiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_TerminalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cExpression_ExponentiationLeftAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression_ExponentiationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// exponentiation: right associative, priority 7
		//Expression_Exponentiation lua::Expression:
		//	Expression_Terminal ('^' {lua::Expression_Exponentiation.left=current} right=Expression_Exponentiation)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Terminal ('^' {lua::Expression_Exponentiation.left=current} right=Expression_Exponentiation)?
		public Group getGroup() { return cGroup; }
		
		//Expression_Terminal
		public RuleCall getExpression_TerminalParserRuleCall_0() { return cExpression_TerminalParserRuleCall_0; }
		
		//('^' {lua::Expression_Exponentiation.left=current} right=Expression_Exponentiation)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }
		
		//{lua::Expression_Exponentiation.left=current}
		public Action getExpression_ExponentiationLeftAction_1_1() { return cExpression_ExponentiationLeftAction_1_1; }
		
		//right=Expression_Exponentiation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression_Exponentiation
		public RuleCall getRightExpression_ExponentiationParserRuleCall_1_2_0() { return cRightExpression_ExponentiationParserRuleCall_1_2_0; }
	}
	public class Expression_TerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Terminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_NilParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpression_TrueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExpression_FalseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExpression_NumberParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpression_VarArgsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExpression_StringParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cExpression_FunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cExpression_TableConstructorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cExpression_FunctioncallParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Expression_Terminal lua::Expression:
		//	Expression_Nil | Expression_True | Expression_False | Expression_Number | Expression_VarArgs | Expression_String |
		//	Expression_Function | Expression_TableConstructor | Expression_Functioncall;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_Nil | Expression_True | Expression_False | Expression_Number | Expression_VarArgs | Expression_String |
		//Expression_Function | Expression_TableConstructor | Expression_Functioncall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expression_Nil
		public RuleCall getExpression_NilParserRuleCall_0() { return cExpression_NilParserRuleCall_0; }
		
		//Expression_True
		public RuleCall getExpression_TrueParserRuleCall_1() { return cExpression_TrueParserRuleCall_1; }
		
		//Expression_False
		public RuleCall getExpression_FalseParserRuleCall_2() { return cExpression_FalseParserRuleCall_2; }
		
		//Expression_Number
		public RuleCall getExpression_NumberParserRuleCall_3() { return cExpression_NumberParserRuleCall_3; }
		
		//Expression_VarArgs
		public RuleCall getExpression_VarArgsParserRuleCall_4() { return cExpression_VarArgsParserRuleCall_4; }
		
		//Expression_String
		public RuleCall getExpression_StringParserRuleCall_5() { return cExpression_StringParserRuleCall_5; }
		
		//Expression_Function
		public RuleCall getExpression_FunctionParserRuleCall_6() { return cExpression_FunctionParserRuleCall_6; }
		
		//Expression_TableConstructor
		public RuleCall getExpression_TableConstructorParserRuleCall_7() { return cExpression_TableConstructorParserRuleCall_7; }
		
		//Expression_Functioncall
		public RuleCall getExpression_FunctioncallParserRuleCall_8() { return cExpression_FunctioncallParserRuleCall_8; }
	}
	public class Expression_NilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Nil");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExpression_NilAction_1 = (Action)cGroup.eContents().get(1);
		
		//Expression_Nil lua::Expression_Nil:
		//	'nil' {lua::Expression_Nil};
		@Override public ParserRule getRule() { return rule; }
		
		//'nil' {lua::Expression_Nil}
		public Group getGroup() { return cGroup; }
		
		//'nil'
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }
		
		//{lua::Expression_Nil}
		public Action getExpression_NilAction_1() { return cExpression_NilAction_1; }
	}
	public class Expression_TrueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_True");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExpression_TrueAction_1 = (Action)cGroup.eContents().get(1);
		
		//Expression_True lua::Expression_True:
		//	'true' {lua::Expression_True};
		@Override public ParserRule getRule() { return rule; }
		
		//'true' {lua::Expression_True}
		public Group getGroup() { return cGroup; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//{lua::Expression_True}
		public Action getExpression_TrueAction_1() { return cExpression_TrueAction_1; }
	}
	public class Expression_FalseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_False");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFalseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExpression_FalseAction_1 = (Action)cGroup.eContents().get(1);
		
		//Expression_False lua::Expression_False:
		//	'false' {lua::Expression_False};
		@Override public ParserRule getRule() { return rule; }
		
		//'false' {lua::Expression_False}
		public Group getGroup() { return cGroup; }
		
		//'false'
		public Keyword getFalseKeyword_0() { return cFalseKeyword_0; }
		
		//{lua::Expression_False}
		public Action getExpression_FalseAction_1() { return cExpression_FalseAction_1; }
	}
	public class Expression_NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Number");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Expression_Number lua::Expression_Number:
		//	value=Double;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Double
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Double
		public RuleCall getValueDoubleParserRuleCall_0() { return cValueDoubleParserRuleCall_0; }
	}
	public class Expression_VarArgsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_VarArgs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExpression_VarArgsAction_1 = (Action)cGroup.eContents().get(1);
		
		//Expression_VarArgs lua::Expression_VarArgs:
		//	'...' {lua::Expression_VarArgs};
		@Override public ParserRule getRule() { return rule; }
		
		//'...' {lua::Expression_VarArgs}
		public Group getGroup() { return cGroup; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_0() { return cFullStopFullStopFullStopKeyword_0; }
		
		//{lua::Expression_VarArgs}
		public Action getExpression_VarArgsAction_1() { return cExpression_VarArgsAction_1; }
	}
	public class Expression_StringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_String");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Expression_String lua::Expression_String:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class Expression_FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Expression_Function lua::Expression_Function:
		//	'function' function=Function 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'function' function=Function 'end'
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//function=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//'end'
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class Expression_TableConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_TableConstructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cExpression_TableConstructorAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cFieldsFieldParserRuleCall_2_0_0 = (RuleCall)cFieldsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cGroup_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1_0_0 = (Keyword)cAlternatives_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_1 = (Keyword)cAlternatives_2_1_0.eContents().get(1);
		private final Assignment cFieldsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFieldsFieldParserRuleCall_2_1_1_0 = (RuleCall)cFieldsAssignment_2_1_1.eContents().get(0);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Expression_TableConstructor lua::Expression_TableConstructor:
		//	'{' {lua::Expression_TableConstructor} (fields+=Field ((',' | ';') fields+=Field)* (',' | ';')?)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {lua::Expression_TableConstructor} (fields+=Field ((',' | ';') fields+=Field)* (',' | ';')?)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{lua::Expression_TableConstructor}
		public Action getExpression_TableConstructorAction_1() { return cExpression_TableConstructorAction_1; }
		
		//(fields+=Field ((',' | ';') fields+=Field)* (',' | ';')?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_0() { return cFieldsAssignment_2_0; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_0_0() { return cFieldsFieldParserRuleCall_2_0_0; }
		
		//((',' | ';') fields+=Field)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//',' | ';'
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_1_0_0() { return cCommaKeyword_2_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1_0_1() { return cSemicolonKeyword_2_1_0_1; }
		
		//fields+=Field
		public Assignment getFieldsAssignment_2_1_1() { return cFieldsAssignment_2_1_1; }
		
		//Field
		public RuleCall getFieldsFieldParserRuleCall_2_1_1_0() { return cFieldsFieldParserRuleCall_2_1_1_0; }
		
		//(',' | ';')?
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_2_1() { return cSemicolonKeyword_2_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Expression_FunctioncallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_Functioncall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_AccessMemberOrArrayElementParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cExpression_CallMemberFunctionObjectAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cMemberFunctionNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cMemberFunctionNameIDTerminalRuleCall_1_0_2_0 = (RuleCall)cMemberFunctionNameAssignment_1_0_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cArgumentsFunctioncall_ArgumentsParserRuleCall_1_0_3_0 = (RuleCall)cArgumentsAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpression_CallFunctionObjectAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1.eContents().get(0);
		
		//// Function calls, left associative, single call only, priority 9
		//Expression_Functioncall lua::Expression:
		//	Expression_AccessMemberOrArrayElement (=> ':' {lua::Expression_CallMemberFunction.object=current}
		//	memberFunctionName=ID arguments=Functioncall_Arguments | {lua::Expression_CallFunction.object=current}
		//	arguments=Functioncall_Arguments)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_AccessMemberOrArrayElement (=> ':' {lua::Expression_CallMemberFunction.object=current} memberFunctionName=ID
		//arguments=Functioncall_Arguments | {lua::Expression_CallFunction.object=current} arguments=Functioncall_Arguments)?
		public Group getGroup() { return cGroup; }
		
		//Expression_AccessMemberOrArrayElement
		public RuleCall getExpression_AccessMemberOrArrayElementParserRuleCall_0() { return cExpression_AccessMemberOrArrayElementParserRuleCall_0; }
		
		//(=> ':' {lua::Expression_CallMemberFunction.object=current} memberFunctionName=ID arguments=Functioncall_Arguments |
		//{lua::Expression_CallFunction.object=current} arguments=Functioncall_Arguments)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//// Member-Funktionsaufruf
		//=> ':' {lua::Expression_CallMemberFunction.object=current} memberFunctionName=ID arguments=Functioncall_Arguments
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=> ':'
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }
		
		//{lua::Expression_CallMemberFunction.object=current}
		public Action getExpression_CallMemberFunctionObjectAction_1_0_1() { return cExpression_CallMemberFunctionObjectAction_1_0_1; }
		
		//memberFunctionName=ID
		public Assignment getMemberFunctionNameAssignment_1_0_2() { return cMemberFunctionNameAssignment_1_0_2; }
		
		//ID
		public RuleCall getMemberFunctionNameIDTerminalRuleCall_1_0_2_0() { return cMemberFunctionNameIDTerminalRuleCall_1_0_2_0; }
		
		//arguments=Functioncall_Arguments
		public Assignment getArgumentsAssignment_1_0_3() { return cArgumentsAssignment_1_0_3; }
		
		//Functioncall_Arguments
		public RuleCall getArgumentsFunctioncall_ArgumentsParserRuleCall_1_0_3_0() { return cArgumentsFunctioncall_ArgumentsParserRuleCall_1_0_3_0; }
		
		//{lua::Expression_CallFunction.object=current} arguments=Functioncall_Arguments
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{lua::Expression_CallFunction.object=current}
		public Action getExpression_CallFunctionObjectAction_1_1_0() { return cExpression_CallFunctionObjectAction_1_1_0; }
		
		//arguments=Functioncall_Arguments
		public Assignment getArgumentsAssignment_1_1_1() { return cArgumentsAssignment_1_1_1; }
		
		//Functioncall_Arguments
		public RuleCall getArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_1_0() { return cArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_1_0; }
	}
	public class Expression_AccessMemberOrArrayElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_AccessMemberOrArrayElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression_VariableNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cExpression_AccessArrayArrayAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cIndexAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_1_0_2_0 = (RuleCall)cIndexAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cExpression_AccessMemberObjectAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		private final Assignment cMemberNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMemberNameIDTerminalRuleCall_1_1_2_0 = (RuleCall)cMemberNameAssignment_1_1_2.eContents().get(0);
		
		//// Access a member or array element, left associative, chaining possible, priority 10
		//Expression_AccessMemberOrArrayElement lua::Expression:
		//	Expression_VariableName ('[' {lua::Expression_AccessArray.array=current} index=Expression ']' | '.'
		//	{lua::Expression_AccessMember.object=current} memberName=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression_VariableName ('[' {lua::Expression_AccessArray.array=current} index=Expression ']' | '.'
		//{lua::Expression_AccessMember.object=current} memberName=ID)*
		public Group getGroup() { return cGroup; }
		
		//Expression_VariableName
		public RuleCall getExpression_VariableNameParserRuleCall_0() { return cExpression_VariableNameParserRuleCall_0; }
		
		//('[' {lua::Expression_AccessArray.array=current} index=Expression ']' | '.'
		//{lua::Expression_AccessMember.object=current} memberName=ID)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//// An expression accessing an element in a variable array
		//'[' {lua::Expression_AccessArray.array=current} index=Expression ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//{lua::Expression_AccessArray.array=current}
		public Action getExpression_AccessArrayArrayAction_1_0_1() { return cExpression_AccessArrayArrayAction_1_0_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_1_0_2() { return cIndexAssignment_1_0_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_1_0_2_0() { return cIndexExpressionParserRuleCall_1_0_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_3() { return cRightSquareBracketKeyword_1_0_3; }
		
		//// Access a member variable using multiple parts separated by "."
		//'.' {lua::Expression_AccessMember.object=current} memberName=ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//{lua::Expression_AccessMember.object=current}
		public Action getExpression_AccessMemberObjectAction_1_1_1() { return cExpression_AccessMemberObjectAction_1_1_1; }
		
		//memberName=ID
		public Assignment getMemberNameAssignment_1_1_2() { return cMemberNameAssignment_1_1_2; }
		
		//ID
		public RuleCall getMemberNameIDTerminalRuleCall_1_1_2_0() { return cMemberNameIDTerminalRuleCall_1_1_2_0; }
	}
	public class Expression_VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Expression_VariableName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpression_VariableNameAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableIDTerminalRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		
		//// access a variable, terminal expression, priority 11
		//// Delegate to top of expression rule chain for bracketed expressions
		//Expression_VariableName lua::Expression:
		//	'(' Expression ')' | {lua::Expression_VariableName} variable=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | {lua::Expression_VariableName} variable=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{lua::Expression_VariableName} variable=ID
		public Group getGroup_1() { return cGroup_1; }
		
		//{lua::Expression_VariableName}
		public Action getExpression_VariableNameAction_1_0() { return cExpression_VariableNameAction_1_0; }
		
		//variable=ID
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//ID
		public RuleCall getVariableIDTerminalRuleCall_1_1_0() { return cVariableIDTerminalRuleCall_1_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersIDTerminalRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersIDTerminalRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cVarArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cVarArgsFullStopFullStopFullStopKeyword_2_0 = (Keyword)cVarArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//// ****************************************************
		//// FUNCTIONS
		//// ****************************************************
		//Function lua::Function:
		//	'(' (parameters+=ID (',' parameters+=ID)* ','?)? varArgs?='...'? ')' body=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (parameters+=ID (',' parameters+=ID)* ','?)? varArgs?='...'? ')' body=Block
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(parameters+=ID (',' parameters+=ID)* ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_1_0_0() { return cParametersIDTerminalRuleCall_1_0_0; }
		
		//(',' parameters+=ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//parameters+=ID
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }
		
		//ID
		public RuleCall getParametersIDTerminalRuleCall_1_1_1_0() { return cParametersIDTerminalRuleCall_1_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//varArgs?='...'?
		public Assignment getVarArgsAssignment_2() { return cVarArgsAssignment_2; }
		
		//'...'
		public Keyword getVarArgsFullStopFullStopFullStopKeyword_2_0() { return cVarArgsFullStopFullStopFullStopKeyword_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}
	public class Functioncall_ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Functioncall_Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctioncall_ArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0_1_0 = (Assignment)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_0_1_0_0 = (RuleCall)cArgumentsAssignment_1_0_1_0.eContents().get(0);
		private final Group cGroup_1_0_1_1 = (Group)cGroup_1_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_0_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_0_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cArgumentsExpression_TableConstructorParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cArgumentsExpression_StringParserRuleCall_1_2_0 = (RuleCall)cArgumentsAssignment_1_2.eContents().get(0);
		
		//// Some syntactic sugar: strings and field can be passed as parameters without bracket
		//Functioncall_Arguments lua::Functioncall_Arguments:
		//	{lua::Functioncall_Arguments} ('(' (arguments+=Expression (',' arguments+=Expression)*)? ')' |
		//	arguments+=Expression_TableConstructor | arguments+=Expression_String);
		@Override public ParserRule getRule() { return rule; }
		
		//{lua::Functioncall_Arguments} ('(' (arguments+=Expression (',' arguments+=Expression)*)? ')' |
		//arguments+=Expression_TableConstructor | arguments+=Expression_String)
		public Group getGroup() { return cGroup; }
		
		//{lua::Functioncall_Arguments}
		public Action getFunctioncall_ArgumentsAction_0() { return cFunctioncall_ArgumentsAction_0; }
		
		//'(' (arguments+=Expression (',' arguments+=Expression)*)? ')' | arguments+=Expression_TableConstructor |
		//arguments+=Expression_String
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_0_1_0() { return cArgumentsAssignment_1_0_1_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_0_1_0_0() { return cArgumentsExpressionParserRuleCall_1_0_1_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_1_0() { return cCommaKeyword_1_0_1_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_0_1_1_1() { return cArgumentsAssignment_1_0_1_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_0_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_0_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//arguments+=Expression_TableConstructor
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//Expression_TableConstructor
		public RuleCall getArgumentsExpression_TableConstructorParserRuleCall_1_1_0() { return cArgumentsExpression_TableConstructorParserRuleCall_1_1_0; }
		
		//arguments+=Expression_String
		public Assignment getArgumentsAssignment_1_2() { return cArgumentsAssignment_1_2; }
		
		//Expression_String
		public RuleCall getArgumentsExpression_StringParserRuleCall_1_2_0() { return cArgumentsExpression_StringParserRuleCall_1_2_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Field");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cField_AddEntryToTable_BracketsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cField_AddEntryToTableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cField_AppendEntryToTableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// ****************************************************
		//// TABLES/FIELDS
		//// ****************************************************
		//Field lua::Field:
		//	Field_AddEntryToTable_Brackets | Field_AddEntryToTable | Field_AppendEntryToTable;
		@Override public ParserRule getRule() { return rule; }
		
		//Field_AddEntryToTable_Brackets | Field_AddEntryToTable | Field_AppendEntryToTable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field_AddEntryToTable_Brackets
		public RuleCall getField_AddEntryToTable_BracketsParserRuleCall_0() { return cField_AddEntryToTable_BracketsParserRuleCall_0; }
		
		//Field_AddEntryToTable
		public RuleCall getField_AddEntryToTableParserRuleCall_1() { return cField_AddEntryToTableParserRuleCall_1; }
		
		//Field_AppendEntryToTable
		public RuleCall getField_AppendEntryToTableParserRuleCall_2() { return cField_AppendEntryToTableParserRuleCall_2; }
	}
	public class Field_AddEntryToTable_BracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Field_AddEntryToTable_Brackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexExpressionExpressionParserRuleCall_1_0 = (RuleCall)cIndexExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//// Each field of the form "[exp1] = exp2" adds to the new table an entry with key exp1 and value exp2
		//Field_AddEntryToTable_Brackets lua::Field_AddEntryToTable_Brackets:
		//	'[' indexExpression=Expression ']' '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' indexExpression=Expression ']' '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//indexExpression=Expression
		public Assignment getIndexExpressionAssignment_1() { return cIndexExpressionAssignment_1; }
		
		//Expression
		public RuleCall getIndexExpressionExpressionParserRuleCall_1_0() { return cIndexExpressionExpressionParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }
	}
	public class Field_AddEntryToTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Field_AddEntryToTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// A field of the form "name = exp" is equivalent to ["name"] = exp
		//Field_AddEntryToTable lua::Field_AddEntryToTable:
		//	key=ID '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//key=ID '=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class Field_AppendEntryToTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Field_AppendEntryToTable");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//// fields of the form "exp" are equivalent to [i] = exp
		//Field_AppendEntryToTable lua::Field_AppendEntryToTable:
		//	value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Expression
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }
	}
	public class IotActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.IotActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIotActivityBindActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateActivityParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//// ****************************************************
		//// TERMINALS
		//// ****************************************************
		//// Identifiers can be any string of letters, digits, and underscores, but mustn't begin with a digit.
		//IotActivity iot::IotActivity:
		//	{iot_lua::IotActivityBindActivity} delegate=Activity;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::IotActivityBindActivity} delegate=Activity
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::IotActivityBindActivity}
		public Action getIotActivityBindActivityAction_0() { return cIotActivityBindActivityAction_0; }
		
		//delegate=Activity
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//Activity
		public RuleCall getDelegateActivityParserRuleCall_1_0() { return cDelegateActivityParserRuleCall_1_0; }
	}
	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputsVariableParserRuleCall_3_1_0 = (RuleCall)cInputsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInputsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInputsVariableParserRuleCall_3_2_1_0 = (RuleCall)cInputsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLocalsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLocalsVariableParserRuleCall_5_0_0 = (RuleCall)cLocalsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cLocalsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cLocalsVariableParserRuleCall_5_1_1_0 = (RuleCall)cLocalsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNodesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNodesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cNodesActivityNodeParserRuleCall_6_2_0 = (RuleCall)cNodesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cNodesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cNodesActivityNodeParserRuleCall_6_3_1_0 = (RuleCall)cNodesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEdgesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cEdgesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEdgesActivityEdgeParserRuleCall_7_2_0 = (RuleCall)cEdgesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cEdgesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cEdgesActivityEdgeParserRuleCall_7_3_1_0 = (RuleCall)cEdgesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Activity activitydiagram::Activity:
		//	{activitydiagram::Activity}
		//	'activity'
		//	name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')?
		//	'{' (locals+=Variable ("," locals+=Variable)*)? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
		//	('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::Activity} 'activity' name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')? '{' (locals+=Variable
		//("," locals+=Variable)*)? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')? ('edges' '{'
		//edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::Activity}
		public Action getActivityAction_0() { return cActivityAction_0; }
		
		//'activity'
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' inputs+=Variable ("," inputs+=Variable)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//inputs+=Variable
		public Assignment getInputsAssignment_3_1() { return cInputsAssignment_3_1; }
		
		//Variable
		public RuleCall getInputsVariableParserRuleCall_3_1_0() { return cInputsVariableParserRuleCall_3_1_0; }
		
		//("," inputs+=Variable)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//inputs+=Variable
		public Assignment getInputsAssignment_3_2_1() { return cInputsAssignment_3_2_1; }
		
		//Variable
		public RuleCall getInputsVariableParserRuleCall_3_2_1_0() { return cInputsVariableParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(locals+=Variable ("," locals+=Variable)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//locals+=Variable
		public Assignment getLocalsAssignment_5_0() { return cLocalsAssignment_5_0; }
		
		//Variable
		public RuleCall getLocalsVariableParserRuleCall_5_0_0() { return cLocalsVariableParserRuleCall_5_0_0; }
		
		//("," locals+=Variable)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//locals+=Variable
		public Assignment getLocalsAssignment_5_1_1() { return cLocalsAssignment_5_1_1; }
		
		//Variable
		public RuleCall getLocalsVariableParserRuleCall_5_1_1_0() { return cLocalsVariableParserRuleCall_5_1_1_0; }
		
		//('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'nodes'
		public Keyword getNodesKeyword_6_0() { return cNodesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//nodes+=ActivityNode
		public Assignment getNodesAssignment_6_2() { return cNodesAssignment_6_2; }
		
		//ActivityNode
		public RuleCall getNodesActivityNodeParserRuleCall_6_2_0() { return cNodesActivityNodeParserRuleCall_6_2_0; }
		
		//("," nodes+=ActivityNode)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//nodes+=ActivityNode
		public Assignment getNodesAssignment_6_3_1() { return cNodesAssignment_6_3_1; }
		
		//ActivityNode
		public RuleCall getNodesActivityNodeParserRuleCall_6_3_1_0() { return cNodesActivityNodeParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'edges'
		public Keyword getEdgesKeyword_7_0() { return cEdgesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//edges+=ActivityEdge
		public Assignment getEdgesAssignment_7_2() { return cEdgesAssignment_7_2; }
		
		//ActivityEdge
		public RuleCall getEdgesActivityEdgeParserRuleCall_7_2_0() { return cEdgesActivityEdgeParserRuleCall_7_2_0; }
		
		//("," edges+=ActivityEdge)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//edges+=ActivityEdge
		public Assignment getEdgesAssignment_7_3_1() { return cEdgesAssignment_7_3_1; }
		
		//ActivityEdge
		public RuleCall getEdgesActivityEdgeParserRuleCall_7_3_1_0() { return cEdgesActivityEdgeParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ActivityNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ActivityNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpaqueActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActivityFinalNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForkNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJoinNodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMergeNodeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDecisionNodeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ActivityNode activitydiagram::ActivityNode:
		//	OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;
		@Override public ParserRule getRule() { return rule; }
		
		//OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpaqueAction
		public RuleCall getOpaqueActionParserRuleCall_0() { return cOpaqueActionParserRuleCall_0; }
		
		//InitialNode
		public RuleCall getInitialNodeParserRuleCall_1() { return cInitialNodeParserRuleCall_1; }
		
		//ActivityFinalNode
		public RuleCall getActivityFinalNodeParserRuleCall_2() { return cActivityFinalNodeParserRuleCall_2; }
		
		//ForkNode
		public RuleCall getForkNodeParserRuleCall_3() { return cForkNodeParserRuleCall_3; }
		
		//JoinNode
		public RuleCall getJoinNodeParserRuleCall_4() { return cJoinNodeParserRuleCall_4; }
		
		//MergeNode
		public RuleCall getMergeNodeParserRuleCall_5() { return cMergeNodeParserRuleCall_5; }
		
		//DecisionNode
		public RuleCall getDecisionNodeParserRuleCall_6() { return cDecisionNodeParserRuleCall_6; }
	}
	public class ActivityEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ActivityEdge");
		private final RuleCall cControlFlowParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ActivityEdge activitydiagram::ActivityEdge:
		//	ControlFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlFlow
		public RuleCall getControlFlowParserRuleCall() { return cControlFlowParserRuleCall; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable activitydiagram::Variable:
		//	IntegerVariable | BooleanVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerVariable | BooleanVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerVariable
		public RuleCall getIntegerVariableParserRuleCall_0() { return cIntegerVariableParserRuleCall_0; }
		
		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_1() { return cBooleanVariableParserRuleCall_1; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value activitydiagram::Value:
		//	BooleanValue | IntegerValue;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanValue | IntegerValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }
		
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }
	}
	public class OpaqueActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.OpaqueAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpaqueActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCompKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpressionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpressionsExpBindStatementParserRuleCall_3_2_0 = (RuleCall)cExpressionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cExpressionsExpBindStatementParserRuleCall_3_3_1_0 = (RuleCall)cExpressionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIncomingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_4_2_0 = (CrossReference)cIncomingAssignment_4_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cIncomingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cIncomingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutgoingAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_5_2_0 = (CrossReference)cOutgoingAssignment_5_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_5_3_1_0 = (CrossReference)cOutgoingAssignment_5_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_5_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cServiceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionsExpBindOpDefParserRuleCall_6_1_0 = (RuleCall)cExpressionsAssignment_6_1.eContents().get(0);
		
		//OpaqueAction activitydiagram::OpaqueAction:
		//	{activitydiagram::OpaqueAction}
		//	'action'
		//	name=ID ('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')? ('in' '('
		//	incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '('
		//	outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')? ('service'
		//	expressions+=ExpBindOpDef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::OpaqueAction} 'action' name=ID ('comp' '{' expressions+=ExpBindStatement (","
		//expressions+=ExpBindStatement)* '}')? ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '(' outgoing+=[activitydiagram::ActivityEdge] (","
		//outgoing+=[activitydiagram::ActivityEdge])* ')')? ('service' expressions+=ExpBindOpDef)?
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::OpaqueAction}
		public Action getOpaqueActionAction_0() { return cOpaqueActionAction_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'comp'
		public Keyword getCompKeyword_3_0() { return cCompKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//expressions+=ExpBindStatement
		public Assignment getExpressionsAssignment_3_2() { return cExpressionsAssignment_3_2; }
		
		//ExpBindStatement
		public RuleCall getExpressionsExpBindStatementParserRuleCall_3_2_0() { return cExpressionsExpBindStatementParserRuleCall_3_2_0; }
		
		//("," expressions+=ExpBindStatement)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//expressions+=ExpBindStatement
		public Assignment getExpressionsAssignment_3_3_1() { return cExpressionsAssignment_3_3_1; }
		
		//ExpBindStatement
		public RuleCall getExpressionsExpBindStatementParserRuleCall_3_3_1_0() { return cExpressionsExpBindStatementParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_4_2() { return cIncomingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_4_2_0() { return cIncomingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_4_3_1() { return cIncomingAssignment_4_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_4_3_1_0() { return cIncomingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'out'
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_5_2() { return cOutgoingAssignment_5_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_5_2_0() { return cOutgoingActivityEdgeCrossReference_5_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_5_3_1() { return cOutgoingAssignment_5_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_5_3_1_0() { return cOutgoingActivityEdgeCrossReference_5_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_5_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_5_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//('service' expressions+=ExpBindOpDef)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'service'
		public Keyword getServiceKeyword_6_0() { return cServiceKeyword_6_0; }
		
		//expressions+=ExpBindOpDef
		public Assignment getExpressionsAssignment_6_1() { return cExpressionsAssignment_6_1; }
		
		//ExpBindOpDef
		public RuleCall getExpressionsExpBindOpDefParserRuleCall_6_1_0() { return cExpressionsExpBindOpDefParserRuleCall_6_1_0; }
	}
	public class ExpBindOpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ExpBindOpDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionBindOperationDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDelegateOperationDefCrossReference_1_0 = (CrossReference)cDelegateAssignment_1.eContents().get(0);
		private final RuleCall cDelegateOperationDefIDTerminalRuleCall_1_0_1 = (RuleCall)cDelegateOperationDefCrossReference_1_0.eContents().get(1);
		
		//ExpBindOpDef activitydiagram::Exp:
		//	{iot_lua::ExpressionBindOperationDef} delegate=[idlmm::OperationDef];
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::ExpressionBindOperationDef} delegate=[idlmm::OperationDef]
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::ExpressionBindOperationDef}
		public Action getExpressionBindOperationDefAction_0() { return cExpressionBindOperationDefAction_0; }
		
		//delegate=[idlmm::OperationDef]
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//[idlmm::OperationDef]
		public CrossReference getDelegateOperationDefCrossReference_1_0() { return cDelegateOperationDefCrossReference_1_0; }
		
		//ID
		public RuleCall getDelegateOperationDefIDTerminalRuleCall_1_0_1() { return cDelegateOperationDefIDTerminalRuleCall_1_0_1; }
	}
	public class ExpBindStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ExpBindStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionBindStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateStatementParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//ExpBindStatement activitydiagram::Exp:
		//	{iot_lua::ExpressionBindStatement} delegate=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::ExpressionBindStatement} delegate=Statement
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::ExpressionBindStatement}
		public Action getExpressionBindStatementAction_0() { return cExpressionBindStatementAction_0; }
		
		//delegate=Statement
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//Statement
		public RuleCall getDelegateStatementParserRuleCall_1_0() { return cDelegateStatementParserRuleCall_1_0; }
	}
	public class InitialNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.InitialNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOutgoingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_3_2_0 = (CrossReference)cOutgoingAssignment_3_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cOutgoingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//InitialNode activitydiagram::InitialNode:
		//	{activitydiagram::InitialNode}
		//	'initial'
		//	name=ID ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::InitialNode} 'initial' name=ID ('out' '(' outgoing+=[activitydiagram::ActivityEdge] (","
		//outgoing+=[activitydiagram::ActivityEdge])* ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::InitialNode}
		public Action getInitialNodeAction_0() { return cInitialNodeAction_0; }
		
		//'initial'
		public Keyword getInitialKeyword_1() { return cInitialKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'out'
		public Keyword getOutKeyword_3_0() { return cOutKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_3_2() { return cOutgoingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_3_2_0() { return cOutgoingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_3_3_1() { return cOutgoingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_3_3_1_0() { return cOutgoingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class ActivityFinalNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ActivityFinalNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityFinalNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//ActivityFinalNode activitydiagram::ActivityFinalNode:
		//	{activitydiagram::ActivityFinalNode}
		//	'final'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::ActivityFinalNode} 'final' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::ActivityFinalNode}
		public Action getActivityFinalNodeAction_0() { return cActivityFinalNodeAction_0; }
		
		//'final'
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class ForkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ForkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForkNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cOutgoingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//ForkNode activitydiagram::ForkNode:
		//	{activitydiagram::ForkNode}
		//	'fork'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
		//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::ForkNode} 'fork' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '('
		//outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::ForkNode}
		public Action getForkNodeAction_0() { return cForkNodeAction_0; }
		
		//'fork'
		public Keyword getForkKeyword_1() { return cForkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in' '(' incoming+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_3_1() { return cOutgoingAssignment_4_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_3_1_0() { return cOutgoingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class JoinNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.JoinNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//JoinNode activitydiagram::JoinNode:
		//	{activitydiagram::JoinNode}
		//	'join'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::JoinNode} 'join' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::JoinNode}
		public Action getJoinNodeAction_0() { return cJoinNodeAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'out' '(' outgoing+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class MergeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.MergeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMergeNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMergeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//MergeNode activitydiagram::MergeNode:
		//	{activitydiagram::MergeNode}
		//	'merge'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::MergeNode} 'merge' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::MergeNode}
		public Action getMergeNodeAction_0() { return cMergeNodeAction_0; }
		
		//'merge'
		public Keyword getMergeKeyword_1() { return cMergeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'out' '(' outgoing+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class DecisionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.DecisionNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecisionNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecisionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cOutgoingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//DecisionNode activitydiagram::DecisionNode:
		//	{activitydiagram::DecisionNode}
		//	'decision'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
		//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::DecisionNode} 'decision' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '('
		//outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::DecisionNode}
		public Action getDecisionNodeAction_0() { return cDecisionNodeAction_0; }
		
		//'decision'
		public Keyword getDecisionKeyword_1() { return cDecisionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in' '(' incoming+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_3_1() { return cOutgoingAssignment_4_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_3_1_0() { return cOutgoingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class IntegerVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.IntegerVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerVariableBindStatement_AssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelegateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0 = (RuleCall)cDelegateAssignment_2.eContents().get(0);
		
		//IntegerVariable activitydiagram::IntegerVariable:
		//	{iot_lua::IntegerVariableBindStatement_Assignment}
		//	'int' delegate=Statement_FunctioncallOrAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::IntegerVariableBindStatement_Assignment} 'int' delegate=Statement_FunctioncallOrAssignment
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::IntegerVariableBindStatement_Assignment}
		public Action getIntegerVariableBindStatement_AssignmentAction_0() { return cIntegerVariableBindStatement_AssignmentAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//delegate=Statement_FunctioncallOrAssignment
		public Assignment getDelegateAssignment_2() { return cDelegateAssignment_2; }
		
		//Statement_FunctioncallOrAssignment
		public RuleCall getDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0() { return cDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0; }
	}
	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.BooleanVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanVariableBindStatement_AssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelegateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0 = (RuleCall)cDelegateAssignment_2.eContents().get(0);
		
		//BooleanVariable activitydiagram::BooleanVariable:
		//	{iot_lua::BooleanVariableBindStatement_Assignment}
		//	'bool' delegate=Statement_FunctioncallOrAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_lua::BooleanVariableBindStatement_Assignment} 'bool' delegate=Statement_FunctioncallOrAssignment
		public Group getGroup() { return cGroup; }
		
		//{iot_lua::BooleanVariableBindStatement_Assignment}
		public Action getBooleanVariableBindStatement_AssignmentAction_0() { return cBooleanVariableBindStatement_AssignmentAction_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//delegate=Statement_FunctioncallOrAssignment
		public Assignment getDelegateAssignment_2() { return cDelegateAssignment_2; }
		
		//Statement_FunctioncallOrAssignment
		public RuleCall getDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0() { return cDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue activitydiagram::BooleanValue:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerValue activitydiagram::IntegerValue:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class ControlFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.ControlFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceActivityNodeCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceActivityNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceActivityNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetActivityNodeCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetActivityNodeIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetActivityNodeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cGuardBooleanVariableCrossReference_6_1_0 = (CrossReference)cGuardAssignment_6_1.eContents().get(0);
		private final RuleCall cGuardBooleanVariableIDTerminalRuleCall_6_1_0_1 = (RuleCall)cGuardBooleanVariableCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ControlFlow activitydiagram::ControlFlow:
		//	'flow'
		//	name=ID
		//	'from' source=[activitydiagram::ActivityNode]
		//	'to' target=[activitydiagram::ActivityNode] ('[' guard=[activitydiagram::BooleanVariable] ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'flow' name=ID 'from' source=[activitydiagram::ActivityNode] 'to' target=[activitydiagram::ActivityNode] ('['
		//guard=[activitydiagram::BooleanVariable] ']')?
		public Group getGroup() { return cGroup; }
		
		//'flow'
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//source=[activitydiagram::ActivityNode]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[activitydiagram::ActivityNode]
		public CrossReference getSourceActivityNodeCrossReference_3_0() { return cSourceActivityNodeCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceActivityNodeIDTerminalRuleCall_3_0_1() { return cSourceActivityNodeIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//target=[activitydiagram::ActivityNode]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[activitydiagram::ActivityNode]
		public CrossReference getTargetActivityNodeCrossReference_5_0() { return cTargetActivityNodeCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetActivityNodeIDTerminalRuleCall_5_0_1() { return cTargetActivityNodeIDTerminalRuleCall_5_0_1; }
		
		//('[' guard=[activitydiagram::BooleanVariable] ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//guard=[activitydiagram::BooleanVariable]
		public Assignment getGuardAssignment_6_1() { return cGuardAssignment_6_1; }
		
		//[activitydiagram::BooleanVariable]
		public CrossReference getGuardBooleanVariableCrossReference_6_1_0() { return cGuardBooleanVariableCrossReference_6_1_0; }
		
		//ID
		public RuleCall getGuardBooleanVariableIDTerminalRuleCall_6_1_0_1() { return cGuardBooleanVariableIDTerminalRuleCall_6_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Double ecore::EDouble:
		//	INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	public class BoardTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.BoardType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRaspberryPiEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRaspberryPiRaspberryPiKeyword_0_0 = (Keyword)cRaspberryPiEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cArduinoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cArduinoArduinoKeyword_1_0 = (Keyword)cArduinoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBeagleBoardEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBeagleBoardBeagleBoardKeyword_2_0 = (Keyword)cBeagleBoardEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BoardType returns iot::BoardType:
		//	RaspberryPi | Arduino | BeagleBoard;
		public EnumRule getRule() { return rule; }
		
		//RaspberryPi | Arduino | BeagleBoard
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RaspberryPi
		public EnumLiteralDeclaration getRaspberryPiEnumLiteralDeclaration_0() { return cRaspberryPiEnumLiteralDeclaration_0; }
		
		//'RaspberryPi'
		public Keyword getRaspberryPiRaspberryPiKeyword_0_0() { return cRaspberryPiRaspberryPiKeyword_0_0; }
		
		//Arduino
		public EnumLiteralDeclaration getArduinoEnumLiteralDeclaration_1() { return cArduinoEnumLiteralDeclaration_1; }
		
		//'Arduino'
		public Keyword getArduinoArduinoKeyword_1_0() { return cArduinoArduinoKeyword_1_0; }
		
		//BeagleBoard
		public EnumLiteralDeclaration getBeagleBoardEnumLiteralDeclaration_2() { return cBeagleBoardEnumLiteralDeclaration_2; }
		
		//'BeagleBoard'
		public Keyword getBeagleBoardBeagleBoardKeyword_2_0() { return cBeagleBoardBeagleBoardKeyword_2_0; }
	}
	public class Param_attributeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.param_attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPARAM_INEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPARAM_INInKeyword_0_0 = (Keyword)cPARAM_INEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPARAM_OUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPARAM_OUTOutKeyword_1_0 = (Keyword)cPARAM_OUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPARAM_INOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPARAM_INOUTInoutKeyword_2_0 = (Keyword)cPARAM_INOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum param_attribute returns idlmm::ParameterMode:
		//	PARAM_IN='in'
		//	| PARAM_OUT='out'
		//	| PARAM_INOUT='inout';
		public EnumRule getRule() { return rule; }
		
		//PARAM_IN='in' | PARAM_OUT='out' | PARAM_INOUT='inout'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PARAM_IN='in'
		public EnumLiteralDeclaration getPARAM_INEnumLiteralDeclaration_0() { return cPARAM_INEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getPARAM_INInKeyword_0_0() { return cPARAM_INInKeyword_0_0; }
		
		//PARAM_OUT='out'
		public EnumLiteralDeclaration getPARAM_OUTEnumLiteralDeclaration_1() { return cPARAM_OUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getPARAM_OUTOutKeyword_1_0() { return cPARAM_OUTOutKeyword_1_0; }
		
		//PARAM_INOUT='inout'
		public EnumLiteralDeclaration getPARAM_INOUTEnumLiteralDeclaration_2() { return cPARAM_INOUTEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getPARAM_INOUTInoutKeyword_2_0() { return cPARAM_INOUTInoutKeyword_2_0; }
	}
	public class Float_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.float_type");
		private final EnumLiteralDeclaration cPK_FLOATEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_FLOATFloatKeyword_0 = (Keyword)cPK_FLOATEnumLiteralDeclaration.eContents().get(0);
		
		//enum float_type returns idlmm::PrimitiveKind:
		//	PK_FLOAT='float';
		public EnumRule getRule() { return rule; }
		
		//PK_FLOAT='float'
		public EnumLiteralDeclaration getPK_FLOATEnumLiteralDeclaration() { return cPK_FLOATEnumLiteralDeclaration; }
		
		//'float'
		public Keyword getPK_FLOATFloatKeyword_0() { return cPK_FLOATFloatKeyword_0; }
	}
	public class Double_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.double_type");
		private final EnumLiteralDeclaration cPK_DOUBLEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_DOUBLEDoubleKeyword_0 = (Keyword)cPK_DOUBLEEnumLiteralDeclaration.eContents().get(0);
		
		//enum double_type returns idlmm::PrimitiveKind:
		//	PK_DOUBLE='double';
		public EnumRule getRule() { return rule; }
		
		//PK_DOUBLE='double'
		public EnumLiteralDeclaration getPK_DOUBLEEnumLiteralDeclaration() { return cPK_DOUBLEEnumLiteralDeclaration; }
		
		//'double'
		public Keyword getPK_DOUBLEDoubleKeyword_0() { return cPK_DOUBLEDoubleKeyword_0; }
	}
	public class Short_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.short_type");
		private final EnumLiteralDeclaration cPK_SHORTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_SHORTShortKeyword_0 = (Keyword)cPK_SHORTEnumLiteralDeclaration.eContents().get(0);
		
		//enum short_type returns idlmm::PrimitiveKind:
		//	PK_SHORT='short';
		public EnumRule getRule() { return rule; }
		
		//PK_SHORT='short'
		public EnumLiteralDeclaration getPK_SHORTEnumLiteralDeclaration() { return cPK_SHORTEnumLiteralDeclaration; }
		
		//'short'
		public Keyword getPK_SHORTShortKeyword_0() { return cPK_SHORTShortKeyword_0; }
	}
	public class Long_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.long_type");
		private final EnumLiteralDeclaration cPK_LONGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_LONGLongKeyword_0 = (Keyword)cPK_LONGEnumLiteralDeclaration.eContents().get(0);
		
		//enum long_type returns idlmm::PrimitiveKind:
		//	PK_LONG='long';
		public EnumRule getRule() { return rule; }
		
		//PK_LONG='long'
		public EnumLiteralDeclaration getPK_LONGEnumLiteralDeclaration() { return cPK_LONGEnumLiteralDeclaration; }
		
		//'long'
		public Keyword getPK_LONGLongKeyword_0() { return cPK_LONGLongKeyword_0; }
	}
	public class Char_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.char_type");
		private final EnumLiteralDeclaration cPK_CHAREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_CHARCharKeyword_0 = (Keyword)cPK_CHAREnumLiteralDeclaration.eContents().get(0);
		
		//enum char_type returns idlmm::PrimitiveKind:
		//	PK_CHAR='char';
		public EnumRule getRule() { return rule; }
		
		//PK_CHAR='char'
		public EnumLiteralDeclaration getPK_CHAREnumLiteralDeclaration() { return cPK_CHAREnumLiteralDeclaration; }
		
		//'char'
		public Keyword getPK_CHARCharKeyword_0() { return cPK_CHARCharKeyword_0; }
	}
	public class Wide_char_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.wide_char_type");
		private final EnumLiteralDeclaration cPK_WCHAREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_WCHARWcharKeyword_0 = (Keyword)cPK_WCHAREnumLiteralDeclaration.eContents().get(0);
		
		//enum wide_char_type returns idlmm::PrimitiveKind:
		//	PK_WCHAR='wchar';
		public EnumRule getRule() { return rule; }
		
		//PK_WCHAR='wchar'
		public EnumLiteralDeclaration getPK_WCHAREnumLiteralDeclaration() { return cPK_WCHAREnumLiteralDeclaration; }
		
		//'wchar'
		public Keyword getPK_WCHARWcharKeyword_0() { return cPK_WCHARWcharKeyword_0; }
	}
	public class String_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.string_type");
		private final EnumLiteralDeclaration cPK_STRINGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_STRINGStringKeyword_0 = (Keyword)cPK_STRINGEnumLiteralDeclaration.eContents().get(0);
		
		//enum string_type returns idlmm::PrimitiveKind:
		//	PK_STRING='string';
		public EnumRule getRule() { return rule; }
		
		//PK_STRING='string'
		public EnumLiteralDeclaration getPK_STRINGEnumLiteralDeclaration() { return cPK_STRINGEnumLiteralDeclaration; }
		
		//'string'
		public Keyword getPK_STRINGStringKeyword_0() { return cPK_STRINGStringKeyword_0; }
	}
	public class Wide_string_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.wide_string_type");
		private final EnumLiteralDeclaration cPK_WSTRINGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_WSTRINGWstringKeyword_0 = (Keyword)cPK_WSTRINGEnumLiteralDeclaration.eContents().get(0);
		
		//enum wide_string_type returns idlmm::PrimitiveKind:
		//	PK_WSTRING='wstring';
		public EnumRule getRule() { return rule; }
		
		//PK_WSTRING='wstring'
		public EnumLiteralDeclaration getPK_WSTRINGEnumLiteralDeclaration() { return cPK_WSTRINGEnumLiteralDeclaration; }
		
		//'wstring'
		public Keyword getPK_WSTRINGWstringKeyword_0() { return cPK_WSTRINGWstringKeyword_0; }
	}
	public class Boolean_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.boolean_type");
		private final EnumLiteralDeclaration cPK_BOOLEANEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_BOOLEANBooleanKeyword_0 = (Keyword)cPK_BOOLEANEnumLiteralDeclaration.eContents().get(0);
		
		//enum boolean_type returns idlmm::PrimitiveKind:
		//	PK_BOOLEAN='boolean';
		public EnumRule getRule() { return rule; }
		
		//PK_BOOLEAN='boolean'
		public EnumLiteralDeclaration getPK_BOOLEANEnumLiteralDeclaration() { return cPK_BOOLEANEnumLiteralDeclaration; }
		
		//'boolean'
		public Keyword getPK_BOOLEANBooleanKeyword_0() { return cPK_BOOLEANBooleanKeyword_0; }
	}
	public class Octet_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.octet_type");
		private final EnumLiteralDeclaration cPK_OCTETEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_OCTETOctetKeyword_0 = (Keyword)cPK_OCTETEnumLiteralDeclaration.eContents().get(0);
		
		//enum octet_type returns idlmm::PrimitiveKind:
		//	PK_OCTET='octet';
		public EnumRule getRule() { return rule; }
		
		//PK_OCTET='octet'
		public EnumLiteralDeclaration getPK_OCTETEnumLiteralDeclaration() { return cPK_OCTETEnumLiteralDeclaration; }
		
		//'octet'
		public Keyword getPK_OCTETOctetKeyword_0() { return cPK_OCTETOctetKeyword_0; }
	}
	public class Any_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.any_type");
		private final EnumLiteralDeclaration cPK_ANYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_ANYAnyKeyword_0 = (Keyword)cPK_ANYEnumLiteralDeclaration.eContents().get(0);
		
		//enum any_type returns idlmm::PrimitiveKind:
		//	PK_ANY='any';
		public EnumRule getRule() { return rule; }
		
		//PK_ANY='any'
		public EnumLiteralDeclaration getPK_ANYEnumLiteralDeclaration() { return cPK_ANYEnumLiteralDeclaration; }
		
		//'any'
		public Keyword getPK_ANYAnyKeyword_0() { return cPK_ANYAnyKeyword_0; }
	}
	public class Object_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.object_type");
		private final EnumLiteralDeclaration cPK_OBJREFEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_OBJREFObjectKeyword_0 = (Keyword)cPK_OBJREFEnumLiteralDeclaration.eContents().get(0);
		
		//enum object_type returns idlmm::PrimitiveKind:
		//	PK_OBJREF='Object';
		public EnumRule getRule() { return rule; }
		
		//PK_OBJREF='Object'
		public EnumLiteralDeclaration getPK_OBJREFEnumLiteralDeclaration() { return cPK_OBJREFEnumLiteralDeclaration; }
		
		//'Object'
		public Keyword getPK_OBJREFObjectKeyword_0() { return cPK_OBJREFObjectKeyword_0; }
	}
	public class Void_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.lua.xtext.IotLuaXtext.void_type");
		private final EnumLiteralDeclaration cPK_VOIDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_VOIDVoidKeyword_0 = (Keyword)cPK_VOIDEnumLiteralDeclaration.eContents().get(0);
		
		//enum void_type returns idlmm::PrimitiveKind:
		//	PK_VOID='void';
		public EnumRule getRule() { return rule; }
		
		//PK_VOID='void'
		public EnumLiteralDeclaration getPK_VOIDEnumLiteralDeclaration() { return cPK_VOIDEnumLiteralDeclaration; }
		
		//'void'
		public Keyword getPK_VOIDVoidKeyword_0() { return cPK_VOIDVoidKeyword_0; }
	}
	
	private final SystemElements pSystem;
	private final HWComponentElements pHWComponent;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final BoardElements pBoard;
	private final BoardTypeElements eBoardType;
	private final SketchElements pSketch;
	private final EBooleanElements pEBoolean;
	private final IotOperationDefElements pIotOperationDef;
	private final OperationDefElements pOperationDef;
	private final IdlStmtElements pIdlStmt;
	private final ParameterDefElements pParameterDef;
	private final Param_attributeElements eParam_attribute;
	private final PrimitiveDefElements pPrimitiveDef;
	private final Floating_pt_typeElements pFloating_pt_type;
	private final Float_typeElements eFloat_type;
	private final Double_typeElements eDouble_type;
	private final Longdouble_typeElements pLongdouble_type;
	private final Integer_typeElements pInteger_type;
	private final Short_typeElements eShort_type;
	private final Long_typeElements eLong_type;
	private final Longlong_typeElements pLonglong_type;
	private final Ushort_typeElements pUshort_type;
	private final Ulong_typeElements pUlong_type;
	private final Ulonglong_typeElements pUlonglong_type;
	private final Charstr_typeElements pCharstr_type;
	private final Char_typeElements eChar_type;
	private final Wide_char_typeElements eWide_char_type;
	private final String_typeElements eString_type;
	private final Wide_string_typeElements eWide_string_type;
	private final Other_typeElements pOther_type;
	private final Boolean_typeElements eBoolean_type;
	private final Octet_typeElements eOctet_type;
	private final Any_typeElements eAny_type;
	private final Object_typeElements eObject_type;
	private final Void_typeElements eVoid_type;
	private final ChunkElements pChunk;
	private final BlockElements pBlock;
	private final LastStatementElements pLastStatement;
	private final LastStatement_ReturnElements pLastStatement_Return;
	private final LastStatement_BreakElements pLastStatement_Break;
	private final StatementElements pStatement;
	private final Statement_BlockElements pStatement_Block;
	private final Statement_WhileElements pStatement_While;
	private final Statement_RepeatElements pStatement_Repeat;
	private final Statement_If_Then_ElseElements pStatement_If_Then_Else;
	private final Statement_If_Then_Else_ElseIfPartElements pStatement_If_Then_Else_ElseIfPart;
	private final Statement_For_NumericElements pStatement_For_Numeric;
	private final Statement_For_GenericElements pStatement_For_Generic;
	private final Statement_GlobalFunction_DeclarationElements pStatement_GlobalFunction_Declaration;
	private final Statement_LocalFunction_DeclarationElements pStatement_LocalFunction_Declaration;
	private final Statement_Local_Variable_DeclarationElements pStatement_Local_Variable_Declaration;
	private final Statement_FunctioncallOrAssignmentElements pStatement_FunctioncallOrAssignment;
	private final ExpressionElements pExpression;
	private final Expression_OrElements pExpression_Or;
	private final Expression_AndElements pExpression_And;
	private final Expression_CompareElements pExpression_Compare;
	private final Expression_ConcatenationElements pExpression_Concatenation;
	private final Expression_PlusMinusElements pExpression_PlusMinus;
	private final Expression_MultiplicationDivisionModuloElements pExpression_MultiplicationDivisionModulo;
	private final Expression_UnaryElements pExpression_Unary;
	private final Expression_ExponentiationElements pExpression_Exponentiation;
	private final Expression_TerminalElements pExpression_Terminal;
	private final Expression_NilElements pExpression_Nil;
	private final Expression_TrueElements pExpression_True;
	private final Expression_FalseElements pExpression_False;
	private final Expression_NumberElements pExpression_Number;
	private final Expression_VarArgsElements pExpression_VarArgs;
	private final Expression_StringElements pExpression_String;
	private final Expression_FunctionElements pExpression_Function;
	private final Expression_TableConstructorElements pExpression_TableConstructor;
	private final Expression_FunctioncallElements pExpression_Functioncall;
	private final Expression_AccessMemberOrArrayElementElements pExpression_AccessMemberOrArrayElement;
	private final Expression_VariableNameElements pExpression_VariableName;
	private final FunctionElements pFunction;
	private final Functioncall_ArgumentsElements pFunctioncall_Arguments;
	private final FieldElements pField;
	private final Field_AddEntryToTable_BracketsElements pField_AddEntryToTable_Brackets;
	private final Field_AddEntryToTableElements pField_AddEntryToTable;
	private final Field_AppendEntryToTableElements pField_AppendEntryToTable;
	private final IotActivityElements pIotActivity;
	private final ActivityElements pActivity;
	private final ActivityNodeElements pActivityNode;
	private final ActivityEdgeElements pActivityEdge;
	private final VariableElements pVariable;
	private final ValueElements pValue;
	private final OpaqueActionElements pOpaqueAction;
	private final ExpBindOpDefElements pExpBindOpDef;
	private final ExpBindStatementElements pExpBindStatement;
	private final InitialNodeElements pInitialNode;
	private final ActivityFinalNodeElements pActivityFinalNode;
	private final ForkNodeElements pForkNode;
	private final JoinNodeElements pJoinNode;
	private final MergeNodeElements pMergeNode;
	private final DecisionNodeElements pDecisionNode;
	private final IntegerVariableElements pIntegerVariable;
	private final BooleanVariableElements pBooleanVariable;
	private final BooleanValueElements pBooleanValue;
	private final IntegerValueElements pIntegerValue;
	private final ControlFlowElements pControlFlow;
	private final DoubleElements pDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IotLuaXtextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pHWComponent = new HWComponentElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pBoard = new BoardElements();
		this.eBoardType = new BoardTypeElements();
		this.pSketch = new SketchElements();
		this.pEBoolean = new EBooleanElements();
		this.pIotOperationDef = new IotOperationDefElements();
		this.pOperationDef = new OperationDefElements();
		this.pIdlStmt = new IdlStmtElements();
		this.pParameterDef = new ParameterDefElements();
		this.eParam_attribute = new Param_attributeElements();
		this.pPrimitiveDef = new PrimitiveDefElements();
		this.pFloating_pt_type = new Floating_pt_typeElements();
		this.eFloat_type = new Float_typeElements();
		this.eDouble_type = new Double_typeElements();
		this.pLongdouble_type = new Longdouble_typeElements();
		this.pInteger_type = new Integer_typeElements();
		this.eShort_type = new Short_typeElements();
		this.eLong_type = new Long_typeElements();
		this.pLonglong_type = new Longlong_typeElements();
		this.pUshort_type = new Ushort_typeElements();
		this.pUlong_type = new Ulong_typeElements();
		this.pUlonglong_type = new Ulonglong_typeElements();
		this.pCharstr_type = new Charstr_typeElements();
		this.eChar_type = new Char_typeElements();
		this.eWide_char_type = new Wide_char_typeElements();
		this.eString_type = new String_typeElements();
		this.eWide_string_type = new Wide_string_typeElements();
		this.pOther_type = new Other_typeElements();
		this.eBoolean_type = new Boolean_typeElements();
		this.eOctet_type = new Octet_typeElements();
		this.eAny_type = new Any_typeElements();
		this.eObject_type = new Object_typeElements();
		this.eVoid_type = new Void_typeElements();
		this.pChunk = new ChunkElements();
		this.pBlock = new BlockElements();
		this.pLastStatement = new LastStatementElements();
		this.pLastStatement_Return = new LastStatement_ReturnElements();
		this.pLastStatement_Break = new LastStatement_BreakElements();
		this.pStatement = new StatementElements();
		this.pStatement_Block = new Statement_BlockElements();
		this.pStatement_While = new Statement_WhileElements();
		this.pStatement_Repeat = new Statement_RepeatElements();
		this.pStatement_If_Then_Else = new Statement_If_Then_ElseElements();
		this.pStatement_If_Then_Else_ElseIfPart = new Statement_If_Then_Else_ElseIfPartElements();
		this.pStatement_For_Numeric = new Statement_For_NumericElements();
		this.pStatement_For_Generic = new Statement_For_GenericElements();
		this.pStatement_GlobalFunction_Declaration = new Statement_GlobalFunction_DeclarationElements();
		this.pStatement_LocalFunction_Declaration = new Statement_LocalFunction_DeclarationElements();
		this.pStatement_Local_Variable_Declaration = new Statement_Local_Variable_DeclarationElements();
		this.pStatement_FunctioncallOrAssignment = new Statement_FunctioncallOrAssignmentElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_Or = new Expression_OrElements();
		this.pExpression_And = new Expression_AndElements();
		this.pExpression_Compare = new Expression_CompareElements();
		this.pExpression_Concatenation = new Expression_ConcatenationElements();
		this.pExpression_PlusMinus = new Expression_PlusMinusElements();
		this.pExpression_MultiplicationDivisionModulo = new Expression_MultiplicationDivisionModuloElements();
		this.pExpression_Unary = new Expression_UnaryElements();
		this.pExpression_Exponentiation = new Expression_ExponentiationElements();
		this.pExpression_Terminal = new Expression_TerminalElements();
		this.pExpression_Nil = new Expression_NilElements();
		this.pExpression_True = new Expression_TrueElements();
		this.pExpression_False = new Expression_FalseElements();
		this.pExpression_Number = new Expression_NumberElements();
		this.pExpression_VarArgs = new Expression_VarArgsElements();
		this.pExpression_String = new Expression_StringElements();
		this.pExpression_Function = new Expression_FunctionElements();
		this.pExpression_TableConstructor = new Expression_TableConstructorElements();
		this.pExpression_Functioncall = new Expression_FunctioncallElements();
		this.pExpression_AccessMemberOrArrayElement = new Expression_AccessMemberOrArrayElementElements();
		this.pExpression_VariableName = new Expression_VariableNameElements();
		this.pFunction = new FunctionElements();
		this.pFunctioncall_Arguments = new Functioncall_ArgumentsElements();
		this.pField = new FieldElements();
		this.pField_AddEntryToTable_Brackets = new Field_AddEntryToTable_BracketsElements();
		this.pField_AddEntryToTable = new Field_AddEntryToTableElements();
		this.pField_AppendEntryToTable = new Field_AppendEntryToTableElements();
		this.pIotActivity = new IotActivityElements();
		this.pActivity = new ActivityElements();
		this.pActivityNode = new ActivityNodeElements();
		this.pActivityEdge = new ActivityEdgeElements();
		this.pVariable = new VariableElements();
		this.pValue = new ValueElements();
		this.pOpaqueAction = new OpaqueActionElements();
		this.pExpBindOpDef = new ExpBindOpDefElements();
		this.pExpBindStatement = new ExpBindStatementElements();
		this.pInitialNode = new InitialNodeElements();
		this.pActivityFinalNode = new ActivityFinalNodeElements();
		this.pForkNode = new ForkNodeElements();
		this.pJoinNode = new JoinNodeElements();
		this.pMergeNode = new MergeNodeElements();
		this.pDecisionNode = new DecisionNodeElements();
		this.pIntegerVariable = new IntegerVariableElements();
		this.pBooleanVariable = new BooleanVariableElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pControlFlow = new ControlFlowElements();
		this.pDouble = new DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("iot.lua.xtext.IotLuaXtext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System iot::System:
	//	'system' name=ID '{' (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)?
	//	sketch=Sketch?
	//	'}';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	////Contained returns idlmm::Contained:
	////	OperationDef;
	//HWComponent iot::HWComp:
	//	Sensor | Actuator;
	public HWComponentElements getHWComponentAccess() {
		return pHWComponent;
	}
	
	public ParserRule getHWComponentRule() {
		return getHWComponentAccess().getRule();
	}
	
	//Sensor iot::Sensor:
	//	'sensor' name=ID ('{' ('provides' services+=IotOperationDef)*
	//	'}')?;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator iot::Actuator:
	//	'actuator' name=ID ('{' ('provides' services+=IotOperationDef)*
	//	'}')?;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Board iot::Board:
	//	{iot::Board}
	//	'board' name=ID '[' type=BoardType ']' ('{' ('provides' components+=[iot::HWComp])*
	//	'}')?;
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//enum BoardType returns iot::BoardType:
	//	RaspberryPi | Arduino | BeagleBoard;
	public BoardTypeElements getBoardTypeAccess() {
		return eBoardType;
	}
	
	public EnumRule getBoardTypeRule() {
		return getBoardTypeAccess().getRule();
	}
	
	//Sketch iot::Sketch:
	//	{iot::Sketch}
	//	'sketch'
	//	'{'
	//	activity=IotActivity
	//	'}';
	public SketchElements getSketchAccess() {
		return pSketch;
	}
	
	public ParserRule getSketchRule() {
		return getSketchAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//IotOperationDef iot::IotOperationDef:
	//	{iot_lua::IotOperationDefBindOperationDef} delegate=OperationDef;
	public IotOperationDefElements getIotOperationDefAccess() {
		return pIotOperationDef;
	}
	
	public ParserRule getIotOperationDefRule() {
		return getIotOperationDefAccess().getRule();
	}
	
	//OperationDef idlmm::OperationDef:
	//	'operation'
	//	identifier=ID
	//	'(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')'
	//	'{'
	//	stmt=IdlStmt
	//	'}';
	public OperationDefElements getOperationDefAccess() {
		return pOperationDef;
	}
	
	public ParserRule getOperationDefRule() {
		return getOperationDefAccess().getRule();
	}
	
	//IdlStmt idlmm::IdlStmt:
	//	{iot_lua::IdlStmtBindBlock} delegate=Block;
	public IdlStmtElements getIdlStmtAccess() {
		return pIdlStmt;
	}
	
	public ParserRule getIdlStmtRule() {
		return getIdlStmtAccess().getRule();
	}
	
	//ParameterDef idlmm::ParameterDef:
	//	direction=param_attribute //(containedType=PrimitiveDef)
	//	identifier=ID;
	public ParameterDefElements getParameterDefAccess() {
		return pParameterDef;
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}
	
	//enum param_attribute returns idlmm::ParameterMode:
	//	PARAM_IN='in'
	//	| PARAM_OUT='out'
	//	| PARAM_INOUT='inout';
	public Param_attributeElements getParam_attributeAccess() {
		return eParam_attribute;
	}
	
	public EnumRule getParam_attributeRule() {
		return getParam_attributeAccess().getRule();
	}
	
	//PrimitiveDef idlmm::PrimitiveDef:
	//	integer_type
	//	| floating_pt_type
	//	| charstr_type
	//	| other_type;
	public PrimitiveDefElements getPrimitiveDefAccess() {
		return pPrimitiveDef;
	}
	
	public ParserRule getPrimitiveDefRule() {
		return getPrimitiveDefAccess().getRule();
	}
	
	////---------------------------
	//// BASE TYPES
	////---------------------------
	//floating_pt_type idlmm::PrimitiveDef:
	//	kind=float_type
	//	| kind=double_type
	//	| kind=longdouble_type;
	public Floating_pt_typeElements getFloating_pt_typeAccess() {
		return pFloating_pt_type;
	}
	
	public ParserRule getFloating_pt_typeRule() {
		return getFloating_pt_typeAccess().getRule();
	}
	
	//enum float_type returns idlmm::PrimitiveKind:
	//	PK_FLOAT='float';
	public Float_typeElements getFloat_typeAccess() {
		return eFloat_type;
	}
	
	public EnumRule getFloat_typeRule() {
		return getFloat_typeAccess().getRule();
	}
	
	//enum double_type returns idlmm::PrimitiveKind:
	//	PK_DOUBLE='double';
	public Double_typeElements getDouble_typeAccess() {
		return eDouble_type;
	}
	
	public EnumRule getDouble_typeRule() {
		return getDouble_typeAccess().getRule();
	}
	
	//longdouble_type idlmm::PrimitiveKind:
	//	'long' 'double';
	public Longdouble_typeElements getLongdouble_typeAccess() {
		return pLongdouble_type;
	}
	
	public ParserRule getLongdouble_typeRule() {
		return getLongdouble_typeAccess().getRule();
	}
	
	//integer_type idlmm::PrimitiveDef:
	//	kind=short_type
	//	| kind=long_type
	//	| kind=longlong_type
	//	| kind=ushort_type
	//	| kind=ulong_type
	//	| kind=ulonglong_type;
	public Integer_typeElements getInteger_typeAccess() {
		return pInteger_type;
	}
	
	public ParserRule getInteger_typeRule() {
		return getInteger_typeAccess().getRule();
	}
	
	//enum short_type returns idlmm::PrimitiveKind:
	//	PK_SHORT='short';
	public Short_typeElements getShort_typeAccess() {
		return eShort_type;
	}
	
	public EnumRule getShort_typeRule() {
		return getShort_typeAccess().getRule();
	}
	
	//enum long_type returns idlmm::PrimitiveKind:
	//	PK_LONG='long';
	public Long_typeElements getLong_typeAccess() {
		return eLong_type;
	}
	
	public EnumRule getLong_typeRule() {
		return getLong_typeAccess().getRule();
	}
	
	//longlong_type idlmm::PrimitiveKind:
	//	'long' 'long';
	public Longlong_typeElements getLonglong_typeAccess() {
		return pLonglong_type;
	}
	
	public ParserRule getLonglong_typeRule() {
		return getLonglong_typeAccess().getRule();
	}
	
	//ushort_type idlmm::PrimitiveKind:
	//	'unsigned' 'short';
	public Ushort_typeElements getUshort_typeAccess() {
		return pUshort_type;
	}
	
	public ParserRule getUshort_typeRule() {
		return getUshort_typeAccess().getRule();
	}
	
	//ulong_type idlmm::PrimitiveKind:
	//	'unsigned' 'long';
	public Ulong_typeElements getUlong_typeAccess() {
		return pUlong_type;
	}
	
	public ParserRule getUlong_typeRule() {
		return getUlong_typeAccess().getRule();
	}
	
	//ulonglong_type idlmm::PrimitiveKind:
	//	'unsigned' 'long' 'long';
	public Ulonglong_typeElements getUlonglong_typeAccess() {
		return pUlonglong_type;
	}
	
	public ParserRule getUlonglong_typeRule() {
		return getUlonglong_typeAccess().getRule();
	}
	
	//charstr_type idlmm::PrimitiveDef:
	//	kind=char_type
	//	| kind=wide_char_type
	//	| kind=string_type
	//	| kind=wide_string_type;
	public Charstr_typeElements getCharstr_typeAccess() {
		return pCharstr_type;
	}
	
	public ParserRule getCharstr_typeRule() {
		return getCharstr_typeAccess().getRule();
	}
	
	//enum char_type returns idlmm::PrimitiveKind:
	//	PK_CHAR='char';
	public Char_typeElements getChar_typeAccess() {
		return eChar_type;
	}
	
	public EnumRule getChar_typeRule() {
		return getChar_typeAccess().getRule();
	}
	
	//enum wide_char_type returns idlmm::PrimitiveKind:
	//	PK_WCHAR='wchar';
	public Wide_char_typeElements getWide_char_typeAccess() {
		return eWide_char_type;
	}
	
	public EnumRule getWide_char_typeRule() {
		return getWide_char_typeAccess().getRule();
	}
	
	//enum string_type returns idlmm::PrimitiveKind:
	//	PK_STRING='string';
	public String_typeElements getString_typeAccess() {
		return eString_type;
	}
	
	public EnumRule getString_typeRule() {
		return getString_typeAccess().getRule();
	}
	
	//enum wide_string_type returns idlmm::PrimitiveKind:
	//	PK_WSTRING='wstring';
	public Wide_string_typeElements getWide_string_typeAccess() {
		return eWide_string_type;
	}
	
	public EnumRule getWide_string_typeRule() {
		return getWide_string_typeAccess().getRule();
	}
	
	//other_type idlmm::PrimitiveDef:
	//	kind=boolean_type
	//	| kind=octet_type
	//	| kind=any_type;
	public Other_typeElements getOther_typeAccess() {
		return pOther_type;
	}
	
	public ParserRule getOther_typeRule() {
		return getOther_typeAccess().getRule();
	}
	
	//enum boolean_type returns idlmm::PrimitiveKind:
	//	PK_BOOLEAN='boolean';
	public Boolean_typeElements getBoolean_typeAccess() {
		return eBoolean_type;
	}
	
	public EnumRule getBoolean_typeRule() {
		return getBoolean_typeAccess().getRule();
	}
	
	//enum octet_type returns idlmm::PrimitiveKind:
	//	PK_OCTET='octet';
	public Octet_typeElements getOctet_typeAccess() {
		return eOctet_type;
	}
	
	public EnumRule getOctet_typeRule() {
		return getOctet_typeAccess().getRule();
	}
	
	//enum any_type returns idlmm::PrimitiveKind:
	//	PK_ANY='any';
	public Any_typeElements getAny_typeAccess() {
		return eAny_type;
	}
	
	public EnumRule getAny_typeRule() {
		return getAny_typeAccess().getRule();
	}
	
	//enum object_type returns idlmm::PrimitiveKind:
	//	PK_OBJREF='Object';
	public Object_typeElements getObject_typeAccess() {
		return eObject_type;
	}
	
	public EnumRule getObject_typeRule() {
		return getObject_typeAccess().getRule();
	}
	
	//enum void_type returns idlmm::PrimitiveKind:
	//	PK_VOID='void';
	public Void_typeElements getVoid_typeAccess() {
		return eVoid_type;
	}
	
	public EnumRule getVoid_typeRule() {
		return getVoid_typeAccess().getRule();
	}
	
	//Chunk lua::Block:
	//	Block;
	public ChunkElements getChunkAccess() {
		return pChunk;
	}
	
	public ParserRule getChunkRule() {
		return getChunkAccess().getRule();
	}
	
	//Block lua::Block:
	//	{lua::Block} (statements+=Statement ';'?)* (returnValue=LastStatement ';'?)?;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//// ****************************************************
	//// LAST STATEMENT
	//// ****************************************************
	//LastStatement lua::LastStatement:
	//	LastStatement_Return | LastStatement_Break;
	public LastStatementElements getLastStatementAccess() {
		return pLastStatement;
	}
	
	public ParserRule getLastStatementRule() {
		return getLastStatementAccess().getRule();
	}
	
	//// The return statement is used to return values from a function or a chunk
	//LastStatement_Return lua::LastStatement_Return:
	//	'return' {lua::LastStatement_ReturnWithValue} (returnValues+=Expression (',' returnValues+=Expression)*)?;
	public LastStatement_ReturnElements getLastStatement_ReturnAccess() {
		return pLastStatement_Return;
	}
	
	public ParserRule getLastStatement_ReturnRule() {
		return getLastStatement_ReturnAccess().getRule();
	}
	
	//// The break statement is used to terminate the execution of a while, repeat, or for loop, skipping to the next statement after the loop
	//LastStatement_Break lua::LastStatement_Break:
	//	'break' {lua::LastStatement_Break};
	public LastStatement_BreakElements getLastStatement_BreakAccess() {
		return pLastStatement_Break;
	}
	
	public ParserRule getLastStatement_BreakRule() {
		return getLastStatement_BreakAccess().getRule();
	}
	
	//// ****************************************************
	//// STATEMENT
	//// ****************************************************
	//Statement lua::Statement:
	//	Statement_Block | Statement_While | Statement_Repeat | Statement_If_Then_Else | Statement_For_Numeric |
	//	Statement_For_Generic | Statement_GlobalFunction_Declaration | Statement_LocalFunction_Declaration |
	//	Statement_Local_Variable_Declaration | Statement_FunctioncallOrAssignment;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//// A block can be explicitly delimited to produce a single statement. "do ... end"
	//Statement_Block lua::Statement_Block:
	//	'do' block=Block 'end';
	public Statement_BlockElements getStatement_BlockAccess() {
		return pStatement_Block;
	}
	
	public ParserRule getStatement_BlockRule() {
		return getStatement_BlockAccess().getRule();
	}
	
	//// Control structure. "while ... do ... end"
	//Statement_While lua::Statement_While:
	//	'while' expression=Expression 'do' block=Block 'end';
	public Statement_WhileElements getStatement_WhileAccess() {
		return pStatement_While;
	}
	
	public ParserRule getStatement_WhileRule() {
		return getStatement_WhileAccess().getRule();
	}
	
	//// Control structure. "repeat ... until ..."
	//Statement_Repeat lua::Statement_Repeat:
	//	'repeat' block=Block 'until' expression=Expression;
	public Statement_RepeatElements getStatement_RepeatAccess() {
		return pStatement_Repeat;
	}
	
	public ParserRule getStatement_RepeatRule() {
		return getStatement_RepeatAccess().getRule();
	}
	
	//// Control structure. "if ... then ... elseif ... elseif ... else ... end"
	//Statement_If_Then_Else lua::Statement_If_Then_Else:
	//	'if' ifExpression=Expression 'then' ifBlock=Block elseIf+=Statement_If_Then_Else_ElseIfPart* ('else' elseBlock=Block)?
	//	'end';
	public Statement_If_Then_ElseElements getStatement_If_Then_ElseAccess() {
		return pStatement_If_Then_Else;
	}
	
	public ParserRule getStatement_If_Then_ElseRule() {
		return getStatement_If_Then_ElseAccess().getRule();
	}
	
	//Statement_If_Then_Else_ElseIfPart lua::Statement_If_Then_Else_ElseIfPart:
	//	'elseif' elseifExpression=Expression 'then' elseifBlock=Block;
	public Statement_If_Then_Else_ElseIfPartElements getStatement_If_Then_Else_ElseIfPartAccess() {
		return pStatement_If_Then_Else_ElseIfPart;
	}
	
	public ParserRule getStatement_If_Then_Else_ElseIfPartRule() {
		return getStatement_If_Then_Else_ElseIfPartAccess().getRule();
	}
	
	//// The numeric for loop repeats a block of code while a control variable runs through an arithmetic progression "for ...=..., ... [,...] do ... end"
	//Statement_For_Numeric lua::Statement_For_Numeric:
	//	'for' iteratorName=ID '=' startExpr=Expression "," untilExpr=Expression ("," stepExpr=Expression)? 'do' block=Block
	//	'end';
	public Statement_For_NumericElements getStatement_For_NumericAccess() {
		return pStatement_For_Numeric;
	}
	
	public ParserRule getStatement_For_NumericRule() {
		return getStatement_For_NumericAccess().getRule();
	}
	
	//// The generic for statement works over functions, called iterators. On each iteration, the iterator function is called to produce a new value, stopping when this new value is nil "for ... in ... do ... end"
	//Statement_For_Generic lua::Statement_For_Generic:
	//	'for' names+=ID (',' names+=ID)* 'in' expressions+=Expression (',' expressions+=Expression)* 'do' block=Block 'end';
	public Statement_For_GenericElements getStatement_For_GenericAccess() {
		return pStatement_For_Generic;
	}
	
	public ParserRule getStatement_For_GenericRule() {
		return getStatement_For_GenericAccess().getRule();
	}
	
	//Statement_GlobalFunction_Declaration lua::Statement_GlobalFunction_Declaration:
	//	'function' prefix+=ID ('.' prefix+=ID)* (':' functionName=ID)? function=Function 'end';
	public Statement_GlobalFunction_DeclarationElements getStatement_GlobalFunction_DeclarationAccess() {
		return pStatement_GlobalFunction_Declaration;
	}
	
	public ParserRule getStatement_GlobalFunction_DeclarationRule() {
		return getStatement_GlobalFunction_DeclarationAccess().getRule();
	}
	
	//Statement_LocalFunction_Declaration lua::Statement_LocalFunction_Declaration:
	//	'local' 'function' functionName=ID function=Function 'end';
	public Statement_LocalFunction_DeclarationElements getStatement_LocalFunction_DeclarationAccess() {
		return pStatement_LocalFunction_Declaration;
	}
	
	public ParserRule getStatement_LocalFunction_DeclarationRule() {
		return getStatement_LocalFunction_DeclarationAccess().getRule();
	}
	
	//// Local variables can be declared anywhere inside a block. The declaration can include an initial assignment "local ... [= ...]"
	//Statement_Local_Variable_Declaration lua::Statement_Local_Variable_Declaration:
	//	'local' variableNames+=ID (',' variableNames+=ID)* ('=' initialValue+=Expression (',' initialValue+=Expression)*)?;
	public Statement_Local_Variable_DeclarationElements getStatement_Local_Variable_DeclarationAccess() {
		return pStatement_Local_Variable_Declaration;
	}
	
	public ParserRule getStatement_Local_Variable_DeclarationRule() {
		return getStatement_Local_Variable_DeclarationAccess().getRule();
	}
	
	//Statement_FunctioncallOrAssignment lua::Statement_FunctioncallOrAssignment:
	//	Expression_AccessMemberOrArrayElement ({lua::Statement_Assignment.variable+=current} (=> ','
	//	variable+=Expression_AccessMemberOrArrayElement)* '='
	//	values+=Expression (',' values+=Expression)* | ':' {lua::Statement_CallMemberFunction.object=current}
	//	memberFunctionName=ID arguments=Functioncall_Arguments | {lua::Statement_CallFunction.object=current}
	//	arguments=Functioncall_Arguments);
	public Statement_FunctioncallOrAssignmentElements getStatement_FunctioncallOrAssignmentAccess() {
		return pStatement_FunctioncallOrAssignment;
	}
	
	public ParserRule getStatement_FunctioncallOrAssignmentRule() {
		return getStatement_FunctioncallOrAssignmentAccess().getRule();
	}
	
	//// ****************************************************
	//// EXPRESSIONS
	//// ****************************************************
	//// Delegate to the priority chain of operators by calling the rule for the lowest priority operator
	//Expression lua::Expression:
	//	Expression_Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//// Or: left associative, priority 0
	//Expression_Or lua::Expression:
	//	Expression_And ('or' {lua::Expression_Or.left=current} right=Expression_And)*;
	public Expression_OrElements getExpression_OrAccess() {
		return pExpression_Or;
	}
	
	public ParserRule getExpression_OrRule() {
		return getExpression_OrAccess().getRule();
	}
	
	//// And: left associative, priority 1
	//Expression_And lua::Expression:
	//	Expression_Compare ('and' {lua::Expression_And.left=current} right=Expression_Compare)*;
	public Expression_AndElements getExpression_AndAccess() {
		return pExpression_And;
	}
	
	public ParserRule getExpression_AndRule() {
		return getExpression_AndAccess().getRule();
	}
	
	//// Comparisons: left associative, priority 2
	//Expression_Compare lua::Expression:
	//	Expression_Concatenation ('>' {lua::Expression_Larger.left=current} right=Expression_Concatenation | '>='
	//	{lua::Expression_Larger_Equal.left=current} right=Expression_Concatenation | '<'
	//	{lua::Expression_Smaller.left=current} right=Expression_Concatenation | '<='
	//	{lua::Expression_Smaller_Equal.left=current} right=Expression_Concatenation | '=='
	//	{lua::Expression_Equal.left=current} right=Expression_Concatenation | '~=' {lua::Expression_Not_Equal.left=current}
	//	right=Expression_Concatenation)*;
	public Expression_CompareElements getExpression_CompareAccess() {
		return pExpression_Compare;
	}
	
	public ParserRule getExpression_CompareRule() {
		return getExpression_CompareAccess().getRule();
	}
	
	//// Concatenation: right associative, priority 3
	//Expression_Concatenation lua::Expression:
	//	Expression_PlusMinus ('..' {lua::Expression_Concatenation.left=current} right=Expression_Concatenation)?;
	public Expression_ConcatenationElements getExpression_ConcatenationAccess() {
		return pExpression_Concatenation;
	}
	
	public ParserRule getExpression_ConcatenationRule() {
		return getExpression_ConcatenationAccess().getRule();
	}
	
	//// addition/subtraction: left associative, priority 4
	//Expression_PlusMinus lua::Expression:
	//	Expression_MultiplicationDivisionModulo ('+' {lua::Expression_Plus.left=current}
	//	right=Expression_MultiplicationDivisionModulo | '-' {lua::Expression_Minus.left=current}
	//	right=Expression_MultiplicationDivisionModulo)*;
	public Expression_PlusMinusElements getExpression_PlusMinusAccess() {
		return pExpression_PlusMinus;
	}
	
	public ParserRule getExpression_PlusMinusRule() {
		return getExpression_PlusMinusAccess().getRule();
	}
	
	//// multiplication/division, left associative, priority 5
	//Expression_MultiplicationDivisionModulo lua::Expression:
	//	Expression_Unary ('*' {lua::Expression_Multiplication.left=current} right=Expression_Unary | '/'
	//	{lua::Expression_Division.left=current} right=Expression_Unary | '%' {lua::Expression_Modulo.left=current}
	//	right=Expression_Unary)*;
	public Expression_MultiplicationDivisionModuloElements getExpression_MultiplicationDivisionModuloAccess() {
		return pExpression_MultiplicationDivisionModulo;
	}
	
	public ParserRule getExpression_MultiplicationDivisionModuloRule() {
		return getExpression_MultiplicationDivisionModuloAccess().getRule();
	}
	
	//// Unary operators: right associative, priority 6
	//Expression_Unary lua::Expression:
	//	Expression_Exponentiation | 'not' {lua::Expression_Negate} exp=Expression_Unary | '#' {lua::Expression_Length}
	//	exp=Expression_Unary | '-' {lua::Expression_Invert} exp=Expression_Unary;
	public Expression_UnaryElements getExpression_UnaryAccess() {
		return pExpression_Unary;
	}
	
	public ParserRule getExpression_UnaryRule() {
		return getExpression_UnaryAccess().getRule();
	}
	
	//// exponentiation: right associative, priority 7
	//Expression_Exponentiation lua::Expression:
	//	Expression_Terminal ('^' {lua::Expression_Exponentiation.left=current} right=Expression_Exponentiation)?;
	public Expression_ExponentiationElements getExpression_ExponentiationAccess() {
		return pExpression_Exponentiation;
	}
	
	public ParserRule getExpression_ExponentiationRule() {
		return getExpression_ExponentiationAccess().getRule();
	}
	
	//Expression_Terminal lua::Expression:
	//	Expression_Nil | Expression_True | Expression_False | Expression_Number | Expression_VarArgs | Expression_String |
	//	Expression_Function | Expression_TableConstructor | Expression_Functioncall;
	public Expression_TerminalElements getExpression_TerminalAccess() {
		return pExpression_Terminal;
	}
	
	public ParserRule getExpression_TerminalRule() {
		return getExpression_TerminalAccess().getRule();
	}
	
	//Expression_Nil lua::Expression_Nil:
	//	'nil' {lua::Expression_Nil};
	public Expression_NilElements getExpression_NilAccess() {
		return pExpression_Nil;
	}
	
	public ParserRule getExpression_NilRule() {
		return getExpression_NilAccess().getRule();
	}
	
	//Expression_True lua::Expression_True:
	//	'true' {lua::Expression_True};
	public Expression_TrueElements getExpression_TrueAccess() {
		return pExpression_True;
	}
	
	public ParserRule getExpression_TrueRule() {
		return getExpression_TrueAccess().getRule();
	}
	
	//Expression_False lua::Expression_False:
	//	'false' {lua::Expression_False};
	public Expression_FalseElements getExpression_FalseAccess() {
		return pExpression_False;
	}
	
	public ParserRule getExpression_FalseRule() {
		return getExpression_FalseAccess().getRule();
	}
	
	//Expression_Number lua::Expression_Number:
	//	value=Double;
	public Expression_NumberElements getExpression_NumberAccess() {
		return pExpression_Number;
	}
	
	public ParserRule getExpression_NumberRule() {
		return getExpression_NumberAccess().getRule();
	}
	
	//Expression_VarArgs lua::Expression_VarArgs:
	//	'...' {lua::Expression_VarArgs};
	public Expression_VarArgsElements getExpression_VarArgsAccess() {
		return pExpression_VarArgs;
	}
	
	public ParserRule getExpression_VarArgsRule() {
		return getExpression_VarArgsAccess().getRule();
	}
	
	//Expression_String lua::Expression_String:
	//	value=STRING;
	public Expression_StringElements getExpression_StringAccess() {
		return pExpression_String;
	}
	
	public ParserRule getExpression_StringRule() {
		return getExpression_StringAccess().getRule();
	}
	
	//Expression_Function lua::Expression_Function:
	//	'function' function=Function 'end';
	public Expression_FunctionElements getExpression_FunctionAccess() {
		return pExpression_Function;
	}
	
	public ParserRule getExpression_FunctionRule() {
		return getExpression_FunctionAccess().getRule();
	}
	
	//Expression_TableConstructor lua::Expression_TableConstructor:
	//	'{' {lua::Expression_TableConstructor} (fields+=Field ((',' | ';') fields+=Field)* (',' | ';')?)? '}';
	public Expression_TableConstructorElements getExpression_TableConstructorAccess() {
		return pExpression_TableConstructor;
	}
	
	public ParserRule getExpression_TableConstructorRule() {
		return getExpression_TableConstructorAccess().getRule();
	}
	
	//// Function calls, left associative, single call only, priority 9
	//Expression_Functioncall lua::Expression:
	//	Expression_AccessMemberOrArrayElement (=> ':' {lua::Expression_CallMemberFunction.object=current}
	//	memberFunctionName=ID arguments=Functioncall_Arguments | {lua::Expression_CallFunction.object=current}
	//	arguments=Functioncall_Arguments)?;
	public Expression_FunctioncallElements getExpression_FunctioncallAccess() {
		return pExpression_Functioncall;
	}
	
	public ParserRule getExpression_FunctioncallRule() {
		return getExpression_FunctioncallAccess().getRule();
	}
	
	//// Access a member or array element, left associative, chaining possible, priority 10
	//Expression_AccessMemberOrArrayElement lua::Expression:
	//	Expression_VariableName ('[' {lua::Expression_AccessArray.array=current} index=Expression ']' | '.'
	//	{lua::Expression_AccessMember.object=current} memberName=ID)*;
	public Expression_AccessMemberOrArrayElementElements getExpression_AccessMemberOrArrayElementAccess() {
		return pExpression_AccessMemberOrArrayElement;
	}
	
	public ParserRule getExpression_AccessMemberOrArrayElementRule() {
		return getExpression_AccessMemberOrArrayElementAccess().getRule();
	}
	
	//// access a variable, terminal expression, priority 11
	//// Delegate to top of expression rule chain for bracketed expressions
	//Expression_VariableName lua::Expression:
	//	'(' Expression ')' | {lua::Expression_VariableName} variable=ID;
	public Expression_VariableNameElements getExpression_VariableNameAccess() {
		return pExpression_VariableName;
	}
	
	public ParserRule getExpression_VariableNameRule() {
		return getExpression_VariableNameAccess().getRule();
	}
	
	//// ****************************************************
	//// FUNCTIONS
	//// ****************************************************
	//Function lua::Function:
	//	'(' (parameters+=ID (',' parameters+=ID)* ','?)? varArgs?='...'? ')' body=Block;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//// Some syntactic sugar: strings and field can be passed as parameters without bracket
	//Functioncall_Arguments lua::Functioncall_Arguments:
	//	{lua::Functioncall_Arguments} ('(' (arguments+=Expression (',' arguments+=Expression)*)? ')' |
	//	arguments+=Expression_TableConstructor | arguments+=Expression_String);
	public Functioncall_ArgumentsElements getFunctioncall_ArgumentsAccess() {
		return pFunctioncall_Arguments;
	}
	
	public ParserRule getFunctioncall_ArgumentsRule() {
		return getFunctioncall_ArgumentsAccess().getRule();
	}
	
	//// ****************************************************
	//// TABLES/FIELDS
	//// ****************************************************
	//Field lua::Field:
	//	Field_AddEntryToTable_Brackets | Field_AddEntryToTable | Field_AppendEntryToTable;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//// Each field of the form "[exp1] = exp2" adds to the new table an entry with key exp1 and value exp2
	//Field_AddEntryToTable_Brackets lua::Field_AddEntryToTable_Brackets:
	//	'[' indexExpression=Expression ']' '=' value=Expression;
	public Field_AddEntryToTable_BracketsElements getField_AddEntryToTable_BracketsAccess() {
		return pField_AddEntryToTable_Brackets;
	}
	
	public ParserRule getField_AddEntryToTable_BracketsRule() {
		return getField_AddEntryToTable_BracketsAccess().getRule();
	}
	
	//// A field of the form "name = exp" is equivalent to ["name"] = exp
	//Field_AddEntryToTable lua::Field_AddEntryToTable:
	//	key=ID '=' value=Expression;
	public Field_AddEntryToTableElements getField_AddEntryToTableAccess() {
		return pField_AddEntryToTable;
	}
	
	public ParserRule getField_AddEntryToTableRule() {
		return getField_AddEntryToTableAccess().getRule();
	}
	
	//// fields of the form "exp" are equivalent to [i] = exp
	//Field_AppendEntryToTable lua::Field_AppendEntryToTable:
	//	value=Expression;
	public Field_AppendEntryToTableElements getField_AppendEntryToTableAccess() {
		return pField_AppendEntryToTable;
	}
	
	public ParserRule getField_AppendEntryToTableRule() {
		return getField_AppendEntryToTableAccess().getRule();
	}
	
	//// ****************************************************
	//// TERMINALS
	//// ****************************************************
	//// Identifiers can be any string of letters, digits, and underscores, but mustn't begin with a digit.
	//IotActivity iot::IotActivity:
	//	{iot_lua::IotActivityBindActivity} delegate=Activity;
	public IotActivityElements getIotActivityAccess() {
		return pIotActivity;
	}
	
	public ParserRule getIotActivityRule() {
		return getIotActivityAccess().getRule();
	}
	
	//Activity activitydiagram::Activity:
	//	{activitydiagram::Activity}
	//	'activity'
	//	name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')?
	//	'{' (locals+=Variable ("," locals+=Variable)*)? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
	//	('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
	//	'}';
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}
	
	//ActivityNode activitydiagram::ActivityNode:
	//	OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;
	public ActivityNodeElements getActivityNodeAccess() {
		return pActivityNode;
	}
	
	public ParserRule getActivityNodeRule() {
		return getActivityNodeAccess().getRule();
	}
	
	//ActivityEdge activitydiagram::ActivityEdge:
	//	ControlFlow;
	public ActivityEdgeElements getActivityEdgeAccess() {
		return pActivityEdge;
	}
	
	public ParserRule getActivityEdgeRule() {
		return getActivityEdgeAccess().getRule();
	}
	
	//Variable activitydiagram::Variable:
	//	IntegerVariable | BooleanVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Value activitydiagram::Value:
	//	BooleanValue | IntegerValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//OpaqueAction activitydiagram::OpaqueAction:
	//	{activitydiagram::OpaqueAction}
	//	'action'
	//	name=ID ('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')? ('in' '('
	//	incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '('
	//	outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')? ('service'
	//	expressions+=ExpBindOpDef)?;
	public OpaqueActionElements getOpaqueActionAccess() {
		return pOpaqueAction;
	}
	
	public ParserRule getOpaqueActionRule() {
		return getOpaqueActionAccess().getRule();
	}
	
	//ExpBindOpDef activitydiagram::Exp:
	//	{iot_lua::ExpressionBindOperationDef} delegate=[idlmm::OperationDef];
	public ExpBindOpDefElements getExpBindOpDefAccess() {
		return pExpBindOpDef;
	}
	
	public ParserRule getExpBindOpDefRule() {
		return getExpBindOpDefAccess().getRule();
	}
	
	//ExpBindStatement activitydiagram::Exp:
	//	{iot_lua::ExpressionBindStatement} delegate=Statement;
	public ExpBindStatementElements getExpBindStatementAccess() {
		return pExpBindStatement;
	}
	
	public ParserRule getExpBindStatementRule() {
		return getExpBindStatementAccess().getRule();
	}
	
	//InitialNode activitydiagram::InitialNode:
	//	{activitydiagram::InitialNode}
	//	'initial'
	//	name=ID ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')');
	public InitialNodeElements getInitialNodeAccess() {
		return pInitialNode;
	}
	
	public ParserRule getInitialNodeRule() {
		return getInitialNodeAccess().getRule();
	}
	
	//ActivityFinalNode activitydiagram::ActivityFinalNode:
	//	{activitydiagram::ActivityFinalNode}
	//	'final'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')');
	public ActivityFinalNodeElements getActivityFinalNodeAccess() {
		return pActivityFinalNode;
	}
	
	public ParserRule getActivityFinalNodeRule() {
		return getActivityFinalNodeAccess().getRule();
	}
	
	//ForkNode activitydiagram::ForkNode:
	//	{activitydiagram::ForkNode}
	//	'fork'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
	//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
	public ForkNodeElements getForkNodeAccess() {
		return pForkNode;
	}
	
	public ParserRule getForkNodeRule() {
		return getForkNodeAccess().getRule();
	}
	
	//JoinNode activitydiagram::JoinNode:
	//	{activitydiagram::JoinNode}
	//	'join'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
	public JoinNodeElements getJoinNodeAccess() {
		return pJoinNode;
	}
	
	public ParserRule getJoinNodeRule() {
		return getJoinNodeAccess().getRule();
	}
	
	//MergeNode activitydiagram::MergeNode:
	//	{activitydiagram::MergeNode}
	//	'merge'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
	public MergeNodeElements getMergeNodeAccess() {
		return pMergeNode;
	}
	
	public ParserRule getMergeNodeRule() {
		return getMergeNodeAccess().getRule();
	}
	
	//DecisionNode activitydiagram::DecisionNode:
	//	{activitydiagram::DecisionNode}
	//	'decision'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
	//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
	public DecisionNodeElements getDecisionNodeAccess() {
		return pDecisionNode;
	}
	
	public ParserRule getDecisionNodeRule() {
		return getDecisionNodeAccess().getRule();
	}
	
	//IntegerVariable activitydiagram::IntegerVariable:
	//	{iot_lua::IntegerVariableBindStatement_Assignment}
	//	'int' delegate=Statement_FunctioncallOrAssignment;
	public IntegerVariableElements getIntegerVariableAccess() {
		return pIntegerVariable;
	}
	
	public ParserRule getIntegerVariableRule() {
		return getIntegerVariableAccess().getRule();
	}
	
	//BooleanVariable activitydiagram::BooleanVariable:
	//	{iot_lua::BooleanVariableBindStatement_Assignment}
	//	'bool' delegate=Statement_FunctioncallOrAssignment;
	public BooleanVariableElements getBooleanVariableAccess() {
		return pBooleanVariable;
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}
	
	//BooleanValue activitydiagram::BooleanValue:
	//	value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//IntegerValue activitydiagram::IntegerValue:
	//	value=INT;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//ControlFlow activitydiagram::ControlFlow:
	//	'flow'
	//	name=ID
	//	'from' source=[activitydiagram::ActivityNode]
	//	'to' target=[activitydiagram::ActivityNode] ('[' guard=[activitydiagram::BooleanVariable] ']')?;
	public ControlFlowElements getControlFlowAccess() {
		return pControlFlow;
	}
	
	public ParserRule getControlFlowRule() {
		return getControlFlowAccess().getRule();
	}
	
	//Double ecore::EDouble:
	//	INT ('.' INT)?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

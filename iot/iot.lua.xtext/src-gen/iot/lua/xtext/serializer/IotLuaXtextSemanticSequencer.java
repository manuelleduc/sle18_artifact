/*
 * generated by Xtext 2.12.0
 */
package iot.lua.xtext.serializer;

import activitydiagram.Activity;
import activitydiagram.ActivityFinalNode;
import activitydiagram.ActivitydiagramPackage;
import activitydiagram.BooleanValue;
import activitydiagram.ControlFlow;
import activitydiagram.DecisionNode;
import activitydiagram.ForkNode;
import activitydiagram.InitialNode;
import activitydiagram.IntegerValue;
import activitydiagram.JoinNode;
import activitydiagram.MergeNode;
import activitydiagram.OpaqueAction;
import com.google.inject.Inject;
import idlmm.IdlmmPackage;
import idlmm.OperationDef;
import idlmm.ParameterDef;
import idlmm.PrimitiveDef;
import iot.Actuator;
import iot.Board;
import iot.IotPackage;
import iot.Sensor;
import iot.Sketch;
import iot.lua.xtext.services.IotLuaXtextGrammarAccess;
import iot_lua.BooleanVariableBindStatement_Assignment;
import iot_lua.ExpressionBindOperationDef;
import iot_lua.ExpressionBindStatement;
import iot_lua.IdlStmtBindBlock;
import iot_lua.IntegerVariableBindStatement_Assignment;
import iot_lua.IotActivityBindActivity;
import iot_lua.IotOperationDefBindOperationDef;
import iot_lua.Iot_luaPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.lua.lua.Block;
import org.xtext.lua.lua.Expression_AccessArray;
import org.xtext.lua.lua.Expression_AccessMember;
import org.xtext.lua.lua.Expression_And;
import org.xtext.lua.lua.Expression_CallFunction;
import org.xtext.lua.lua.Expression_CallMemberFunction;
import org.xtext.lua.lua.Expression_Concatenation;
import org.xtext.lua.lua.Expression_Division;
import org.xtext.lua.lua.Expression_Equal;
import org.xtext.lua.lua.Expression_Exponentiation;
import org.xtext.lua.lua.Expression_False;
import org.xtext.lua.lua.Expression_Function;
import org.xtext.lua.lua.Expression_Invert;
import org.xtext.lua.lua.Expression_Larger;
import org.xtext.lua.lua.Expression_Larger_Equal;
import org.xtext.lua.lua.Expression_Length;
import org.xtext.lua.lua.Expression_Minus;
import org.xtext.lua.lua.Expression_Modulo;
import org.xtext.lua.lua.Expression_Multiplication;
import org.xtext.lua.lua.Expression_Negate;
import org.xtext.lua.lua.Expression_Nil;
import org.xtext.lua.lua.Expression_Not_Equal;
import org.xtext.lua.lua.Expression_Number;
import org.xtext.lua.lua.Expression_Or;
import org.xtext.lua.lua.Expression_Plus;
import org.xtext.lua.lua.Expression_Smaller;
import org.xtext.lua.lua.Expression_Smaller_Equal;
import org.xtext.lua.lua.Expression_String;
import org.xtext.lua.lua.Expression_TableConstructor;
import org.xtext.lua.lua.Expression_True;
import org.xtext.lua.lua.Expression_VarArgs;
import org.xtext.lua.lua.Expression_VariableName;
import org.xtext.lua.lua.Field_AddEntryToTable;
import org.xtext.lua.lua.Field_AddEntryToTable_Brackets;
import org.xtext.lua.lua.Field_AppendEntryToTable;
import org.xtext.lua.lua.Function;
import org.xtext.lua.lua.Functioncall_Arguments;
import org.xtext.lua.lua.LastStatement_Break;
import org.xtext.lua.lua.LastStatement_ReturnWithValue;
import org.xtext.lua.lua.LuaPackage;
import org.xtext.lua.lua.Statement_Assignment;
import org.xtext.lua.lua.Statement_Block;
import org.xtext.lua.lua.Statement_CallFunction;
import org.xtext.lua.lua.Statement_CallMemberFunction;
import org.xtext.lua.lua.Statement_For_Generic;
import org.xtext.lua.lua.Statement_For_Numeric;
import org.xtext.lua.lua.Statement_GlobalFunction_Declaration;
import org.xtext.lua.lua.Statement_If_Then_Else;
import org.xtext.lua.lua.Statement_If_Then_Else_ElseIfPart;
import org.xtext.lua.lua.Statement_LocalFunction_Declaration;
import org.xtext.lua.lua.Statement_Local_Variable_Declaration;
import org.xtext.lua.lua.Statement_Repeat;
import org.xtext.lua.lua.Statement_While;

@SuppressWarnings("all")
public class IotLuaXtextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IotLuaXtextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActivitydiagramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActivitydiagramPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ActivitydiagramPackage.ACTIVITY_FINAL_NODE:
				sequence_ActivityFinalNode(context, (ActivityFinalNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case ActivitydiagramPackage.CONTROL_FLOW:
				sequence_ControlFlow(context, (ControlFlow) semanticObject); 
				return; 
			case ActivitydiagramPackage.DECISION_NODE:
				sequence_DecisionNode(context, (DecisionNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.FORK_NODE:
				sequence_ForkNode(context, (ForkNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.INTEGER_VALUE:
				sequence_IntegerValue(context, (IntegerValue) semanticObject); 
				return; 
			case ActivitydiagramPackage.JOIN_NODE:
				sequence_JoinNode(context, (JoinNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.MERGE_NODE:
				sequence_MergeNode(context, (MergeNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.OPAQUE_ACTION:
				sequence_OpaqueAction(context, (OpaqueAction) semanticObject); 
				return; 
			}
		else if (epackage == IdlmmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IdlmmPackage.OPERATION_DEF:
				sequence_OperationDef(context, (OperationDef) semanticObject); 
				return; 
			case IdlmmPackage.PARAMETER_DEF:
				sequence_ParameterDef(context, (ParameterDef) semanticObject); 
				return; 
			case IdlmmPackage.PRIMITIVE_DEF:
				if (rule == grammarAccess.getCharstr_typeRule()) {
					sequence_charstr_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrimitiveDefRule()) {
					sequence_charstr_type_floating_pt_type_integer_type_other_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFloating_pt_typeRule()) {
					sequence_floating_pt_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInteger_typeRule()) {
					sequence_integer_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOther_typeRule()) {
					sequence_other_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == IotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IotPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case IotPackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			case IotPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case IotPackage.SKETCH:
				sequence_Sketch(context, (Sketch) semanticObject); 
				return; 
			case IotPackage.SYSTEM:
				sequence_System(context, (iot.System) semanticObject); 
				return; 
			}
		else if (epackage == Iot_luaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Iot_luaPackage.BOOLEAN_VARIABLE_BIND_STATEMENT_ASSIGNMENT:
				sequence_BooleanVariable(context, (BooleanVariableBindStatement_Assignment) semanticObject); 
				return; 
			case Iot_luaPackage.EXPRESSION_BIND_OPERATION_DEF:
				sequence_ExpBindOpDef(context, (ExpressionBindOperationDef) semanticObject); 
				return; 
			case Iot_luaPackage.EXPRESSION_BIND_STATEMENT:
				sequence_ExpBindStatement(context, (ExpressionBindStatement) semanticObject); 
				return; 
			case Iot_luaPackage.IDL_STMT_BIND_BLOCK:
				sequence_IdlStmt(context, (IdlStmtBindBlock) semanticObject); 
				return; 
			case Iot_luaPackage.INTEGER_VARIABLE_BIND_STATEMENT_ASSIGNMENT:
				sequence_IntegerVariable(context, (IntegerVariableBindStatement_Assignment) semanticObject); 
				return; 
			case Iot_luaPackage.IOT_ACTIVITY_BIND_ACTIVITY:
				sequence_IotActivity(context, (IotActivityBindActivity) semanticObject); 
				return; 
			case Iot_luaPackage.IOT_OPERATION_DEF_BIND_OPERATION_DEF:
				sequence_IotOperationDef(context, (IotOperationDefBindOperationDef) semanticObject); 
				return; 
			}
		else if (epackage == LuaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LuaPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_ACCESS_ARRAY:
				sequence_Expression_AccessMemberOrArrayElement(context, (Expression_AccessArray) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_ACCESS_MEMBER:
				sequence_Expression_AccessMemberOrArrayElement(context, (Expression_AccessMember) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_AND:
				sequence_Expression_And(context, (Expression_And) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_CALL_FUNCTION:
				sequence_Expression_Functioncall(context, (Expression_CallFunction) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_CALL_MEMBER_FUNCTION:
				sequence_Expression_Functioncall(context, (Expression_CallMemberFunction) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_CONCATENATION:
				sequence_Expression_Concatenation(context, (Expression_Concatenation) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_DIVISION:
				sequence_Expression_MultiplicationDivisionModulo(context, (Expression_Division) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_EQUAL:
				sequence_Expression_Compare(context, (Expression_Equal) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_EXPONENTIATION:
				sequence_Expression_Exponentiation(context, (Expression_Exponentiation) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_FALSE:
				sequence_Expression_False(context, (Expression_False) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_FUNCTION:
				sequence_Expression_Function(context, (Expression_Function) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_INVERT:
				sequence_Expression_Unary(context, (Expression_Invert) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_LARGER:
				sequence_Expression_Compare(context, (Expression_Larger) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_LARGER_EQUAL:
				sequence_Expression_Compare(context, (Expression_Larger_Equal) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_LENGTH:
				sequence_Expression_Unary(context, (Expression_Length) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_MINUS:
				sequence_Expression_PlusMinus(context, (Expression_Minus) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_MODULO:
				sequence_Expression_MultiplicationDivisionModulo(context, (Expression_Modulo) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_MULTIPLICATION:
				sequence_Expression_MultiplicationDivisionModulo(context, (Expression_Multiplication) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_NEGATE:
				sequence_Expression_Unary(context, (Expression_Negate) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_NIL:
				sequence_Expression_Nil(context, (Expression_Nil) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_NOT_EQUAL:
				sequence_Expression_Compare(context, (Expression_Not_Equal) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_NUMBER:
				sequence_Expression_Number(context, (Expression_Number) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_OR:
				sequence_Expression_Or(context, (Expression_Or) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_PLUS:
				sequence_Expression_PlusMinus(context, (Expression_Plus) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_SMALLER:
				sequence_Expression_Compare(context, (Expression_Smaller) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_SMALLER_EQUAL:
				sequence_Expression_Compare(context, (Expression_Smaller_Equal) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_STRING:
				sequence_Expression_String(context, (Expression_String) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_TABLE_CONSTRUCTOR:
				sequence_Expression_TableConstructor(context, (Expression_TableConstructor) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_TRUE:
				sequence_Expression_True(context, (Expression_True) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_VAR_ARGS:
				sequence_Expression_VarArgs(context, (Expression_VarArgs) semanticObject); 
				return; 
			case LuaPackage.EXPRESSION_VARIABLE_NAME:
				sequence_Expression_VariableName(context, (Expression_VariableName) semanticObject); 
				return; 
			case LuaPackage.FIELD_ADD_ENTRY_TO_TABLE:
				sequence_Field_AddEntryToTable(context, (Field_AddEntryToTable) semanticObject); 
				return; 
			case LuaPackage.FIELD_ADD_ENTRY_TO_TABLE_BRACKETS:
				sequence_Field_AddEntryToTable_Brackets(context, (Field_AddEntryToTable_Brackets) semanticObject); 
				return; 
			case LuaPackage.FIELD_APPEND_ENTRY_TO_TABLE:
				sequence_Field_AppendEntryToTable(context, (Field_AppendEntryToTable) semanticObject); 
				return; 
			case LuaPackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case LuaPackage.FUNCTIONCALL_ARGUMENTS:
				sequence_Functioncall_Arguments(context, (Functioncall_Arguments) semanticObject); 
				return; 
			case LuaPackage.LAST_STATEMENT_BREAK:
				sequence_LastStatement_Break(context, (LastStatement_Break) semanticObject); 
				return; 
			case LuaPackage.LAST_STATEMENT_RETURN_WITH_VALUE:
				sequence_LastStatement_Return(context, (LastStatement_ReturnWithValue) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_ASSIGNMENT:
				sequence_Statement_FunctioncallOrAssignment(context, (Statement_Assignment) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_BLOCK:
				sequence_Statement_Block(context, (Statement_Block) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_CALL_FUNCTION:
				sequence_Statement_FunctioncallOrAssignment(context, (Statement_CallFunction) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_CALL_MEMBER_FUNCTION:
				sequence_Statement_FunctioncallOrAssignment(context, (Statement_CallMemberFunction) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_FOR_GENERIC:
				sequence_Statement_For_Generic(context, (Statement_For_Generic) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_FOR_NUMERIC:
				sequence_Statement_For_Numeric(context, (Statement_For_Numeric) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_GLOBAL_FUNCTION_DECLARATION:
				sequence_Statement_GlobalFunction_Declaration(context, (Statement_GlobalFunction_Declaration) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_IF_THEN_ELSE:
				sequence_Statement_If_Then_Else(context, (Statement_If_Then_Else) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_IF_THEN_ELSE_ELSE_IF_PART:
				sequence_Statement_If_Then_Else_ElseIfPart(context, (Statement_If_Then_Else_ElseIfPart) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_LOCAL_FUNCTION_DECLARATION:
				sequence_Statement_LocalFunction_Declaration(context, (Statement_LocalFunction_Declaration) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_LOCAL_VARIABLE_DECLARATION:
				sequence_Statement_Local_Variable_Declaration(context, (Statement_Local_Variable_Declaration) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_REPEAT:
				sequence_Statement_Repeat(context, (Statement_Repeat) semanticObject); 
				return; 
			case LuaPackage.STATEMENT_WHILE:
				sequence_Statement_While(context, (Statement_While) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActivityNode returns ActivityFinalNode
	 *     ActivityFinalNode returns ActivityFinalNode
	 *
	 * Constraint:
	 *     (name=ID incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)
	 */
	protected void sequence_ActivityFinalNode(ISerializationContext context, ActivityFinalNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (inputs+=Variable inputs+=Variable*)? 
	 *         (locals+=Variable locals+=Variable*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)?
	 *     )
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HWComponent returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=ID services+=IotOperationDef*)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chunk returns Block
	 *     Block returns Block
	 *
	 * Constraint:
	 *     (statements+=Statement* returnValue=LastStatement?)
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Board returns Board
	 *
	 * Constraint:
	 *     (name=ID type=BoardType components+=[HWComp|ID]*)
	 */
	protected void sequence_Board(ISerializationContext context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns BooleanVariableBindStatement_Assignment
	 *     BooleanVariable returns BooleanVariableBindStatement_Assignment
	 *
	 * Constraint:
	 *     delegate=Statement_FunctioncallOrAssignment
	 */
	protected void sequence_BooleanVariable(ISerializationContext context, BooleanVariableBindStatement_Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.BOOLEAN_VARIABLE_BIND_STATEMENT_ASSIGNMENT__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.BOOLEAN_VARIABLE_BIND_STATEMENT_ASSIGNMENT__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanVariableAccess().getDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns ControlFlow
	 *     ControlFlow returns ControlFlow
	 *
	 * Constraint:
	 *     (name=ID source=[ActivityNode|ID] target=[ActivityNode|ID] guard=[BooleanVariable|ID]?)
	 */
	protected void sequence_ControlFlow(ISerializationContext context, ControlFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (name=ID incoming+=[ActivityEdge|ID] (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)?)
	 */
	protected void sequence_DecisionNode(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpBindOpDef returns ExpressionBindOperationDef
	 *
	 * Constraint:
	 *     delegate=[OperationDef|ID]
	 */
	protected void sequence_ExpBindOpDef(ISerializationContext context, ExpressionBindOperationDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpBindOpDefAccess().getDelegateOperationDefIDTerminalRuleCall_1_0_1(), semanticObject.eGet(Iot_luaPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpBindStatement returns ExpressionBindStatement
	 *
	 * Constraint:
	 *     delegate=Statement
	 */
	protected void sequence_ExpBindStatement(ISerializationContext context, ExpressionBindStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.EXPRESSION_BIND_STATEMENT__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.EXPRESSION_BIND_STATEMENT__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpBindStatementAccess().getDelegateStatementParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_AccessArray
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_AccessArray
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_AccessArray
	 *     Expression returns Expression_AccessArray
	 *     Expression_Or returns Expression_AccessArray
	 *     Expression_Or.Expression_Or_1_1 returns Expression_AccessArray
	 *     Expression_And returns Expression_AccessArray
	 *     Expression_And.Expression_And_1_1 returns Expression_AccessArray
	 *     Expression_Compare returns Expression_AccessArray
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_AccessArray
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_AccessArray
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_AccessArray
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_AccessArray
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_AccessArray
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_AccessArray
	 *     Expression_Concatenation returns Expression_AccessArray
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_AccessArray
	 *     Expression_PlusMinus returns Expression_AccessArray
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_AccessArray
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_AccessArray
	 *     Expression_MultiplicationDivisionModulo returns Expression_AccessArray
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_AccessArray
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_AccessArray
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_AccessArray
	 *     Expression_Unary returns Expression_AccessArray
	 *     Expression_Exponentiation returns Expression_AccessArray
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_AccessArray
	 *     Expression_Terminal returns Expression_AccessArray
	 *     Expression_Functioncall returns Expression_AccessArray
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_AccessArray
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_AccessArray
	 *     Expression_AccessMemberOrArrayElement returns Expression_AccessArray
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_AccessArray
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_AccessArray
	 *     Expression_VariableName returns Expression_AccessArray
	 *
	 * Constraint:
	 *     (array=Expression_AccessMemberOrArrayElement_Expression_AccessArray_1_0_1 index=Expression)
	 */
	protected void sequence_Expression_AccessMemberOrArrayElement(ISerializationContext context, Expression_AccessArray semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_ARRAY__ARRAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_ARRAY__ARRAY));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_ARRAY__INDEX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_ARRAY__INDEX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getExpression_AccessArrayArrayAction_1_0_1(), semanticObject.getArray());
		feeder.accept(grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getIndexExpressionParserRuleCall_1_0_2_0(), semanticObject.getIndex());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_AccessMember
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_AccessMember
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_AccessMember
	 *     Expression returns Expression_AccessMember
	 *     Expression_Or returns Expression_AccessMember
	 *     Expression_Or.Expression_Or_1_1 returns Expression_AccessMember
	 *     Expression_And returns Expression_AccessMember
	 *     Expression_And.Expression_And_1_1 returns Expression_AccessMember
	 *     Expression_Compare returns Expression_AccessMember
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_AccessMember
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_AccessMember
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_AccessMember
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_AccessMember
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_AccessMember
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_AccessMember
	 *     Expression_Concatenation returns Expression_AccessMember
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_AccessMember
	 *     Expression_PlusMinus returns Expression_AccessMember
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_AccessMember
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_AccessMember
	 *     Expression_MultiplicationDivisionModulo returns Expression_AccessMember
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_AccessMember
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_AccessMember
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_AccessMember
	 *     Expression_Unary returns Expression_AccessMember
	 *     Expression_Exponentiation returns Expression_AccessMember
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_AccessMember
	 *     Expression_Terminal returns Expression_AccessMember
	 *     Expression_Functioncall returns Expression_AccessMember
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_AccessMember
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_AccessMember
	 *     Expression_AccessMemberOrArrayElement returns Expression_AccessMember
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_AccessMember
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_AccessMember
	 *     Expression_VariableName returns Expression_AccessMember
	 *
	 * Constraint:
	 *     (object=Expression_AccessMemberOrArrayElement_Expression_AccessMember_1_1_1 memberName=ID)
	 */
	protected void sequence_Expression_AccessMemberOrArrayElement(ISerializationContext context, Expression_AccessMember semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_MEMBER__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_MEMBER__OBJECT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_MEMBER__MEMBER_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_ACCESS_MEMBER__MEMBER_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getExpression_AccessMemberObjectAction_1_1_1(), semanticObject.getObject());
		feeder.accept(grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getMemberNameIDTerminalRuleCall_1_1_2_0(), semanticObject.getMemberName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_And
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_And
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_And
	 *     Expression returns Expression_And
	 *     Expression_Or returns Expression_And
	 *     Expression_Or.Expression_Or_1_1 returns Expression_And
	 *     Expression_And returns Expression_And
	 *     Expression_And.Expression_And_1_1 returns Expression_And
	 *     Expression_Compare returns Expression_And
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_And
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_And
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_And
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_And
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_And
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_And
	 *     Expression_Concatenation returns Expression_And
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_And
	 *     Expression_PlusMinus returns Expression_And
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_And
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_And
	 *     Expression_MultiplicationDivisionModulo returns Expression_And
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_And
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_And
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_And
	 *     Expression_Unary returns Expression_And
	 *     Expression_Exponentiation returns Expression_And
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_And
	 *     Expression_Terminal returns Expression_And
	 *     Expression_Functioncall returns Expression_And
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_And
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_And
	 *     Expression_AccessMemberOrArrayElement returns Expression_And
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_And
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_And
	 *     Expression_VariableName returns Expression_And
	 *
	 * Constraint:
	 *     (left=Expression_And_Expression_And_1_1 right=Expression_Compare)
	 */
	protected void sequence_Expression_And(ISerializationContext context, Expression_And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_AndAccess().getExpression_AndLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_AndAccess().getRightExpression_CompareParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Equal
	 *     Expression returns Expression_Equal
	 *     Expression_Or returns Expression_Equal
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Equal
	 *     Expression_And returns Expression_Equal
	 *     Expression_And.Expression_And_1_1 returns Expression_Equal
	 *     Expression_Compare returns Expression_Equal
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Equal
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Equal
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Equal
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Equal
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Equal
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Equal
	 *     Expression_Concatenation returns Expression_Equal
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Equal
	 *     Expression_PlusMinus returns Expression_Equal
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Equal
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Equal
	 *     Expression_MultiplicationDivisionModulo returns Expression_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Equal
	 *     Expression_Unary returns Expression_Equal
	 *     Expression_Exponentiation returns Expression_Equal
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Equal
	 *     Expression_Terminal returns Expression_Equal
	 *     Expression_Functioncall returns Expression_Equal
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Equal
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Equal
	 *     Expression_AccessMemberOrArrayElement returns Expression_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Equal
	 *     Expression_VariableName returns Expression_Equal
	 *
	 * Constraint:
	 *     (left=Expression_Compare_Expression_Equal_1_4_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Compare(ISerializationContext context, Expression_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_CompareAccess().getExpression_EqualLeftAction_1_4_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_4_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Larger
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Larger
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Larger
	 *     Expression returns Expression_Larger
	 *     Expression_Or returns Expression_Larger
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Larger
	 *     Expression_And returns Expression_Larger
	 *     Expression_And.Expression_And_1_1 returns Expression_Larger
	 *     Expression_Compare returns Expression_Larger
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Larger
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Larger
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Larger
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Larger
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Larger
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Larger
	 *     Expression_Concatenation returns Expression_Larger
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Larger
	 *     Expression_PlusMinus returns Expression_Larger
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Larger
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Larger
	 *     Expression_MultiplicationDivisionModulo returns Expression_Larger
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Larger
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Larger
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Larger
	 *     Expression_Unary returns Expression_Larger
	 *     Expression_Exponentiation returns Expression_Larger
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Larger
	 *     Expression_Terminal returns Expression_Larger
	 *     Expression_Functioncall returns Expression_Larger
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Larger
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Larger
	 *     Expression_AccessMemberOrArrayElement returns Expression_Larger
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Larger
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Larger
	 *     Expression_VariableName returns Expression_Larger
	 *
	 * Constraint:
	 *     (left=Expression_Compare_Expression_Larger_1_0_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Compare(ISerializationContext context, Expression_Larger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_CompareAccess().getExpression_LargerLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Larger_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Larger_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Larger_Equal
	 *     Expression returns Expression_Larger_Equal
	 *     Expression_Or returns Expression_Larger_Equal
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Larger_Equal
	 *     Expression_And returns Expression_Larger_Equal
	 *     Expression_And.Expression_And_1_1 returns Expression_Larger_Equal
	 *     Expression_Compare returns Expression_Larger_Equal
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Larger_Equal
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Larger_Equal
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Larger_Equal
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Larger_Equal
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Larger_Equal
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Larger_Equal
	 *     Expression_Concatenation returns Expression_Larger_Equal
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Larger_Equal
	 *     Expression_PlusMinus returns Expression_Larger_Equal
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Larger_Equal
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Larger_Equal
	 *     Expression_MultiplicationDivisionModulo returns Expression_Larger_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Larger_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Larger_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Larger_Equal
	 *     Expression_Unary returns Expression_Larger_Equal
	 *     Expression_Exponentiation returns Expression_Larger_Equal
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Larger_Equal
	 *     Expression_Terminal returns Expression_Larger_Equal
	 *     Expression_Functioncall returns Expression_Larger_Equal
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Larger_Equal
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Larger_Equal
	 *     Expression_AccessMemberOrArrayElement returns Expression_Larger_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Larger_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Larger_Equal
	 *     Expression_VariableName returns Expression_Larger_Equal
	 *
	 * Constraint:
	 *     (left=Expression_Compare_Expression_Larger_Equal_1_1_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Compare(ISerializationContext context, Expression_Larger_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_LARGER_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_CompareAccess().getExpression_Larger_EqualLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Not_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Not_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Not_Equal
	 *     Expression returns Expression_Not_Equal
	 *     Expression_Or returns Expression_Not_Equal
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Not_Equal
	 *     Expression_And returns Expression_Not_Equal
	 *     Expression_And.Expression_And_1_1 returns Expression_Not_Equal
	 *     Expression_Compare returns Expression_Not_Equal
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Not_Equal
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Not_Equal
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Not_Equal
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Not_Equal
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Not_Equal
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Not_Equal
	 *     Expression_Concatenation returns Expression_Not_Equal
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Not_Equal
	 *     Expression_PlusMinus returns Expression_Not_Equal
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Not_Equal
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Not_Equal
	 *     Expression_MultiplicationDivisionModulo returns Expression_Not_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Not_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Not_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Not_Equal
	 *     Expression_Unary returns Expression_Not_Equal
	 *     Expression_Exponentiation returns Expression_Not_Equal
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Not_Equal
	 *     Expression_Terminal returns Expression_Not_Equal
	 *     Expression_Functioncall returns Expression_Not_Equal
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Not_Equal
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Not_Equal
	 *     Expression_AccessMemberOrArrayElement returns Expression_Not_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Not_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Not_Equal
	 *     Expression_VariableName returns Expression_Not_Equal
	 *
	 * Constraint:
	 *     (left=Expression_Compare_Expression_Not_Equal_1_5_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Compare(ISerializationContext context, Expression_Not_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_NOT_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_NOT_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_NOT_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_NOT_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_CompareAccess().getExpression_Not_EqualLeftAction_1_5_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_5_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Smaller
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Smaller
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Smaller
	 *     Expression returns Expression_Smaller
	 *     Expression_Or returns Expression_Smaller
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Smaller
	 *     Expression_And returns Expression_Smaller
	 *     Expression_And.Expression_And_1_1 returns Expression_Smaller
	 *     Expression_Compare returns Expression_Smaller
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Smaller
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Smaller
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Smaller
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Smaller
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Smaller
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Smaller
	 *     Expression_Concatenation returns Expression_Smaller
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Smaller
	 *     Expression_PlusMinus returns Expression_Smaller
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Smaller
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Smaller
	 *     Expression_MultiplicationDivisionModulo returns Expression_Smaller
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Smaller
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Smaller
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Smaller
	 *     Expression_Unary returns Expression_Smaller
	 *     Expression_Exponentiation returns Expression_Smaller
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Smaller
	 *     Expression_Terminal returns Expression_Smaller
	 *     Expression_Functioncall returns Expression_Smaller
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Smaller
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Smaller
	 *     Expression_AccessMemberOrArrayElement returns Expression_Smaller
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Smaller
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Smaller
	 *     Expression_VariableName returns Expression_Smaller
	 *
	 * Constraint:
	 *     (left=Expression_Compare_Expression_Smaller_1_2_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Compare(ISerializationContext context, Expression_Smaller semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_CompareAccess().getExpression_SmallerLeftAction_1_2_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Smaller_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Smaller_Equal
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Smaller_Equal
	 *     Expression returns Expression_Smaller_Equal
	 *     Expression_Or returns Expression_Smaller_Equal
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Smaller_Equal
	 *     Expression_And returns Expression_Smaller_Equal
	 *     Expression_And.Expression_And_1_1 returns Expression_Smaller_Equal
	 *     Expression_Compare returns Expression_Smaller_Equal
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Smaller_Equal
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Smaller_Equal
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Smaller_Equal
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Smaller_Equal
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Smaller_Equal
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Smaller_Equal
	 *     Expression_Concatenation returns Expression_Smaller_Equal
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Smaller_Equal
	 *     Expression_PlusMinus returns Expression_Smaller_Equal
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Smaller_Equal
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Smaller_Equal
	 *     Expression_MultiplicationDivisionModulo returns Expression_Smaller_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Smaller_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Smaller_Equal
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Smaller_Equal
	 *     Expression_Unary returns Expression_Smaller_Equal
	 *     Expression_Exponentiation returns Expression_Smaller_Equal
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Smaller_Equal
	 *     Expression_Terminal returns Expression_Smaller_Equal
	 *     Expression_Functioncall returns Expression_Smaller_Equal
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Smaller_Equal
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Smaller_Equal
	 *     Expression_AccessMemberOrArrayElement returns Expression_Smaller_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Smaller_Equal
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Smaller_Equal
	 *     Expression_VariableName returns Expression_Smaller_Equal
	 *
	 * Constraint:
	 *     (left=Expression_Compare_Expression_Smaller_Equal_1_3_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Compare(ISerializationContext context, Expression_Smaller_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_SMALLER_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_CompareAccess().getExpression_Smaller_EqualLeftAction_1_3_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_3_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Concatenation
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Concatenation
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Concatenation
	 *     Expression returns Expression_Concatenation
	 *     Expression_Or returns Expression_Concatenation
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Concatenation
	 *     Expression_And returns Expression_Concatenation
	 *     Expression_And.Expression_And_1_1 returns Expression_Concatenation
	 *     Expression_Compare returns Expression_Concatenation
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Concatenation
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Concatenation
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Concatenation
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Concatenation
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Concatenation
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Concatenation
	 *     Expression_Concatenation returns Expression_Concatenation
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Concatenation
	 *     Expression_PlusMinus returns Expression_Concatenation
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Concatenation
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Concatenation
	 *     Expression_MultiplicationDivisionModulo returns Expression_Concatenation
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Concatenation
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Concatenation
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Concatenation
	 *     Expression_Unary returns Expression_Concatenation
	 *     Expression_Exponentiation returns Expression_Concatenation
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Concatenation
	 *     Expression_Terminal returns Expression_Concatenation
	 *     Expression_Functioncall returns Expression_Concatenation
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Concatenation
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Concatenation
	 *     Expression_AccessMemberOrArrayElement returns Expression_Concatenation
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Concatenation
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Concatenation
	 *     Expression_VariableName returns Expression_Concatenation
	 *
	 * Constraint:
	 *     (left=Expression_Concatenation_Expression_Concatenation_1_1 right=Expression_Concatenation)
	 */
	protected void sequence_Expression_Concatenation(ISerializationContext context, Expression_Concatenation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CONCATENATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CONCATENATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CONCATENATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CONCATENATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_ConcatenationAccess().getExpression_ConcatenationLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_ConcatenationAccess().getRightExpression_ConcatenationParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Exponentiation
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Exponentiation
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Exponentiation
	 *     Expression returns Expression_Exponentiation
	 *     Expression_Or returns Expression_Exponentiation
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Exponentiation
	 *     Expression_And returns Expression_Exponentiation
	 *     Expression_And.Expression_And_1_1 returns Expression_Exponentiation
	 *     Expression_Compare returns Expression_Exponentiation
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Exponentiation
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Exponentiation
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Exponentiation
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Exponentiation
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Exponentiation
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Exponentiation
	 *     Expression_Concatenation returns Expression_Exponentiation
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Exponentiation
	 *     Expression_PlusMinus returns Expression_Exponentiation
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Exponentiation
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Exponentiation
	 *     Expression_MultiplicationDivisionModulo returns Expression_Exponentiation
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Exponentiation
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Exponentiation
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Exponentiation
	 *     Expression_Unary returns Expression_Exponentiation
	 *     Expression_Exponentiation returns Expression_Exponentiation
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Exponentiation
	 *     Expression_Terminal returns Expression_Exponentiation
	 *     Expression_Functioncall returns Expression_Exponentiation
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Exponentiation
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Exponentiation
	 *     Expression_AccessMemberOrArrayElement returns Expression_Exponentiation
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Exponentiation
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Exponentiation
	 *     Expression_VariableName returns Expression_Exponentiation
	 *
	 * Constraint:
	 *     (left=Expression_Exponentiation_Expression_Exponentiation_1_1 right=Expression_Exponentiation)
	 */
	protected void sequence_Expression_Exponentiation(ISerializationContext context, Expression_Exponentiation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_EXPONENTIATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_EXPONENTIATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_EXPONENTIATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_EXPONENTIATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_ExponentiationAccess().getExpression_ExponentiationLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_ExponentiationAccess().getRightExpression_ExponentiationParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_False
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_False
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_False
	 *     Expression returns Expression_False
	 *     Expression_Or returns Expression_False
	 *     Expression_Or.Expression_Or_1_1 returns Expression_False
	 *     Expression_And returns Expression_False
	 *     Expression_And.Expression_And_1_1 returns Expression_False
	 *     Expression_Compare returns Expression_False
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_False
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_False
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_False
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_False
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_False
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_False
	 *     Expression_Concatenation returns Expression_False
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_False
	 *     Expression_PlusMinus returns Expression_False
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_False
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_False
	 *     Expression_MultiplicationDivisionModulo returns Expression_False
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_False
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_False
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_False
	 *     Expression_Unary returns Expression_False
	 *     Expression_Exponentiation returns Expression_False
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_False
	 *     Expression_Terminal returns Expression_False
	 *     Expression_False returns Expression_False
	 *     Expression_Functioncall returns Expression_False
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_False
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_False
	 *     Expression_AccessMemberOrArrayElement returns Expression_False
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_False
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_False
	 *     Expression_VariableName returns Expression_False
	 *
	 * Constraint:
	 *     {Expression_False}
	 */
	protected void sequence_Expression_False(ISerializationContext context, Expression_False semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Function
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Function
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Function
	 *     Expression returns Expression_Function
	 *     Expression_Or returns Expression_Function
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Function
	 *     Expression_And returns Expression_Function
	 *     Expression_And.Expression_And_1_1 returns Expression_Function
	 *     Expression_Compare returns Expression_Function
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Function
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Function
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Function
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Function
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Function
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Function
	 *     Expression_Concatenation returns Expression_Function
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Function
	 *     Expression_PlusMinus returns Expression_Function
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Function
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Function
	 *     Expression_MultiplicationDivisionModulo returns Expression_Function
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Function
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Function
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Function
	 *     Expression_Unary returns Expression_Function
	 *     Expression_Exponentiation returns Expression_Function
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Function
	 *     Expression_Terminal returns Expression_Function
	 *     Expression_Function returns Expression_Function
	 *     Expression_Functioncall returns Expression_Function
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Function
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Function
	 *     Expression_AccessMemberOrArrayElement returns Expression_Function
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Function
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Function
	 *     Expression_VariableName returns Expression_Function
	 *
	 * Constraint:
	 *     function=Function
	 */
	protected void sequence_Expression_Function(ISerializationContext context, Expression_Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_FUNCTION__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_FUNCTION__FUNCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_FunctionAccess().getFunctionFunctionParserRuleCall_1_0(), semanticObject.getFunction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_CallFunction
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_CallFunction
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_CallFunction
	 *     Expression returns Expression_CallFunction
	 *     Expression_Or returns Expression_CallFunction
	 *     Expression_Or.Expression_Or_1_1 returns Expression_CallFunction
	 *     Expression_And returns Expression_CallFunction
	 *     Expression_And.Expression_And_1_1 returns Expression_CallFunction
	 *     Expression_Compare returns Expression_CallFunction
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_CallFunction
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_CallFunction
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_CallFunction
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_CallFunction
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_CallFunction
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_CallFunction
	 *     Expression_Concatenation returns Expression_CallFunction
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_CallFunction
	 *     Expression_PlusMinus returns Expression_CallFunction
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_CallFunction
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_CallFunction
	 *     Expression_MultiplicationDivisionModulo returns Expression_CallFunction
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_CallFunction
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_CallFunction
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_CallFunction
	 *     Expression_Unary returns Expression_CallFunction
	 *     Expression_Exponentiation returns Expression_CallFunction
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_CallFunction
	 *     Expression_Terminal returns Expression_CallFunction
	 *     Expression_Functioncall returns Expression_CallFunction
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_CallFunction
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_CallFunction
	 *     Expression_AccessMemberOrArrayElement returns Expression_CallFunction
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_CallFunction
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_CallFunction
	 *     Expression_VariableName returns Expression_CallFunction
	 *
	 * Constraint:
	 *     (object=Expression_Functioncall_Expression_CallFunction_1_1_0 arguments=Functioncall_Arguments)
	 */
	protected void sequence_Expression_Functioncall(ISerializationContext context, Expression_CallFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_FUNCTION__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_FUNCTION__OBJECT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_FUNCTION__ARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_FUNCTION__ARGUMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_FunctioncallAccess().getExpression_CallFunctionObjectAction_1_1_0(), semanticObject.getObject());
		feeder.accept(grammarAccess.getExpression_FunctioncallAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_1_0(), semanticObject.getArguments());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_CallMemberFunction
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_CallMemberFunction
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_CallMemberFunction
	 *     Expression returns Expression_CallMemberFunction
	 *     Expression_Or returns Expression_CallMemberFunction
	 *     Expression_Or.Expression_Or_1_1 returns Expression_CallMemberFunction
	 *     Expression_And returns Expression_CallMemberFunction
	 *     Expression_And.Expression_And_1_1 returns Expression_CallMemberFunction
	 *     Expression_Compare returns Expression_CallMemberFunction
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_CallMemberFunction
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_CallMemberFunction
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_CallMemberFunction
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_CallMemberFunction
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_CallMemberFunction
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_CallMemberFunction
	 *     Expression_Concatenation returns Expression_CallMemberFunction
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_CallMemberFunction
	 *     Expression_PlusMinus returns Expression_CallMemberFunction
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_CallMemberFunction
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_CallMemberFunction
	 *     Expression_MultiplicationDivisionModulo returns Expression_CallMemberFunction
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_CallMemberFunction
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_CallMemberFunction
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_CallMemberFunction
	 *     Expression_Unary returns Expression_CallMemberFunction
	 *     Expression_Exponentiation returns Expression_CallMemberFunction
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_CallMemberFunction
	 *     Expression_Terminal returns Expression_CallMemberFunction
	 *     Expression_Functioncall returns Expression_CallMemberFunction
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_CallMemberFunction
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_CallMemberFunction
	 *     Expression_AccessMemberOrArrayElement returns Expression_CallMemberFunction
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_CallMemberFunction
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_CallMemberFunction
	 *     Expression_VariableName returns Expression_CallMemberFunction
	 *
	 * Constraint:
	 *     (object=Expression_Functioncall_Expression_CallMemberFunction_1_0_1 memberFunctionName=ID arguments=Functioncall_Arguments)
	 */
	protected void sequence_Expression_Functioncall(ISerializationContext context, Expression_CallMemberFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_MEMBER_FUNCTION__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_MEMBER_FUNCTION__OBJECT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_MEMBER_FUNCTION__MEMBER_FUNCTION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_MEMBER_FUNCTION__MEMBER_FUNCTION_NAME));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_MEMBER_FUNCTION__ARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_CALL_MEMBER_FUNCTION__ARGUMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_FunctioncallAccess().getExpression_CallMemberFunctionObjectAction_1_0_1(), semanticObject.getObject());
		feeder.accept(grammarAccess.getExpression_FunctioncallAccess().getMemberFunctionNameIDTerminalRuleCall_1_0_2_0(), semanticObject.getMemberFunctionName());
		feeder.accept(grammarAccess.getExpression_FunctioncallAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_0_3_0(), semanticObject.getArguments());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Division
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Division
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Division
	 *     Expression returns Expression_Division
	 *     Expression_Or returns Expression_Division
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Division
	 *     Expression_And returns Expression_Division
	 *     Expression_And.Expression_And_1_1 returns Expression_Division
	 *     Expression_Compare returns Expression_Division
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Division
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Division
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Division
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Division
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Division
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Division
	 *     Expression_Concatenation returns Expression_Division
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Division
	 *     Expression_PlusMinus returns Expression_Division
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Division
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Division
	 *     Expression_MultiplicationDivisionModulo returns Expression_Division
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Division
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Division
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Division
	 *     Expression_Unary returns Expression_Division
	 *     Expression_Exponentiation returns Expression_Division
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Division
	 *     Expression_Terminal returns Expression_Division
	 *     Expression_Functioncall returns Expression_Division
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Division
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Division
	 *     Expression_AccessMemberOrArrayElement returns Expression_Division
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Division
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Division
	 *     Expression_VariableName returns Expression_Division
	 *
	 * Constraint:
	 *     (left=Expression_MultiplicationDivisionModulo_Expression_Division_1_1_1 right=Expression_Unary)
	 */
	protected void sequence_Expression_MultiplicationDivisionModulo(ISerializationContext context, Expression_Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_DIVISION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_DIVISION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_DIVISION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_DIVISION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_DivisionLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getRightExpression_UnaryParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Modulo
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Modulo
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Modulo
	 *     Expression returns Expression_Modulo
	 *     Expression_Or returns Expression_Modulo
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Modulo
	 *     Expression_And returns Expression_Modulo
	 *     Expression_And.Expression_And_1_1 returns Expression_Modulo
	 *     Expression_Compare returns Expression_Modulo
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Modulo
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Modulo
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Modulo
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Modulo
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Modulo
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Modulo
	 *     Expression_Concatenation returns Expression_Modulo
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Modulo
	 *     Expression_PlusMinus returns Expression_Modulo
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Modulo
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Modulo
	 *     Expression_MultiplicationDivisionModulo returns Expression_Modulo
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Modulo
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Modulo
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Modulo
	 *     Expression_Unary returns Expression_Modulo
	 *     Expression_Exponentiation returns Expression_Modulo
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Modulo
	 *     Expression_Terminal returns Expression_Modulo
	 *     Expression_Functioncall returns Expression_Modulo
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Modulo
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Modulo
	 *     Expression_AccessMemberOrArrayElement returns Expression_Modulo
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Modulo
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Modulo
	 *     Expression_VariableName returns Expression_Modulo
	 *
	 * Constraint:
	 *     (left=Expression_MultiplicationDivisionModulo_Expression_Modulo_1_2_1 right=Expression_Unary)
	 */
	protected void sequence_Expression_MultiplicationDivisionModulo(ISerializationContext context, Expression_Modulo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_MODULO__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_MODULO__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_MODULO__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_MODULO__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_ModuloLeftAction_1_2_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getRightExpression_UnaryParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Multiplication
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Multiplication
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Multiplication
	 *     Expression returns Expression_Multiplication
	 *     Expression_Or returns Expression_Multiplication
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Multiplication
	 *     Expression_And returns Expression_Multiplication
	 *     Expression_And.Expression_And_1_1 returns Expression_Multiplication
	 *     Expression_Compare returns Expression_Multiplication
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Multiplication
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Multiplication
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Multiplication
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Multiplication
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Multiplication
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Multiplication
	 *     Expression_Concatenation returns Expression_Multiplication
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Multiplication
	 *     Expression_PlusMinus returns Expression_Multiplication
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Multiplication
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Multiplication
	 *     Expression_MultiplicationDivisionModulo returns Expression_Multiplication
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Multiplication
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Multiplication
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Multiplication
	 *     Expression_Unary returns Expression_Multiplication
	 *     Expression_Exponentiation returns Expression_Multiplication
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Multiplication
	 *     Expression_Terminal returns Expression_Multiplication
	 *     Expression_Functioncall returns Expression_Multiplication
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Multiplication
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Multiplication
	 *     Expression_AccessMemberOrArrayElement returns Expression_Multiplication
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Multiplication
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Multiplication
	 *     Expression_VariableName returns Expression_Multiplication
	 *
	 * Constraint:
	 *     (left=Expression_MultiplicationDivisionModulo_Expression_Multiplication_1_0_1 right=Expression_Unary)
	 */
	protected void sequence_Expression_MultiplicationDivisionModulo(ISerializationContext context, Expression_Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_MULTIPLICATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_MULTIPLICATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_MULTIPLICATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_MULTIPLICATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_MultiplicationLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getRightExpression_UnaryParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Nil
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Nil
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Nil
	 *     Expression returns Expression_Nil
	 *     Expression_Or returns Expression_Nil
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Nil
	 *     Expression_And returns Expression_Nil
	 *     Expression_And.Expression_And_1_1 returns Expression_Nil
	 *     Expression_Compare returns Expression_Nil
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Nil
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Nil
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Nil
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Nil
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Nil
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Nil
	 *     Expression_Concatenation returns Expression_Nil
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Nil
	 *     Expression_PlusMinus returns Expression_Nil
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Nil
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Nil
	 *     Expression_MultiplicationDivisionModulo returns Expression_Nil
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Nil
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Nil
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Nil
	 *     Expression_Unary returns Expression_Nil
	 *     Expression_Exponentiation returns Expression_Nil
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Nil
	 *     Expression_Terminal returns Expression_Nil
	 *     Expression_Nil returns Expression_Nil
	 *     Expression_Functioncall returns Expression_Nil
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Nil
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Nil
	 *     Expression_AccessMemberOrArrayElement returns Expression_Nil
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Nil
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Nil
	 *     Expression_VariableName returns Expression_Nil
	 *
	 * Constraint:
	 *     {Expression_Nil}
	 */
	protected void sequence_Expression_Nil(ISerializationContext context, Expression_Nil semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Number
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Number
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Number
	 *     Expression returns Expression_Number
	 *     Expression_Or returns Expression_Number
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Number
	 *     Expression_And returns Expression_Number
	 *     Expression_And.Expression_And_1_1 returns Expression_Number
	 *     Expression_Compare returns Expression_Number
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Number
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Number
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Number
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Number
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Number
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Number
	 *     Expression_Concatenation returns Expression_Number
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Number
	 *     Expression_PlusMinus returns Expression_Number
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Number
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Number
	 *     Expression_MultiplicationDivisionModulo returns Expression_Number
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Number
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Number
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Number
	 *     Expression_Unary returns Expression_Number
	 *     Expression_Exponentiation returns Expression_Number
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Number
	 *     Expression_Terminal returns Expression_Number
	 *     Expression_Number returns Expression_Number
	 *     Expression_Functioncall returns Expression_Number
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Number
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Number
	 *     Expression_AccessMemberOrArrayElement returns Expression_Number
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Number
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Number
	 *     Expression_VariableName returns Expression_Number
	 *
	 * Constraint:
	 *     value=Double
	 */
	protected void sequence_Expression_Number(ISerializationContext context, Expression_Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_NumberAccess().getValueDoubleParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Or
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Or
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Or
	 *     Expression returns Expression_Or
	 *     Expression_Or returns Expression_Or
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Or
	 *     Expression_And returns Expression_Or
	 *     Expression_And.Expression_And_1_1 returns Expression_Or
	 *     Expression_Compare returns Expression_Or
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Or
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Or
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Or
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Or
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Or
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Or
	 *     Expression_Concatenation returns Expression_Or
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Or
	 *     Expression_PlusMinus returns Expression_Or
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Or
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Or
	 *     Expression_MultiplicationDivisionModulo returns Expression_Or
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Or
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Or
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Or
	 *     Expression_Unary returns Expression_Or
	 *     Expression_Exponentiation returns Expression_Or
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Or
	 *     Expression_Terminal returns Expression_Or
	 *     Expression_Functioncall returns Expression_Or
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Or
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Or
	 *     Expression_AccessMemberOrArrayElement returns Expression_Or
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Or
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Or
	 *     Expression_VariableName returns Expression_Or
	 *
	 * Constraint:
	 *     (left=Expression_Or_Expression_Or_1_1 right=Expression_And)
	 */
	protected void sequence_Expression_Or(ISerializationContext context, Expression_Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_OrAccess().getExpression_OrLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_OrAccess().getRightExpression_AndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Minus
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Minus
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Minus
	 *     Expression returns Expression_Minus
	 *     Expression_Or returns Expression_Minus
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Minus
	 *     Expression_And returns Expression_Minus
	 *     Expression_And.Expression_And_1_1 returns Expression_Minus
	 *     Expression_Compare returns Expression_Minus
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Minus
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Minus
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Minus
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Minus
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Minus
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Minus
	 *     Expression_Concatenation returns Expression_Minus
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Minus
	 *     Expression_PlusMinus returns Expression_Minus
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Minus
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Minus
	 *     Expression_MultiplicationDivisionModulo returns Expression_Minus
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Minus
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Minus
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Minus
	 *     Expression_Unary returns Expression_Minus
	 *     Expression_Exponentiation returns Expression_Minus
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Minus
	 *     Expression_Terminal returns Expression_Minus
	 *     Expression_Functioncall returns Expression_Minus
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Minus
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Minus
	 *     Expression_AccessMemberOrArrayElement returns Expression_Minus
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Minus
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Minus
	 *     Expression_VariableName returns Expression_Minus
	 *
	 * Constraint:
	 *     (left=Expression_PlusMinus_Expression_Minus_1_1_1 right=Expression_MultiplicationDivisionModulo)
	 */
	protected void sequence_Expression_PlusMinus(ISerializationContext context, Expression_Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_PlusMinusAccess().getExpression_MinusLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_PlusMinusAccess().getRightExpression_MultiplicationDivisionModuloParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Plus
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Plus
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Plus
	 *     Expression returns Expression_Plus
	 *     Expression_Or returns Expression_Plus
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Plus
	 *     Expression_And returns Expression_Plus
	 *     Expression_And.Expression_And_1_1 returns Expression_Plus
	 *     Expression_Compare returns Expression_Plus
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Plus
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Plus
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Plus
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Plus
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Plus
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Plus
	 *     Expression_Concatenation returns Expression_Plus
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Plus
	 *     Expression_PlusMinus returns Expression_Plus
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Plus
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Plus
	 *     Expression_MultiplicationDivisionModulo returns Expression_Plus
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Plus
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Plus
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Plus
	 *     Expression_Unary returns Expression_Plus
	 *     Expression_Exponentiation returns Expression_Plus
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Plus
	 *     Expression_Terminal returns Expression_Plus
	 *     Expression_Functioncall returns Expression_Plus
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Plus
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Plus
	 *     Expression_AccessMemberOrArrayElement returns Expression_Plus
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Plus
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Plus
	 *     Expression_VariableName returns Expression_Plus
	 *
	 * Constraint:
	 *     (left=Expression_PlusMinus_Expression_Plus_1_0_1 right=Expression_MultiplicationDivisionModulo)
	 */
	protected void sequence_Expression_PlusMinus(ISerializationContext context, Expression_Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_PlusMinusAccess().getExpression_PlusLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getExpression_PlusMinusAccess().getRightExpression_MultiplicationDivisionModuloParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_String
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_String
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_String
	 *     Expression returns Expression_String
	 *     Expression_Or returns Expression_String
	 *     Expression_Or.Expression_Or_1_1 returns Expression_String
	 *     Expression_And returns Expression_String
	 *     Expression_And.Expression_And_1_1 returns Expression_String
	 *     Expression_Compare returns Expression_String
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_String
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_String
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_String
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_String
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_String
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_String
	 *     Expression_Concatenation returns Expression_String
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_String
	 *     Expression_PlusMinus returns Expression_String
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_String
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_String
	 *     Expression_MultiplicationDivisionModulo returns Expression_String
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_String
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_String
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_String
	 *     Expression_Unary returns Expression_String
	 *     Expression_Exponentiation returns Expression_String
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_String
	 *     Expression_Terminal returns Expression_String
	 *     Expression_String returns Expression_String
	 *     Expression_Functioncall returns Expression_String
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_String
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_String
	 *     Expression_AccessMemberOrArrayElement returns Expression_String
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_String
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_String
	 *     Expression_VariableName returns Expression_String
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Expression_String(ISerializationContext context, Expression_String semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_StringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_TableConstructor
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_TableConstructor
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_TableConstructor
	 *     Expression returns Expression_TableConstructor
	 *     Expression_Or returns Expression_TableConstructor
	 *     Expression_Or.Expression_Or_1_1 returns Expression_TableConstructor
	 *     Expression_And returns Expression_TableConstructor
	 *     Expression_And.Expression_And_1_1 returns Expression_TableConstructor
	 *     Expression_Compare returns Expression_TableConstructor
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_TableConstructor
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_TableConstructor
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_TableConstructor
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_TableConstructor
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_TableConstructor
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_TableConstructor
	 *     Expression_Concatenation returns Expression_TableConstructor
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_TableConstructor
	 *     Expression_PlusMinus returns Expression_TableConstructor
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_TableConstructor
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_TableConstructor
	 *     Expression_MultiplicationDivisionModulo returns Expression_TableConstructor
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_TableConstructor
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_TableConstructor
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_TableConstructor
	 *     Expression_Unary returns Expression_TableConstructor
	 *     Expression_Exponentiation returns Expression_TableConstructor
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_TableConstructor
	 *     Expression_Terminal returns Expression_TableConstructor
	 *     Expression_TableConstructor returns Expression_TableConstructor
	 *     Expression_Functioncall returns Expression_TableConstructor
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_TableConstructor
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_TableConstructor
	 *     Expression_AccessMemberOrArrayElement returns Expression_TableConstructor
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_TableConstructor
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_TableConstructor
	 *     Expression_VariableName returns Expression_TableConstructor
	 *
	 * Constraint:
	 *     (fields+=Field fields+=Field*)?
	 */
	protected void sequence_Expression_TableConstructor(ISerializationContext context, Expression_TableConstructor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_True
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_True
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_True
	 *     Expression returns Expression_True
	 *     Expression_Or returns Expression_True
	 *     Expression_Or.Expression_Or_1_1 returns Expression_True
	 *     Expression_And returns Expression_True
	 *     Expression_And.Expression_And_1_1 returns Expression_True
	 *     Expression_Compare returns Expression_True
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_True
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_True
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_True
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_True
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_True
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_True
	 *     Expression_Concatenation returns Expression_True
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_True
	 *     Expression_PlusMinus returns Expression_True
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_True
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_True
	 *     Expression_MultiplicationDivisionModulo returns Expression_True
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_True
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_True
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_True
	 *     Expression_Unary returns Expression_True
	 *     Expression_Exponentiation returns Expression_True
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_True
	 *     Expression_Terminal returns Expression_True
	 *     Expression_True returns Expression_True
	 *     Expression_Functioncall returns Expression_True
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_True
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_True
	 *     Expression_AccessMemberOrArrayElement returns Expression_True
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_True
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_True
	 *     Expression_VariableName returns Expression_True
	 *
	 * Constraint:
	 *     {Expression_True}
	 */
	protected void sequence_Expression_True(ISerializationContext context, Expression_True semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Invert
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Invert
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Invert
	 *     Expression returns Expression_Invert
	 *     Expression_Or returns Expression_Invert
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Invert
	 *     Expression_And returns Expression_Invert
	 *     Expression_And.Expression_And_1_1 returns Expression_Invert
	 *     Expression_Compare returns Expression_Invert
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Invert
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Invert
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Invert
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Invert
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Invert
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Invert
	 *     Expression_Concatenation returns Expression_Invert
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Invert
	 *     Expression_PlusMinus returns Expression_Invert
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Invert
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Invert
	 *     Expression_MultiplicationDivisionModulo returns Expression_Invert
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Invert
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Invert
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Invert
	 *     Expression_Unary returns Expression_Invert
	 *     Expression_Exponentiation returns Expression_Invert
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Invert
	 *     Expression_Terminal returns Expression_Invert
	 *     Expression_Functioncall returns Expression_Invert
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Invert
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Invert
	 *     Expression_AccessMemberOrArrayElement returns Expression_Invert
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Invert
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Invert
	 *     Expression_VariableName returns Expression_Invert
	 *
	 * Constraint:
	 *     exp=Expression_Unary
	 */
	protected void sequence_Expression_Unary(ISerializationContext context, Expression_Invert semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_INVERT__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_INVERT__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_UnaryAccess().getExpExpression_UnaryParserRuleCall_3_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Length
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Length
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Length
	 *     Expression returns Expression_Length
	 *     Expression_Or returns Expression_Length
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Length
	 *     Expression_And returns Expression_Length
	 *     Expression_And.Expression_And_1_1 returns Expression_Length
	 *     Expression_Compare returns Expression_Length
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Length
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Length
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Length
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Length
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Length
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Length
	 *     Expression_Concatenation returns Expression_Length
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Length
	 *     Expression_PlusMinus returns Expression_Length
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Length
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Length
	 *     Expression_MultiplicationDivisionModulo returns Expression_Length
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Length
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Length
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Length
	 *     Expression_Unary returns Expression_Length
	 *     Expression_Exponentiation returns Expression_Length
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Length
	 *     Expression_Terminal returns Expression_Length
	 *     Expression_Functioncall returns Expression_Length
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Length
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Length
	 *     Expression_AccessMemberOrArrayElement returns Expression_Length
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Length
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Length
	 *     Expression_VariableName returns Expression_Length
	 *
	 * Constraint:
	 *     exp=Expression_Unary
	 */
	protected void sequence_Expression_Unary(ISerializationContext context, Expression_Length semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_LENGTH__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_LENGTH__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_UnaryAccess().getExpExpression_UnaryParserRuleCall_2_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_Negate
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_Negate
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_Negate
	 *     Expression returns Expression_Negate
	 *     Expression_Or returns Expression_Negate
	 *     Expression_Or.Expression_Or_1_1 returns Expression_Negate
	 *     Expression_And returns Expression_Negate
	 *     Expression_And.Expression_And_1_1 returns Expression_Negate
	 *     Expression_Compare returns Expression_Negate
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_Negate
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_Negate
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_Negate
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_Negate
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_Negate
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_Negate
	 *     Expression_Concatenation returns Expression_Negate
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_Negate
	 *     Expression_PlusMinus returns Expression_Negate
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_Negate
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_Negate
	 *     Expression_MultiplicationDivisionModulo returns Expression_Negate
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_Negate
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_Negate
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_Negate
	 *     Expression_Unary returns Expression_Negate
	 *     Expression_Exponentiation returns Expression_Negate
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_Negate
	 *     Expression_Terminal returns Expression_Negate
	 *     Expression_Functioncall returns Expression_Negate
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_Negate
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_Negate
	 *     Expression_AccessMemberOrArrayElement returns Expression_Negate
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_Negate
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_Negate
	 *     Expression_VariableName returns Expression_Negate
	 *
	 * Constraint:
	 *     exp=Expression_Unary
	 */
	protected void sequence_Expression_Unary(ISerializationContext context, Expression_Negate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_NEGATE__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_NEGATE__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_UnaryAccess().getExpExpression_UnaryParserRuleCall_1_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_VarArgs
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_VarArgs
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_VarArgs
	 *     Expression returns Expression_VarArgs
	 *     Expression_Or returns Expression_VarArgs
	 *     Expression_Or.Expression_Or_1_1 returns Expression_VarArgs
	 *     Expression_And returns Expression_VarArgs
	 *     Expression_And.Expression_And_1_1 returns Expression_VarArgs
	 *     Expression_Compare returns Expression_VarArgs
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_VarArgs
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_VarArgs
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_VarArgs
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_VarArgs
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_VarArgs
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_VarArgs
	 *     Expression_Concatenation returns Expression_VarArgs
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_VarArgs
	 *     Expression_PlusMinus returns Expression_VarArgs
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_VarArgs
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_VarArgs
	 *     Expression_MultiplicationDivisionModulo returns Expression_VarArgs
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_VarArgs
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_VarArgs
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_VarArgs
	 *     Expression_Unary returns Expression_VarArgs
	 *     Expression_Exponentiation returns Expression_VarArgs
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_VarArgs
	 *     Expression_Terminal returns Expression_VarArgs
	 *     Expression_VarArgs returns Expression_VarArgs
	 *     Expression_Functioncall returns Expression_VarArgs
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_VarArgs
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_VarArgs
	 *     Expression_AccessMemberOrArrayElement returns Expression_VarArgs
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_VarArgs
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_VarArgs
	 *     Expression_VariableName returns Expression_VarArgs
	 *
	 * Constraint:
	 *     {Expression_VarArgs}
	 */
	protected void sequence_Expression_VarArgs(ISerializationContext context, Expression_VarArgs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_FunctioncallOrAssignment.Statement_Assignment_1_0_0 returns Expression_VariableName
	 *     Statement_FunctioncallOrAssignment.Statement_CallMemberFunction_1_1_1 returns Expression_VariableName
	 *     Statement_FunctioncallOrAssignment.Statement_CallFunction_1_2_0 returns Expression_VariableName
	 *     Expression returns Expression_VariableName
	 *     Expression_Or returns Expression_VariableName
	 *     Expression_Or.Expression_Or_1_1 returns Expression_VariableName
	 *     Expression_And returns Expression_VariableName
	 *     Expression_And.Expression_And_1_1 returns Expression_VariableName
	 *     Expression_Compare returns Expression_VariableName
	 *     Expression_Compare.Expression_Larger_1_0_1 returns Expression_VariableName
	 *     Expression_Compare.Expression_Larger_Equal_1_1_1 returns Expression_VariableName
	 *     Expression_Compare.Expression_Smaller_1_2_1 returns Expression_VariableName
	 *     Expression_Compare.Expression_Smaller_Equal_1_3_1 returns Expression_VariableName
	 *     Expression_Compare.Expression_Equal_1_4_1 returns Expression_VariableName
	 *     Expression_Compare.Expression_Not_Equal_1_5_1 returns Expression_VariableName
	 *     Expression_Concatenation returns Expression_VariableName
	 *     Expression_Concatenation.Expression_Concatenation_1_1 returns Expression_VariableName
	 *     Expression_PlusMinus returns Expression_VariableName
	 *     Expression_PlusMinus.Expression_Plus_1_0_1 returns Expression_VariableName
	 *     Expression_PlusMinus.Expression_Minus_1_1_1 returns Expression_VariableName
	 *     Expression_MultiplicationDivisionModulo returns Expression_VariableName
	 *     Expression_MultiplicationDivisionModulo.Expression_Multiplication_1_0_1 returns Expression_VariableName
	 *     Expression_MultiplicationDivisionModulo.Expression_Division_1_1_1 returns Expression_VariableName
	 *     Expression_MultiplicationDivisionModulo.Expression_Modulo_1_2_1 returns Expression_VariableName
	 *     Expression_Unary returns Expression_VariableName
	 *     Expression_Exponentiation returns Expression_VariableName
	 *     Expression_Exponentiation.Expression_Exponentiation_1_1 returns Expression_VariableName
	 *     Expression_Terminal returns Expression_VariableName
	 *     Expression_Functioncall returns Expression_VariableName
	 *     Expression_Functioncall.Expression_CallMemberFunction_1_0_1 returns Expression_VariableName
	 *     Expression_Functioncall.Expression_CallFunction_1_1_0 returns Expression_VariableName
	 *     Expression_AccessMemberOrArrayElement returns Expression_VariableName
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessArray_1_0_1 returns Expression_VariableName
	 *     Expression_AccessMemberOrArrayElement.Expression_AccessMember_1_1_1 returns Expression_VariableName
	 *     Expression_VariableName returns Expression_VariableName
	 *
	 * Constraint:
	 *     variable=ID
	 */
	protected void sequence_Expression_VariableName(ISerializationContext context, Expression_VariableName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.EXPRESSION_VARIABLE_NAME__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.EXPRESSION_VARIABLE_NAME__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpression_VariableNameAccess().getVariableIDTerminalRuleCall_1_1_0(), semanticObject.getVariable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field_AddEntryToTable_Brackets
	 *     Field_AddEntryToTable_Brackets returns Field_AddEntryToTable_Brackets
	 *
	 * Constraint:
	 *     (indexExpression=Expression value=Expression)
	 */
	protected void sequence_Field_AddEntryToTable_Brackets(ISerializationContext context, Field_AddEntryToTable_Brackets semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.FIELD_ADD_ENTRY_TO_TABLE_BRACKETS__INDEX_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.FIELD_ADD_ENTRY_TO_TABLE_BRACKETS__INDEX_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getField_AddEntryToTable_BracketsAccess().getIndexExpressionExpressionParserRuleCall_1_0(), semanticObject.getIndexExpression());
		feeder.accept(grammarAccess.getField_AddEntryToTable_BracketsAccess().getValueExpressionParserRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field_AddEntryToTable
	 *     Field_AddEntryToTable returns Field_AddEntryToTable
	 *
	 * Constraint:
	 *     (key=ID value=Expression)
	 */
	protected void sequence_Field_AddEntryToTable(ISerializationContext context, Field_AddEntryToTable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.FIELD_ADD_ENTRY_TO_TABLE__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.FIELD_ADD_ENTRY_TO_TABLE__KEY));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getField_AddEntryToTableAccess().getKeyIDTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getField_AddEntryToTableAccess().getValueExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field_AppendEntryToTable
	 *     Field_AppendEntryToTable returns Field_AppendEntryToTable
	 *
	 * Constraint:
	 *     value=Expression
	 */
	protected void sequence_Field_AppendEntryToTable(ISerializationContext context, Field_AppendEntryToTable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getField_AppendEntryToTableAccess().getValueExpressionParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (name=ID incoming+=[ActivityEdge|ID] (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)?)
	 */
	protected void sequence_ForkNode(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     ((parameters+=ID parameters+=ID*)? varArgs?='...'? body=Block)
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Functioncall_Arguments returns Functioncall_Arguments
	 *
	 * Constraint:
	 *     ((arguments+=Expression arguments+=Expression*) | arguments+=Expression_TableConstructor | arguments+=Expression_String)?
	 */
	protected void sequence_Functioncall_Arguments(ISerializationContext context, Functioncall_Arguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IdlStmt returns IdlStmtBindBlock
	 *
	 * Constraint:
	 *     delegate=Block
	 */
	protected void sequence_IdlStmt(ISerializationContext context, IdlStmtBindBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.IDL_STMT_BIND_BLOCK__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.IDL_STMT_BIND_BLOCK__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdlStmtAccess().getDelegateBlockParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns InitialNode
	 *     InitialNode returns InitialNode
	 *
	 * Constraint:
	 *     (name=ID outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Value returns IntegerValue
	 *     IntegerValue returns IntegerValue
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_IntegerValue(ISerializationContext context, IntegerValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerValueAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns IntegerVariableBindStatement_Assignment
	 *     IntegerVariable returns IntegerVariableBindStatement_Assignment
	 *
	 * Constraint:
	 *     delegate=Statement_FunctioncallOrAssignment
	 */
	protected void sequence_IntegerVariable(ISerializationContext context, IntegerVariableBindStatement_Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.INTEGER_VARIABLE_BIND_STATEMENT_ASSIGNMENT__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.INTEGER_VARIABLE_BIND_STATEMENT_ASSIGNMENT__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerVariableAccess().getDelegateStatement_FunctioncallOrAssignmentParserRuleCall_2_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IotActivity returns IotActivityBindActivity
	 *
	 * Constraint:
	 *     delegate=Activity
	 */
	protected void sequence_IotActivity(ISerializationContext context, IotActivityBindActivity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.IOT_ACTIVITY_BIND_ACTIVITY__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.IOT_ACTIVITY_BIND_ACTIVITY__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIotActivityAccess().getDelegateActivityParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IotOperationDef returns IotOperationDefBindOperationDef
	 *
	 * Constraint:
	 *     delegate=OperationDef
	 */
	protected void sequence_IotOperationDef(ISerializationContext context, IotOperationDefBindOperationDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Iot_luaPackage.Literals.IOT_OPERATION_DEF_BIND_OPERATION_DEF__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Iot_luaPackage.Literals.IOT_OPERATION_DEF_BIND_OPERATION_DEF__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIotOperationDefAccess().getDelegateOperationDefParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (name=ID (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? outgoing+=[ActivityEdge|ID])
	 */
	protected void sequence_JoinNode(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LastStatement returns LastStatement_Break
	 *     LastStatement_Break returns LastStatement_Break
	 *
	 * Constraint:
	 *     {LastStatement_Break}
	 */
	protected void sequence_LastStatement_Break(ISerializationContext context, LastStatement_Break semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LastStatement returns LastStatement_ReturnWithValue
	 *     LastStatement_Return returns LastStatement_ReturnWithValue
	 *
	 * Constraint:
	 *     (returnValues+=Expression returnValues+=Expression*)?
	 */
	protected void sequence_LastStatement_Return(ISerializationContext context, LastStatement_ReturnWithValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (name=ID (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? outgoing+=[ActivityEdge|ID])
	 */
	protected void sequence_MergeNode(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns OpaqueAction
	 *     OpaqueAction returns OpaqueAction
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (expressions+=ExpBindStatement expressions+=ExpBindStatement*)? 
	 *         (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? 
	 *         (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)? 
	 *         expressions+=ExpBindOpDef?
	 *     )
	 */
	protected void sequence_OpaqueAction(ISerializationContext context, OpaqueAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationDef returns OperationDef
	 *
	 * Constraint:
	 *     (identifier=ID (parameters+=ParameterDef parameters+=ParameterDef*)? stmt=IdlStmt)
	 */
	protected void sequence_OperationDef(ISerializationContext context, OperationDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterDef returns ParameterDef
	 *
	 * Constraint:
	 *     (direction=param_attribute identifier=ID)
	 */
	protected void sequence_ParameterDef(ISerializationContext context, ParameterDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__DIRECTION));
			if (transientValues.isValueTransient(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__IDENTIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__IDENTIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterDefAccess().getDirectionParam_attributeEnumRuleCall_0_0(), semanticObject.getDirection());
		feeder.accept(grammarAccess.getParameterDefAccess().getIdentifierIDTerminalRuleCall_1_0(), semanticObject.getIdentifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HWComponent returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=ID services+=IotOperationDef*)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sketch returns Sketch
	 *
	 * Constraint:
	 *     activity=IotActivity
	 */
	protected void sequence_Sketch(ISerializationContext context, Sketch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.SKETCH__ACTIVITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.SKETCH__ACTIVITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSketchAccess().getActivityIotActivityParserRuleCall_3_0(), semanticObject.getActivity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_Block
	 *     Statement_Block returns Statement_Block
	 *
	 * Constraint:
	 *     block=Block
	 */
	protected void sequence_Statement_Block(ISerializationContext context, Statement_Block semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_BLOCK__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_BLOCK__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_BlockAccess().getBlockBlockParserRuleCall_1_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_For_Generic
	 *     Statement_For_Generic returns Statement_For_Generic
	 *
	 * Constraint:
	 *     (names+=ID names+=ID* expressions+=Expression expressions+=Expression* block=Block)
	 */
	protected void sequence_Statement_For_Generic(ISerializationContext context, Statement_For_Generic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_For_Numeric
	 *     Statement_For_Numeric returns Statement_For_Numeric
	 *
	 * Constraint:
	 *     (iteratorName=ID startExpr=Expression untilExpr=Expression stepExpr=Expression? block=Block)
	 */
	protected void sequence_Statement_For_Numeric(ISerializationContext context, Statement_For_Numeric semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_Assignment
	 *     Statement_FunctioncallOrAssignment returns Statement_Assignment
	 *
	 * Constraint:
	 *     (
	 *         variable+=Statement_FunctioncallOrAssignment_Statement_Assignment_1_0_0 
	 *         variable+=Expression_AccessMemberOrArrayElement* 
	 *         values+=Expression 
	 *         values+=Expression*
	 *     )
	 */
	protected void sequence_Statement_FunctioncallOrAssignment(ISerializationContext context, Statement_Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_CallFunction
	 *     Statement_FunctioncallOrAssignment returns Statement_CallFunction
	 *
	 * Constraint:
	 *     (object=Statement_FunctioncallOrAssignment_Statement_CallFunction_1_2_0 arguments=Functioncall_Arguments)
	 */
	protected void sequence_Statement_FunctioncallOrAssignment(ISerializationContext context, Statement_CallFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_CALL_FUNCTION__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_CALL_FUNCTION__OBJECT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_CALL_FUNCTION__ARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_CALL_FUNCTION__ARGUMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getStatement_CallFunctionObjectAction_1_2_0(), semanticObject.getObject());
		feeder.accept(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_2_1_0(), semanticObject.getArguments());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_CallMemberFunction
	 *     Statement_FunctioncallOrAssignment returns Statement_CallMemberFunction
	 *
	 * Constraint:
	 *     (object=Statement_FunctioncallOrAssignment_Statement_CallMemberFunction_1_1_1 memberFunctionName=ID arguments=Functioncall_Arguments)
	 */
	protected void sequence_Statement_FunctioncallOrAssignment(ISerializationContext context, Statement_CallMemberFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_CALL_MEMBER_FUNCTION__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_CALL_MEMBER_FUNCTION__OBJECT));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_CALL_MEMBER_FUNCTION__MEMBER_FUNCTION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_CALL_MEMBER_FUNCTION__MEMBER_FUNCTION_NAME));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_CALL_MEMBER_FUNCTION__ARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_CALL_MEMBER_FUNCTION__ARGUMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getStatement_CallMemberFunctionObjectAction_1_1_1(), semanticObject.getObject());
		feeder.accept(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getMemberFunctionNameIDTerminalRuleCall_1_1_2_0(), semanticObject.getMemberFunctionName());
		feeder.accept(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_3_0(), semanticObject.getArguments());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_GlobalFunction_Declaration
	 *     Statement_GlobalFunction_Declaration returns Statement_GlobalFunction_Declaration
	 *
	 * Constraint:
	 *     (prefix+=ID prefix+=ID* functionName=ID? function=Function)
	 */
	protected void sequence_Statement_GlobalFunction_Declaration(ISerializationContext context, Statement_GlobalFunction_Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement_If_Then_Else_ElseIfPart returns Statement_If_Then_Else_ElseIfPart
	 *
	 * Constraint:
	 *     (elseifExpression=Expression elseifBlock=Block)
	 */
	protected void sequence_Statement_If_Then_Else_ElseIfPart(ISerializationContext context, Statement_If_Then_Else_ElseIfPart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_IF_THEN_ELSE_ELSE_IF_PART__ELSEIF_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_IF_THEN_ELSE_ELSE_IF_PART__ELSEIF_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_IF_THEN_ELSE_ELSE_IF_PART__ELSEIF_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_IF_THEN_ELSE_ELSE_IF_PART__ELSEIF_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_If_Then_Else_ElseIfPartAccess().getElseifExpressionExpressionParserRuleCall_1_0(), semanticObject.getElseifExpression());
		feeder.accept(grammarAccess.getStatement_If_Then_Else_ElseIfPartAccess().getElseifBlockBlockParserRuleCall_3_0(), semanticObject.getElseifBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_If_Then_Else
	 *     Statement_If_Then_Else returns Statement_If_Then_Else
	 *
	 * Constraint:
	 *     (ifExpression=Expression ifBlock=Block elseIf+=Statement_If_Then_Else_ElseIfPart* elseBlock=Block?)
	 */
	protected void sequence_Statement_If_Then_Else(ISerializationContext context, Statement_If_Then_Else semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_LocalFunction_Declaration
	 *     Statement_LocalFunction_Declaration returns Statement_LocalFunction_Declaration
	 *
	 * Constraint:
	 *     (functionName=ID function=Function)
	 */
	protected void sequence_Statement_LocalFunction_Declaration(ISerializationContext context, Statement_LocalFunction_Declaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_LOCAL_FUNCTION_DECLARATION__FUNCTION_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_LOCAL_FUNCTION_DECLARATION__FUNCTION_NAME));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_LOCAL_FUNCTION_DECLARATION__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_LOCAL_FUNCTION_DECLARATION__FUNCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_LocalFunction_DeclarationAccess().getFunctionNameIDTerminalRuleCall_2_0(), semanticObject.getFunctionName());
		feeder.accept(grammarAccess.getStatement_LocalFunction_DeclarationAccess().getFunctionFunctionParserRuleCall_3_0(), semanticObject.getFunction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_Local_Variable_Declaration
	 *     Statement_Local_Variable_Declaration returns Statement_Local_Variable_Declaration
	 *
	 * Constraint:
	 *     (variableNames+=ID variableNames+=ID* (initialValue+=Expression initialValue+=Expression*)?)
	 */
	protected void sequence_Statement_Local_Variable_Declaration(ISerializationContext context, Statement_Local_Variable_Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_Repeat
	 *     Statement_Repeat returns Statement_Repeat
	 *
	 * Constraint:
	 *     (block=Block expression=Expression)
	 */
	protected void sequence_Statement_Repeat(ISerializationContext context, Statement_Repeat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_REPEAT__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_REPEAT__BLOCK));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_REPEAT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_REPEAT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_RepeatAccess().getBlockBlockParserRuleCall_1_0(), semanticObject.getBlock());
		feeder.accept(grammarAccess.getStatement_RepeatAccess().getExpressionExpressionParserRuleCall_3_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement_While
	 *     Statement_While returns Statement_While
	 *
	 * Constraint:
	 *     (expression=Expression block=Block)
	 */
	protected void sequence_Statement_While(ISerializationContext context, Statement_While semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_WHILE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_WHILE__EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, LuaPackage.Literals.STATEMENT_WHILE__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LuaPackage.Literals.STATEMENT_WHILE__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStatement_WhileAccess().getExpressionExpressionParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getStatement_WhileAccess().getBlockBlockParserRuleCall_3_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (name=ID (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)? sketch=Sketch?)
	 */
	protected void sequence_System(ISerializationContext context, iot.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     charstr_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (kind=char_type | kind=wide_char_type | kind=string_type | kind=wide_string_type)
	 */
	protected void sequence_charstr_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveDef returns PrimitiveDef
	 *
	 * Constraint:
	 *     (
	 *         kind=float_type | 
	 *         kind=double_type | 
	 *         kind=longdouble_type | 
	 *         kind=short_type | 
	 *         kind=long_type | 
	 *         kind=longlong_type | 
	 *         kind=ushort_type | 
	 *         kind=ulong_type | 
	 *         kind=ulonglong_type | 
	 *         kind=char_type | 
	 *         kind=wide_char_type | 
	 *         kind=string_type | 
	 *         kind=wide_string_type | 
	 *         kind=boolean_type | 
	 *         kind=octet_type | 
	 *         kind=any_type
	 *     )
	 */
	protected void sequence_charstr_type_floating_pt_type_integer_type_other_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     floating_pt_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (kind=float_type | kind=double_type | kind=longdouble_type)
	 */
	protected void sequence_floating_pt_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     integer_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (
	 *         kind=short_type | 
	 *         kind=long_type | 
	 *         kind=longlong_type | 
	 *         kind=ushort_type | 
	 *         kind=ulong_type | 
	 *         kind=ulonglong_type
	 *     )
	 */
	protected void sequence_integer_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     other_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (kind=boolean_type | kind=octet_type | kind=any_type)
	 */
	protected void sequence_other_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

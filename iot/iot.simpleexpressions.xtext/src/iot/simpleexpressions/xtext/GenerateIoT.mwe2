module iot.simpleexpressions.xtext.GenerateIoT

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."

Workflow {
	
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "iot.simpleexpressions.xtext"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "iot.simpleexpressions.xtext.IoT"
			fileExtensions = "iot"
			referencedResource = "platform:/resource/iot.model/model/iot.genmodel"
			referencedResource = "platform:/resource/org.csu.idl.idlmm/model/IDLMM.genmodel"
			referencedResource = "platform:/resource/SimpleALEnv/model/simpleALEnv.genmodel"
			referencedResource = "platform:/resource/org.xtext.activitydiagram.model/model/activitydiagram.genmodel"
			referencedResource = "platform:/resource/simpleexpressions.model/model/simpleexpressions.genmodel"
			referencedResource = "platform:/resource/iot.simpleexpression.model/model/model.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			formatter = {
				generateStub = true
			}

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			parserGenerator = {
				options = {
					backtrack = true
				}
			}
		}
	}
}

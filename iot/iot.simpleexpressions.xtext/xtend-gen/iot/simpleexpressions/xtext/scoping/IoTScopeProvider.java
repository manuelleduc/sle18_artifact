/**
 * generated by Xtext 2.12.0
 */
package iot.simpleexpressions.xtext.scoping;

import activitydiagram.ActivitydiagramPackage;
import activitydiagram.BooleanVariable;
import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import idlmm.OperationDef;
import iot.HWComp;
import iot.IotOperationDef;
import iot.Sketch;
import iot.simpleexpressions.xtext.scoping.AbstractIoTScopeProvider;
import java.util.List;
import model.BooleanVariableBindSEBooleanVariable;
import model.IotOperationDefBindOperationDef;
import model.ModelPackage;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import simpleexpressions.SEBooleanVariable;
import simpleexpressions.SimpleexpressionsPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class IoTScopeProvider extends AbstractIoTScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _equals = Objects.equal(reference, SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE);
    if (_equals) {
      final Sketch sketch = EcoreUtil2.<Sketch>getContainerOfType(context, Sketch.class);
      final List<BooleanVariable> variables = EcoreUtil2.<BooleanVariable>getAllContentsOfType(sketch, BooleanVariable.class);
      final Function1<BooleanVariable, IEObjectDescription> _function = (BooleanVariable it) -> {
        IEObjectDescription _xblockexpression = null;
        {
          final BooleanVariableBindSEBooleanVariable od = ((BooleanVariableBindSEBooleanVariable) it);
          SEBooleanVariable _delegate = od.getDelegate();
          final String name = ((SEBooleanVariable) _delegate).getName();
          _xblockexpression = EObjectDescription.create(name, od.getDelegate());
        }
        return _xblockexpression;
      };
      return MapBasedScope.createScope(IScope.NULLSCOPE, ListExtensions.<BooleanVariable, IEObjectDescription>map(variables, _function));
    } else {
      boolean _equals_1 = Objects.equal(reference, ModelPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE);
      if (_equals_1) {
        final iot.System system = EcoreUtil2.<iot.System>getContainerOfType(context, iot.System.class);
        final Function1<HWComp, EList<IotOperationDef>> _function_1 = (HWComp it) -> {
          return it.getServices();
        };
        final Function1<IotOperationDef, IotOperationDefBindOperationDef> _function_2 = (IotOperationDef it) -> {
          return ((IotOperationDefBindOperationDef) it);
        };
        final Function1<IotOperationDefBindOperationDef, OperationDef> _function_3 = (IotOperationDefBindOperationDef it) -> {
          return it.getDelegate();
        };
        final Iterable<OperationDef> operations = IterableExtensions.<IotOperationDefBindOperationDef, OperationDef>map(IterableExtensions.<IotOperationDef, IotOperationDefBindOperationDef>map(Iterables.<IotOperationDef>concat(ListExtensions.<HWComp, EList<IotOperationDef>>map(system.getComponents(), _function_1)), _function_2), _function_3);
        final Function1<OperationDef, IEObjectDescription> _function_4 = (OperationDef it) -> {
          IEObjectDescription _xblockexpression = null;
          {
            final OperationDef od = ((OperationDef) it);
            _xblockexpression = EObjectDescription.create(od.getIdentifier(), od);
          }
          return _xblockexpression;
        };
        return MapBasedScope.createScope(IScope.NULLSCOPE, IterableExtensions.<OperationDef, IEObjectDescription>map(operations, _function_4));
      } else {
        boolean _equals_2 = Objects.equal(reference, ActivitydiagramPackage.Literals.CONTROL_FLOW__GUARD);
        if (_equals_2) {
          final Sketch sketch_1 = EcoreUtil2.<Sketch>getContainerOfType(context, Sketch.class);
          final List<BooleanVariable> variables_1 = EcoreUtil2.<BooleanVariable>getAllContentsOfType(sketch_1, BooleanVariable.class);
          final Function1<BooleanVariable, IEObjectDescription> _function_5 = (BooleanVariable it) -> {
            IEObjectDescription _xblockexpression = null;
            {
              final BooleanVariableBindSEBooleanVariable od = ((BooleanVariableBindSEBooleanVariable) it);
              SEBooleanVariable _delegate = od.getDelegate();
              final SEBooleanVariable bvar = ((SEBooleanVariable) _delegate);
              _xblockexpression = EObjectDescription.create(bvar.getName(), od);
            }
            return _xblockexpression;
          };
          return MapBasedScope.createScope(IScope.NULLSCOPE, ListExtensions.<BooleanVariable, IEObjectDescription>map(variables_1, _function_5));
        }
      }
    }
    return super.getScope(context, reference);
  }
}

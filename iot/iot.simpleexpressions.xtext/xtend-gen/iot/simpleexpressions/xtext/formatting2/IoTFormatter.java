/**
 * generated by Xtext 2.12.0
 */
package iot.simpleexpressions.xtext.formatting2;

import com.google.inject.Inject;
import iot.Board;
import iot.HWComp;
import iot.IotOperationDef;
import iot.Sensor;
import iot.Sketch;
import iot.simpleexpressions.xtext.services.IoTGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class IoTFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private IoTGrammarAccess _ioTGrammarAccess;
  
  protected void _format(final iot.System system, @Extension final IFormattableDocument document) {
    EList<HWComp> _components = system.getComponents();
    for (final HWComp hWComp : _components) {
      document.<HWComp>format(hWComp);
    }
    EList<Board> _boards = system.getBoards();
    for (final Board board : _boards) {
      document.<Board>format(board);
    }
    document.<Sketch>format(system.getSketch());
  }
  
  protected void _format(final Sensor sensor, @Extension final IFormattableDocument document) {
    EList<IotOperationDef> _services = sensor.getServices();
    for (final IotOperationDef iotOperationDef : _services) {
      document.<IotOperationDef>format(iotOperationDef);
    }
  }
  
  public void format(final Object sensor, final IFormattableDocument document) {
    if (sensor instanceof XtextResource) {
      _format((XtextResource)sensor, document);
      return;
    } else if (sensor instanceof Sensor) {
      _format((Sensor)sensor, document);
      return;
    } else if (sensor instanceof iot.System) {
      _format((iot.System)sensor, document);
      return;
    } else if (sensor instanceof EObject) {
      _format((EObject)sensor, document);
      return;
    } else if (sensor == null) {
      _format((Void)null, document);
      return;
    } else if (sensor != null) {
      _format(sensor, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(sensor, document).toString());
    }
  }
}

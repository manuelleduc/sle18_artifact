/*
 * generated by Xtext 2.12.0
 */
package iot.simpleexpressions.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IoTGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cComponentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cComponentsHWComponentParserRuleCall_3_0_0 = (RuleCall)cComponentsAssignment_3_0.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cComponentsHWComponentParserRuleCall_3_1_0 = (RuleCall)cComponentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cBoardsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cBoardsBoardParserRuleCall_4_0_0 = (RuleCall)cBoardsAssignment_4_0.eContents().get(0);
		private final Assignment cBoardsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBoardsBoardParserRuleCall_4_1_0 = (RuleCall)cBoardsAssignment_4_1.eContents().get(0);
		private final Assignment cSketchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSketchSketchParserRuleCall_5_0 = (RuleCall)cSketchAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//System iot::System:
		//	'system' name=ID '{' (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)?
		//	sketch=Sketch?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=ID '{' (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)? sketch=Sketch?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(components+=HWComponent components+=HWComponent*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//components+=HWComponent
		public Assignment getComponentsAssignment_3_0() { return cComponentsAssignment_3_0; }
		
		//HWComponent
		public RuleCall getComponentsHWComponentParserRuleCall_3_0_0() { return cComponentsHWComponentParserRuleCall_3_0_0; }
		
		//components+=HWComponent*
		public Assignment getComponentsAssignment_3_1() { return cComponentsAssignment_3_1; }
		
		//HWComponent
		public RuleCall getComponentsHWComponentParserRuleCall_3_1_0() { return cComponentsHWComponentParserRuleCall_3_1_0; }
		
		//(boards+=Board boards+=Board*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//boards+=Board
		public Assignment getBoardsAssignment_4_0() { return cBoardsAssignment_4_0; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_4_0_0() { return cBoardsBoardParserRuleCall_4_0_0; }
		
		//boards+=Board*
		public Assignment getBoardsAssignment_4_1() { return cBoardsAssignment_4_1; }
		
		//Board
		public RuleCall getBoardsBoardParserRuleCall_4_1_0() { return cBoardsBoardParserRuleCall_4_1_0; }
		
		//sketch=Sketch?
		public Assignment getSketchAssignment_5() { return cSketchAssignment_5; }
		
		//Sketch
		public RuleCall getSketchSketchParserRuleCall_5_0() { return cSketchSketchParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class HWComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.HWComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HWComponent iot::HWComp:
		//	Sensor | Actuator;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actuator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_1() { return cActuatorParserRuleCall_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cProvidesKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cServicesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cServicesIotOperationDefParserRuleCall_2_1_1_0 = (RuleCall)cServicesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Sensor iot::Sensor:
		//	'sensor' name=ID ('{' ('provides' services+=IotOperationDef)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID ('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//('provides' services+=IotOperationDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_1_0() { return cProvidesKeyword_2_1_0; }
		
		//services+=IotOperationDef
		public Assignment getServicesAssignment_2_1_1() { return cServicesAssignment_2_1_1; }
		
		//IotOperationDef
		public RuleCall getServicesIotOperationDefParserRuleCall_2_1_1_0() { return cServicesIotOperationDefParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cProvidesKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cServicesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cServicesIotOperationDefParserRuleCall_2_1_1_0 = (RuleCall)cServicesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Actuator iot::Actuator:
		//	'actuator' name=ID ('{' ('provides' services+=IotOperationDef)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'actuator' name=ID ('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup() { return cGroup; }
		
		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{' ('provides' services+=IotOperationDef)* '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//('provides' services+=IotOperationDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'provides'
		public Keyword getProvidesKeyword_2_1_0() { return cProvidesKeyword_2_1_0; }
		
		//services+=IotOperationDef
		public Assignment getServicesAssignment_2_1_1() { return cServicesAssignment_2_1_1; }
		
		//IotOperationDef
		public RuleCall getServicesIotOperationDefParserRuleCall_2_1_1_0() { return cServicesIotOperationDefParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}
	public class BoardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Board");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeBoardTypeEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cProvidesKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cComponentsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cComponentsHWCompCrossReference_6_1_1_0 = (CrossReference)cComponentsAssignment_6_1_1.eContents().get(0);
		private final RuleCall cComponentsHWCompIDTerminalRuleCall_6_1_1_0_1 = (RuleCall)cComponentsHWCompCrossReference_6_1_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Board iot::Board:
		//	{iot::Board}
		//	'board' name=ID '[' type=BoardType ']' ('{' ('provides' components+=[iot::HWComp])*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot::Board} 'board' name=ID '[' type=BoardType ']' ('{' ('provides' components+=[iot::HWComp])* '}')?
		public Group getGroup() { return cGroup; }
		
		//{iot::Board}
		public Action getBoardAction_0() { return cBoardAction_0; }
		
		//'board'
		public Keyword getBoardKeyword_1() { return cBoardKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		//type=BoardType
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//BoardType
		public RuleCall getTypeBoardTypeEnumRuleCall_4_0() { return cTypeBoardTypeEnumRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
		
		//('{' ('provides' components+=[iot::HWComp])* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//('provides' components+=[iot::HWComp])*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'provides'
		public Keyword getProvidesKeyword_6_1_0() { return cProvidesKeyword_6_1_0; }
		
		//components+=[iot::HWComp]
		public Assignment getComponentsAssignment_6_1_1() { return cComponentsAssignment_6_1_1; }
		
		//[iot::HWComp]
		public CrossReference getComponentsHWCompCrossReference_6_1_1_0() { return cComponentsHWCompCrossReference_6_1_1_0; }
		
		//ID
		public RuleCall getComponentsHWCompIDTerminalRuleCall_6_1_1_0_1() { return cComponentsHWCompIDTerminalRuleCall_6_1_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}
	public class SketchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Sketch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSketchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSketchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivityIotActivityParserRuleCall_3_0 = (RuleCall)cActivityAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sketch iot::Sketch:
		//	{iot::Sketch}
		//	'sketch'
		//	'{'
		//	activity=IotActivity
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{iot::Sketch} 'sketch' '{' activity=IotActivity '}'
		public Group getGroup() { return cGroup; }
		
		//{iot::Sketch}
		public Action getSketchAction_0() { return cSketchAction_0; }
		
		//'sketch'
		public Keyword getSketchKeyword_1() { return cSketchKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//activity=IotActivity
		public Assignment getActivityAssignment_3() { return cActivityAssignment_3; }
		
		//IotActivity
		public RuleCall getActivityIotActivityParserRuleCall_3_0() { return cActivityIotActivityParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IotOperationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IotOperationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIotOperationDefBindOperationDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateOperationDefParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//IotOperationDef iot::IotOperationDef:
		//	{iot_se::IotOperationDefBindOperationDef} delegate=OperationDef;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::IotOperationDefBindOperationDef} delegate=OperationDef
		public Group getGroup() { return cGroup; }
		
		//{iot_se::IotOperationDefBindOperationDef}
		public Action getIotOperationDefBindOperationDefAction_0() { return cIotOperationDefBindOperationDefAction_0; }
		
		//delegate=OperationDef
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//OperationDef
		public RuleCall getDelegateOperationDefParserRuleCall_1_0() { return cDelegateOperationDefParserRuleCall_1_0; }
	}
	public class OperationDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.OperationDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterDefParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterDefParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStmtAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStmtIdlStmtParserRuleCall_6_0 = (RuleCall)cStmtAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OperationDef idlmm::OperationDef:
		//	'operation'
		//	identifier=ID
		//	'(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')'
		//	'{'
		//	stmt=IdlStmt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' identifier=ID '(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')' '{' stmt=IdlStmt '}'
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=ParameterDef (',' parameters+=ParameterDef)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=ParameterDef
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_3_0_0() { return cParametersParameterDefParserRuleCall_3_0_0; }
		
		//(',' parameters+=ParameterDef)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=ParameterDef
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//ParameterDef
		public RuleCall getParametersParameterDefParserRuleCall_3_1_1_0() { return cParametersParameterDefParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//stmt=IdlStmt
		public Assignment getStmtAssignment_6() { return cStmtAssignment_6; }
		
		//IdlStmt
		public RuleCall getStmtIdlStmtParserRuleCall_6_0() { return cStmtIdlStmtParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class IdlStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IdlStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdlStmtBindBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateBlockParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//IdlStmt idlmm::IdlStmt:
		//	{iot_se::IdlStmtBindBlock} delegate=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::IdlStmtBindBlock} delegate=Block
		public Group getGroup() { return cGroup; }
		
		//{iot_se::IdlStmtBindBlock}
		public Action getIdlStmtBindBlockAction_0() { return cIdlStmtBindBlockAction_0; }
		
		//delegate=Block
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//Block
		public RuleCall getDelegateBlockParserRuleCall_1_0() { return cDelegateBlockParserRuleCall_1_0; }
	}
	public class ParameterDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ParameterDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionParam_attributeEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//ParameterDef idlmm::ParameterDef:
		//	direction=param_attribute
		//	identifier=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=param_attribute identifier=ID
		public Group getGroup() { return cGroup; }
		
		//direction=param_attribute
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//param_attribute
		public RuleCall getDirectionParam_attributeEnumRuleCall_0_0() { return cDirectionParam_attributeEnumRuleCall_0_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}
	public class PrimitiveDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.PrimitiveDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInteger_typeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloating_pt_typeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharstr_typeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOther_typeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveDef idlmm::PrimitiveDef:
		//	integer_type
		//	| floating_pt_type
		//	| charstr_type
		//	| other_type;
		@Override public ParserRule getRule() { return rule; }
		
		//integer_type | floating_pt_type | charstr_type | other_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//integer_type
		public RuleCall getInteger_typeParserRuleCall_0() { return cInteger_typeParserRuleCall_0; }
		
		//floating_pt_type
		public RuleCall getFloating_pt_typeParserRuleCall_1() { return cFloating_pt_typeParserRuleCall_1; }
		
		//charstr_type
		public RuleCall getCharstr_typeParserRuleCall_2() { return cCharstr_typeParserRuleCall_2; }
		
		//other_type
		public RuleCall getOther_typeParserRuleCall_3() { return cOther_typeParserRuleCall_3; }
	}
	public class Floating_pt_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.floating_pt_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindFloat_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindDouble_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindLongdouble_typeParserRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		
		////---------------------------
		//// BASE TYPES
		////---------------------------
		//floating_pt_type idlmm::PrimitiveDef:
		//	kind=float_type
		//	| kind=double_type
		//	| kind=longdouble_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=float_type | kind=double_type | kind=longdouble_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=float_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//float_type
		public RuleCall getKindFloat_typeEnumRuleCall_0_0() { return cKindFloat_typeEnumRuleCall_0_0; }
		
		//kind=double_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//double_type
		public RuleCall getKindDouble_typeEnumRuleCall_1_0() { return cKindDouble_typeEnumRuleCall_1_0; }
		
		//kind=longdouble_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//longdouble_type
		public RuleCall getKindLongdouble_typeParserRuleCall_2_0() { return cKindLongdouble_typeParserRuleCall_2_0; }
	}
	public class Longdouble_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.longdouble_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//longdouble_type idlmm::PrimitiveKind:
		//	'long' 'double';
		@Override public ParserRule getRule() { return rule; }
		
		//'long' 'double'
		public Group getGroup() { return cGroup; }
		
		//'long'
		public Keyword getLongKeyword_0() { return cLongKeyword_0; }
		
		//'double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
	}
	public class Integer_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.integer_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindShort_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindLong_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindLonglong_typeParserRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cKindAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cKindUshort_typeParserRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		private final Assignment cKindAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cKindUlong_typeParserRuleCall_4_0 = (RuleCall)cKindAssignment_4.eContents().get(0);
		private final Assignment cKindAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cKindUlonglong_typeParserRuleCall_5_0 = (RuleCall)cKindAssignment_5.eContents().get(0);
		
		//integer_type idlmm::PrimitiveDef:
		//	kind=short_type
		//	| kind=long_type
		//	| kind=longlong_type
		//	| kind=ushort_type
		//	| kind=ulong_type
		//	| kind=ulonglong_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=short_type | kind=long_type | kind=longlong_type | kind=ushort_type | kind=ulong_type | kind=ulonglong_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=short_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//short_type
		public RuleCall getKindShort_typeEnumRuleCall_0_0() { return cKindShort_typeEnumRuleCall_0_0; }
		
		//kind=long_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//long_type
		public RuleCall getKindLong_typeEnumRuleCall_1_0() { return cKindLong_typeEnumRuleCall_1_0; }
		
		//kind=longlong_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//longlong_type
		public RuleCall getKindLonglong_typeParserRuleCall_2_0() { return cKindLonglong_typeParserRuleCall_2_0; }
		
		//kind=ushort_type
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }
		
		//ushort_type
		public RuleCall getKindUshort_typeParserRuleCall_3_0() { return cKindUshort_typeParserRuleCall_3_0; }
		
		//kind=ulong_type
		public Assignment getKindAssignment_4() { return cKindAssignment_4; }
		
		//ulong_type
		public RuleCall getKindUlong_typeParserRuleCall_4_0() { return cKindUlong_typeParserRuleCall_4_0; }
		
		//kind=ulonglong_type
		public Assignment getKindAssignment_5() { return cKindAssignment_5; }
		
		//ulonglong_type
		public RuleCall getKindUlonglong_typeParserRuleCall_5_0() { return cKindUlonglong_typeParserRuleCall_5_0; }
	}
	public class Longlong_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.longlong_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLongKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//longlong_type idlmm::PrimitiveKind:
		//	'long' 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'long' 'long'
		public Group getGroup() { return cGroup; }
		
		//'long'
		public Keyword getLongKeyword_0() { return cLongKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class Ushort_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ushort_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsignedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cShortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ushort_type idlmm::PrimitiveKind:
		//	'unsigned' 'short';
		@Override public ParserRule getRule() { return rule; }
		
		//'unsigned' 'short'
		public Group getGroup() { return cGroup; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_0() { return cUnsignedKeyword_0; }
		
		//'short'
		public Keyword getShortKeyword_1() { return cShortKeyword_1; }
	}
	public class Ulong_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ulong_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsignedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ulong_type idlmm::PrimitiveKind:
		//	'unsigned' 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'unsigned' 'long'
		public Group getGroup() { return cGroup; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_0() { return cUnsignedKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
	}
	public class Ulonglong_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ulonglong_type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnsignedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ulonglong_type idlmm::PrimitiveKind:
		//	'unsigned' 'long' 'long';
		@Override public ParserRule getRule() { return rule; }
		
		//'unsigned' 'long' 'long'
		public Group getGroup() { return cGroup; }
		
		//'unsigned'
		public Keyword getUnsignedKeyword_0() { return cUnsignedKeyword_0; }
		
		//'long'
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }
		
		//'long'
		public Keyword getLongKeyword_2() { return cLongKeyword_2; }
	}
	public class Charstr_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.charstr_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindChar_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindWide_char_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindString_typeEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cKindAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cKindWide_string_typeEnumRuleCall_3_0 = (RuleCall)cKindAssignment_3.eContents().get(0);
		
		//charstr_type idlmm::PrimitiveDef:
		//	kind=char_type
		//	| kind=wide_char_type
		//	| kind=string_type
		//	| kind=wide_string_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=char_type | kind=wide_char_type | kind=string_type | kind=wide_string_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=char_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//char_type
		public RuleCall getKindChar_typeEnumRuleCall_0_0() { return cKindChar_typeEnumRuleCall_0_0; }
		
		//kind=wide_char_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//wide_char_type
		public RuleCall getKindWide_char_typeEnumRuleCall_1_0() { return cKindWide_char_typeEnumRuleCall_1_0; }
		
		//kind=string_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//string_type
		public RuleCall getKindString_typeEnumRuleCall_2_0() { return cKindString_typeEnumRuleCall_2_0; }
		
		//kind=wide_string_type
		public Assignment getKindAssignment_3() { return cKindAssignment_3; }
		
		//wide_string_type
		public RuleCall getKindWide_string_typeEnumRuleCall_3_0() { return cKindWide_string_typeEnumRuleCall_3_0; }
	}
	public class Other_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.other_type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cKindBoolean_typeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKindOctet_typeEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cKindAny_typeEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		
		//other_type idlmm::PrimitiveDef:
		//	kind=boolean_type
		//	| kind=octet_type
		//	| kind=any_type;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=boolean_type | kind=octet_type | kind=any_type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kind=boolean_type
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//boolean_type
		public RuleCall getKindBoolean_typeEnumRuleCall_0_0() { return cKindBoolean_typeEnumRuleCall_0_0; }
		
		//kind=octet_type
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//octet_type
		public RuleCall getKindOctet_typeEnumRuleCall_1_0() { return cKindOctet_typeEnumRuleCall_1_0; }
		
		//kind=any_type
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }
		
		//any_type
		public RuleCall getKindAny_typeEnumRuleCall_2_0() { return cKindAny_typeEnumRuleCall_2_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStmtsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStmtsStatementParserRuleCall_1_0 = (RuleCall)cStmtsAssignment_1.eContents().get(0);
		
		//Block al::Block:
		//	{al::Block} stmts+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{al::Block} stmts+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{al::Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//stmts+=Statement*
		public Assignment getStmtsAssignment_1() { return cStmtsAssignment_1; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_1_0() { return cStmtsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement al::Stmt:
		//	Print | Assign | IfStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//Print | Assign | IfStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Print
		public RuleCall getPrintParserRuleCall_0() { return cPrintParserRuleCall_0; }
		
		//Assign
		public RuleCall getAssignParserRuleCall_1() { return cAssignParserRuleCall_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_2() { return cIfStmtParserRuleCall_2; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrintlnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Print al::Print:
		//	{al::Print}
		//	'println' '(' name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{al::Print} 'println' '(' name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{al::Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//'println'
		public Keyword getPrintlnKeyword_1() { return cPrintlnKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_3_0() { return cNameSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValASPlusParserRuleCall_2_0 = (RuleCall)cValAssignment_2.eContents().get(0);
		
		//Assign al::Assign:
		//	name=ID '=' val=ASPlus;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' val=ASPlus
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//val=ASPlus
		public Assignment getValAssignment_2() { return cValAssignment_2; }
		
		//ASPlus
		public RuleCall getValASPlusParserRuleCall_2_0() { return cValASPlusParserRuleCall_2_0; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestEqualityTestParserRuleCall_2_0 = (RuleCall)cTestAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIfBranchAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIfBranchAssignParserRuleCall_5_0 = (RuleCall)cIfBranchAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseBranchAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseBranchAssignParserRuleCall_6_1_0 = (RuleCall)cElseBranchAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfStmt al::IfStmt:
		//	'if' '(' test=EqualityTest ')' 'then'
		//	ifBranch=Assign ('else'
		//	elseBranch=Assign)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' test=EqualityTest ')' 'then' ifBranch=Assign ('else' elseBranch=Assign)? 'end'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//test=EqualityTest
		public Assignment getTestAssignment_2() { return cTestAssignment_2; }
		
		//EqualityTest
		public RuleCall getTestEqualityTestParserRuleCall_2_0() { return cTestEqualityTestParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//ifBranch=Assign
		public Assignment getIfBranchAssignment_5() { return cIfBranchAssignment_5; }
		
		//Assign
		public RuleCall getIfBranchAssignParserRuleCall_5_0() { return cIfBranchAssignParserRuleCall_5_0; }
		
		//('else' elseBranch=Assign)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }
		
		//elseBranch=Assign
		public Assignment getElseBranchAssignment_6_1() { return cElseBranchAssignment_6_1; }
		
		//Assign
		public RuleCall getElseBranchAssignParserRuleCall_6_1_0() { return cElseBranchAssignParserRuleCall_6_1_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class EqualityTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.EqualityTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsASPlusParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsASPlusParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//EqualityTest al::EqualityTest:
		//	lhs=ASPlus '==' rhs=ASPlus;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=ASPlus '==' rhs=ASPlus
		public Group getGroup() { return cGroup; }
		
		//lhs=ASPlus
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//ASPlus
		public RuleCall getLhsASPlusParserRuleCall_0_0() { return cLhsASPlusParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//rhs=ASPlus
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//ASPlus
		public RuleCall getRhsASPlusParserRuleCall_2_0() { return cRhsASPlusParserRuleCall_2_0; }
	}
	public class ASPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ASPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cASMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithPlusLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsArithParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//ASPlus al::Arith:
		//	ASMinus ({al::ArithPlus.lhs=current} '+' rhs=Arith)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ASMinus ({al::ArithPlus.lhs=current} '+' rhs=Arith)?
		public Group getGroup() { return cGroup; }
		
		//ASMinus
		public RuleCall getASMinusParserRuleCall_0() { return cASMinusParserRuleCall_0; }
		
		//({al::ArithPlus.lhs=current} '+' rhs=Arith)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{al::ArithPlus.lhs=current}
		public Action getArithPlusLhsAction_1_0() { return cArithPlusLhsAction_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//rhs=Arith
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Arith
		public RuleCall getRhsArithParserRuleCall_1_2_0() { return cRhsArithParserRuleCall_1_2_0; }
	}
	public class ASMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ASMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithMinusLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsArithParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//ASMinus al::Arith:
		//	Arith ({al::ArithMinus.lhs=current} '-' rhs=Arith)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Arith ({al::ArithMinus.lhs=current} '-' rhs=Arith)?
		public Group getGroup() { return cGroup; }
		
		//Arith
		public RuleCall getArithParserRuleCall_0() { return cArithParserRuleCall_0; }
		
		//({al::ArithMinus.lhs=current} '-' rhs=Arith)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{al::ArithMinus.lhs=current}
		public Action getArithMinusLhsAction_1_0() { return cArithMinusLhsAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//rhs=Arith
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Arith
		public RuleCall getRhsArithParserRuleCall_1_2_0() { return cRhsArithParserRuleCall_1_2_0; }
	}
	public class ArithElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Arith");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALLitParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesisParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Arith al::Arith:
		//	ALLit | VarRef | Rand | Parenthesis;
		@Override public ParserRule getRule() { return rule; }
		
		//ALLit | VarRef | Rand | Parenthesis
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ALLit
		public RuleCall getALLitParserRuleCall_0() { return cALLitParserRuleCall_0; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_1() { return cVarRefParserRuleCall_1; }
		
		//Rand
		public RuleCall getRandParserRuleCall_2() { return cRandParserRuleCall_2; }
		
		//Parenthesis
		public RuleCall getParenthesisParserRuleCall_3() { return cParenthesisParserRuleCall_3; }
	}
	public class ParenthesisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Parenthesis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cASPlusParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parenthesis al::Arith:
		//	'(' ASPlus ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ASPlus ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//ASPlus
		public RuleCall getASPlusParserRuleCall_1() { return cASPlusParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ALLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ALLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArithLitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTEGERTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//ALLit al::Arith:
		//	{al::ArithLit} val=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//{al::ArithLit} val=INTEGER
		public Group getGroup() { return cGroup; }
		
		//{al::ArithLit}
		public Action getArithLitAction_0() { return cArithLitAction_0; }
		
		//val=INTEGER
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//INTEGER
		public RuleCall getValINTEGERTerminalRuleCall_1_0() { return cValINTEGERTerminalRuleCall_1_0; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cALVarRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VarRef al::Arith:
		//	{al::ALVarRef} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{al::ALVarRef} name=ID
		public Group getGroup() { return cGroup; }
		
		//{al::ALVarRef}
		public Action getALVarRefAction_0() { return cALVarRefAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Rand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRandKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinINTEGERTerminalRuleCall_2_0 = (RuleCall)cMinAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMaxAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxINTEGERTerminalRuleCall_4_0 = (RuleCall)cMaxAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rand al::RandRange:
		//	'rand' '(' min=INTEGER ',' max=INTEGER ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'rand' '(' min=INTEGER ',' max=INTEGER ')'
		public Group getGroup() { return cGroup; }
		
		//'rand'
		public Keyword getRandKeyword_0() { return cRandKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//min=INTEGER
		public Assignment getMinAssignment_2() { return cMinAssignment_2; }
		
		//INTEGER
		public RuleCall getMinINTEGERTerminalRuleCall_2_0() { return cMinINTEGERTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//max=INTEGER
		public Assignment getMaxAssignment_4() { return cMaxAssignment_4; }
		
		//INTEGER
		public RuleCall getMaxINTEGERTerminalRuleCall_4_0() { return cMaxINTEGERTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class IotActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IotActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIoTActivityBindActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateActivityParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//IotActivity iot::IotActivity:
		//	{iot_se::IoTActivityBindActivity} delegate=Activity;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::IoTActivityBindActivity} delegate=Activity
		public Group getGroup() { return cGroup; }
		
		//{iot_se::IoTActivityBindActivity}
		public Action getIoTActivityBindActivityAction_0() { return cIoTActivityBindActivityAction_0; }
		
		//delegate=Activity
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//Activity
		public RuleCall getDelegateActivityParserRuleCall_1_0() { return cDelegateActivityParserRuleCall_1_0; }
	}
	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInputsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInputsVariableParserRuleCall_3_1_0 = (RuleCall)cInputsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cInputsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cInputsVariableParserRuleCall_3_2_1_0 = (RuleCall)cInputsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLocalsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLocalsVariableParserRuleCall_5_0_0 = (RuleCall)cLocalsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cLocalsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cLocalsVariableParserRuleCall_5_1_1_0 = (RuleCall)cLocalsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNodesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNodesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cNodesActivityNodeParserRuleCall_6_2_0 = (RuleCall)cNodesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cNodesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cNodesActivityNodeParserRuleCall_6_3_1_0 = (RuleCall)cNodesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEdgesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cEdgesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEdgesActivityEdgeParserRuleCall_7_2_0 = (RuleCall)cEdgesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cEdgesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cEdgesActivityEdgeParserRuleCall_7_3_1_0 = (RuleCall)cEdgesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Activity activitydiagram::Activity:
		//	{activitydiagram::Activity}
		//	'activity'
		//	name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')?
		//	'{' (locals+=Variable ("," locals+=Variable)*)? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
		//	('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::Activity} 'activity' name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')? '{' (locals+=Variable
		//("," locals+=Variable)*)? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')? ('edges' '{'
		//edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::Activity}
		public Action getActivityAction_0() { return cActivityAction_0; }
		
		//'activity'
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' inputs+=Variable ("," inputs+=Variable)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//inputs+=Variable
		public Assignment getInputsAssignment_3_1() { return cInputsAssignment_3_1; }
		
		//Variable
		public RuleCall getInputsVariableParserRuleCall_3_1_0() { return cInputsVariableParserRuleCall_3_1_0; }
		
		//("," inputs+=Variable)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//inputs+=Variable
		public Assignment getInputsAssignment_3_2_1() { return cInputsAssignment_3_2_1; }
		
		//Variable
		public RuleCall getInputsVariableParserRuleCall_3_2_1_0() { return cInputsVariableParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(locals+=Variable ("," locals+=Variable)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//locals+=Variable
		public Assignment getLocalsAssignment_5_0() { return cLocalsAssignment_5_0; }
		
		//Variable
		public RuleCall getLocalsVariableParserRuleCall_5_0_0() { return cLocalsVariableParserRuleCall_5_0_0; }
		
		//("," locals+=Variable)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//locals+=Variable
		public Assignment getLocalsAssignment_5_1_1() { return cLocalsAssignment_5_1_1; }
		
		//Variable
		public RuleCall getLocalsVariableParserRuleCall_5_1_1_0() { return cLocalsVariableParserRuleCall_5_1_1_0; }
		
		//('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'nodes'
		public Keyword getNodesKeyword_6_0() { return cNodesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//nodes+=ActivityNode
		public Assignment getNodesAssignment_6_2() { return cNodesAssignment_6_2; }
		
		//ActivityNode
		public RuleCall getNodesActivityNodeParserRuleCall_6_2_0() { return cNodesActivityNodeParserRuleCall_6_2_0; }
		
		//("," nodes+=ActivityNode)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//nodes+=ActivityNode
		public Assignment getNodesAssignment_6_3_1() { return cNodesAssignment_6_3_1; }
		
		//ActivityNode
		public RuleCall getNodesActivityNodeParserRuleCall_6_3_1_0() { return cNodesActivityNodeParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'edges'
		public Keyword getEdgesKeyword_7_0() { return cEdgesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//edges+=ActivityEdge
		public Assignment getEdgesAssignment_7_2() { return cEdgesAssignment_7_2; }
		
		//ActivityEdge
		public RuleCall getEdgesActivityEdgeParserRuleCall_7_2_0() { return cEdgesActivityEdgeParserRuleCall_7_2_0; }
		
		//("," edges+=ActivityEdge)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//edges+=ActivityEdge
		public Assignment getEdgesAssignment_7_3_1() { return cEdgesAssignment_7_3_1; }
		
		//ActivityEdge
		public RuleCall getEdgesActivityEdgeParserRuleCall_7_3_1_0() { return cEdgesActivityEdgeParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ActivityNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ActivityNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpaqueActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActivityFinalNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForkNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJoinNodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMergeNodeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDecisionNodeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//ActivityNode activitydiagram::ActivityNode:
		//	OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;
		@Override public ParserRule getRule() { return rule; }
		
		//OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpaqueAction
		public RuleCall getOpaqueActionParserRuleCall_0() { return cOpaqueActionParserRuleCall_0; }
		
		//InitialNode
		public RuleCall getInitialNodeParserRuleCall_1() { return cInitialNodeParserRuleCall_1; }
		
		//ActivityFinalNode
		public RuleCall getActivityFinalNodeParserRuleCall_2() { return cActivityFinalNodeParserRuleCall_2; }
		
		//ForkNode
		public RuleCall getForkNodeParserRuleCall_3() { return cForkNodeParserRuleCall_3; }
		
		//JoinNode
		public RuleCall getJoinNodeParserRuleCall_4() { return cJoinNodeParserRuleCall_4; }
		
		//MergeNode
		public RuleCall getMergeNodeParserRuleCall_5() { return cMergeNodeParserRuleCall_5; }
		
		//DecisionNode
		public RuleCall getDecisionNodeParserRuleCall_6() { return cDecisionNodeParserRuleCall_6; }
	}
	public class ActivityEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ActivityEdge");
		private final RuleCall cControlFlowParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ActivityEdge activitydiagram::ActivityEdge:
		//	ControlFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlFlow
		public RuleCall getControlFlowParserRuleCall() { return cControlFlowParserRuleCall; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable activitydiagram::Variable:
		//	IntegerVariable | BooleanVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerVariable | BooleanVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerVariable
		public RuleCall getIntegerVariableParserRuleCall_0() { return cIntegerVariableParserRuleCall_0; }
		
		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_1() { return cBooleanVariableParserRuleCall_1; }
	}
	public class OpaqueActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.OpaqueAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpaqueActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCompKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpressionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpressionsExpBindStatementParserRuleCall_3_2_0 = (RuleCall)cExpressionsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cExpressionsExpBindStatementParserRuleCall_3_3_1_0 = (RuleCall)cExpressionsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIncomingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_4_2_0 = (CrossReference)cIncomingAssignment_4_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cIncomingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cIncomingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutgoingAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_5_2_0 = (CrossReference)cOutgoingAssignment_5_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_5_3_1_0 = (CrossReference)cOutgoingAssignment_5_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_5_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cServiceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cExpressionsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cExpressionsExpBindOpDefParserRuleCall_6_1_0 = (RuleCall)cExpressionsAssignment_6_1.eContents().get(0);
		
		//OpaqueAction activitydiagram::OpaqueAction:
		//	{activitydiagram::OpaqueAction}
		//	'action'
		//	name=ID ('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')? ('in' '('
		//	incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '('
		//	outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')? ('service'
		//	expressions+=ExpBindOpDef)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::OpaqueAction} 'action' name=ID ('comp' '{' expressions+=ExpBindStatement (","
		//expressions+=ExpBindStatement)* '}')? ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '(' outgoing+=[activitydiagram::ActivityEdge] (","
		//outgoing+=[activitydiagram::ActivityEdge])* ')')? ('service' expressions+=ExpBindOpDef)?
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::OpaqueAction}
		public Action getOpaqueActionAction_0() { return cOpaqueActionAction_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'comp'
		public Keyword getCompKeyword_3_0() { return cCompKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//expressions+=ExpBindStatement
		public Assignment getExpressionsAssignment_3_2() { return cExpressionsAssignment_3_2; }
		
		//ExpBindStatement
		public RuleCall getExpressionsExpBindStatementParserRuleCall_3_2_0() { return cExpressionsExpBindStatementParserRuleCall_3_2_0; }
		
		//("," expressions+=ExpBindStatement)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//expressions+=ExpBindStatement
		public Assignment getExpressionsAssignment_3_3_1() { return cExpressionsAssignment_3_3_1; }
		
		//ExpBindStatement
		public RuleCall getExpressionsExpBindStatementParserRuleCall_3_3_1_0() { return cExpressionsExpBindStatementParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_4_2() { return cIncomingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_4_2_0() { return cIncomingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_4_3_1() { return cIncomingAssignment_4_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_4_3_1_0() { return cIncomingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'out'
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_5_2() { return cOutgoingAssignment_5_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_5_2_0() { return cOutgoingActivityEdgeCrossReference_5_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_5_3_1() { return cOutgoingAssignment_5_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_5_3_1_0() { return cOutgoingActivityEdgeCrossReference_5_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_5_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_5_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//('service' expressions+=ExpBindOpDef)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'service'
		public Keyword getServiceKeyword_6_0() { return cServiceKeyword_6_0; }
		
		//expressions+=ExpBindOpDef
		public Assignment getExpressionsAssignment_6_1() { return cExpressionsAssignment_6_1; }
		
		//ExpBindOpDef
		public RuleCall getExpressionsExpBindOpDefParserRuleCall_6_1_0() { return cExpressionsExpBindOpDefParserRuleCall_6_1_0; }
	}
	public class ExpBindOpDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ExpBindOpDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionBindOperationDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDelegateOperationDefCrossReference_1_0 = (CrossReference)cDelegateAssignment_1.eContents().get(0);
		private final RuleCall cDelegateOperationDefIDTerminalRuleCall_1_0_1 = (RuleCall)cDelegateOperationDefCrossReference_1_0.eContents().get(1);
		
		//ExpBindOpDef activitydiagram::Exp:
		//	{iot_se::ExpressionBindOperationDef} delegate=[idlmm::OperationDef];
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::ExpressionBindOperationDef} delegate=[idlmm::OperationDef]
		public Group getGroup() { return cGroup; }
		
		//{iot_se::ExpressionBindOperationDef}
		public Action getExpressionBindOperationDefAction_0() { return cExpressionBindOperationDefAction_0; }
		
		//delegate=[idlmm::OperationDef]
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//[idlmm::OperationDef]
		public CrossReference getDelegateOperationDefCrossReference_1_0() { return cDelegateOperationDefCrossReference_1_0; }
		
		//ID
		public RuleCall getDelegateOperationDefIDTerminalRuleCall_1_0_1() { return cDelegateOperationDefIDTerminalRuleCall_1_0_1; }
	}
	public class ExpBindStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ExpBindStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionBindSEExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDelegateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDelegateExpressionParserRuleCall_1_0 = (RuleCall)cDelegateAssignment_1.eContents().get(0);
		
		//ExpBindStatement activitydiagram::Exp:
		//	{iot_se::ExpressionBindSEExpression} delegate=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::ExpressionBindSEExpression} delegate=Expression
		public Group getGroup() { return cGroup; }
		
		//{iot_se::ExpressionBindSEExpression}
		public Action getExpressionBindSEExpressionAction_0() { return cExpressionBindSEExpressionAction_0; }
		
		//delegate=Expression
		public Assignment getDelegateAssignment_1() { return cDelegateAssignment_1; }
		
		//Expression
		public RuleCall getDelegateExpressionParserRuleCall_1_0() { return cDelegateExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerCalculationExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerComparisonExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanUnaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanBinaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression se::SEExpression:
		//	IntegerCalculationExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerCalculationExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerCalculationExpression
		public RuleCall getIntegerCalculationExpressionParserRuleCall_0() { return cIntegerCalculationExpressionParserRuleCall_0; }
		
		//IntegerComparisonExpression
		public RuleCall getIntegerComparisonExpressionParserRuleCall_1() { return cIntegerComparisonExpressionParserRuleCall_1; }
		
		//BooleanUnaryExpression
		public RuleCall getBooleanUnaryExpressionParserRuleCall_2() { return cBooleanUnaryExpressionParserRuleCall_2; }
		
		//BooleanBinaryExpression
		public RuleCall getBooleanBinaryExpressionParserRuleCall_3() { return cBooleanBinaryExpressionParserRuleCall_3; }
	}
	public class IntegerCalculationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerCalculationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeSEIntegerVariableCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeSEIntegerVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeSEIntegerVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperand1SEIntegerVariableCrossReference_2_0 = (CrossReference)cOperand1Assignment_2.eContents().get(0);
		private final RuleCall cOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cOperand1SEIntegerVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorIntegerCalculationOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cOperand2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOperand2SEIntegerVariableCrossReference_4_0 = (CrossReference)cOperand2Assignment_4.eContents().get(0);
		private final RuleCall cOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1 = (RuleCall)cOperand2SEIntegerVariableCrossReference_4_0.eContents().get(1);
		
		//IntegerCalculationExpression se::SEIntegerCalculationExpression:
		//	assignee=[se::SEIntegerVariable] '='
		//	operand1=[se::SEIntegerVariable] operator=IntegerCalculationOperator
		//	operand2=[se::SEIntegerVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[se::SEIntegerVariable] '=' operand1=[se::SEIntegerVariable] operator=IntegerCalculationOperator
		//operand2=[se::SEIntegerVariable]
		public Group getGroup() { return cGroup; }
		
		//assignee=[se::SEIntegerVariable]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[se::SEIntegerVariable]
		public CrossReference getAssigneeSEIntegerVariableCrossReference_0_0() { return cAssigneeSEIntegerVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeSEIntegerVariableIDTerminalRuleCall_0_0_1() { return cAssigneeSEIntegerVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//operand1=[se::SEIntegerVariable]
		public Assignment getOperand1Assignment_2() { return cOperand1Assignment_2; }
		
		//[se::SEIntegerVariable]
		public CrossReference getOperand1SEIntegerVariableCrossReference_2_0() { return cOperand1SEIntegerVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1() { return cOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1; }
		
		//operator=IntegerCalculationOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//IntegerCalculationOperator
		public RuleCall getOperatorIntegerCalculationOperatorEnumRuleCall_3_0() { return cOperatorIntegerCalculationOperatorEnumRuleCall_3_0; }
		
		//operand2=[se::SEIntegerVariable]
		public Assignment getOperand2Assignment_4() { return cOperand2Assignment_4; }
		
		//[se::SEIntegerVariable]
		public CrossReference getOperand2SEIntegerVariableCrossReference_4_0() { return cOperand2SEIntegerVariableCrossReference_4_0; }
		
		//ID
		public RuleCall getOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1() { return cOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1; }
	}
	public class IntegerComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeSEBooleanVariableCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeSEBooleanVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperand1SEIntegerVariableCrossReference_2_0 = (CrossReference)cOperand1Assignment_2.eContents().get(0);
		private final RuleCall cOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cOperand1SEIntegerVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorIntegerComparisonOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cOperand2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOperand2SEIntegerVariableCrossReference_4_0 = (CrossReference)cOperand2Assignment_4.eContents().get(0);
		private final RuleCall cOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1 = (RuleCall)cOperand2SEIntegerVariableCrossReference_4_0.eContents().get(1);
		
		//IntegerComparisonExpression se::SEIntegerComparisonExpression:
		//	assignee=[se::SEBooleanVariable] '='
		//	operand1=[se::SEIntegerVariable] operator=IntegerComparisonOperator
		//	operand2=[se::SEIntegerVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[se::SEBooleanVariable] '=' operand1=[se::SEIntegerVariable] operator=IntegerComparisonOperator
		//operand2=[se::SEIntegerVariable]
		public Group getGroup() { return cGroup; }
		
		//assignee=[se::SEBooleanVariable]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[se::SEBooleanVariable]
		public CrossReference getAssigneeSEBooleanVariableCrossReference_0_0() { return cAssigneeSEBooleanVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1() { return cAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//operand1=[se::SEIntegerVariable]
		public Assignment getOperand1Assignment_2() { return cOperand1Assignment_2; }
		
		//[se::SEIntegerVariable]
		public CrossReference getOperand1SEIntegerVariableCrossReference_2_0() { return cOperand1SEIntegerVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1() { return cOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1; }
		
		//operator=IntegerComparisonOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//IntegerComparisonOperator
		public RuleCall getOperatorIntegerComparisonOperatorEnumRuleCall_3_0() { return cOperatorIntegerComparisonOperatorEnumRuleCall_3_0; }
		
		//operand2=[se::SEIntegerVariable]
		public Assignment getOperand2Assignment_4() { return cOperand2Assignment_4; }
		
		//[se::SEIntegerVariable]
		public CrossReference getOperand2SEIntegerVariableCrossReference_4_0() { return cOperand2SEIntegerVariableCrossReference_4_0; }
		
		//ID
		public RuleCall getOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1() { return cOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1; }
	}
	public class BooleanUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeSEBooleanVariableCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeSEBooleanVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorBooleanUnaryOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cOperandAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cOperandSEBooleanVariableCrossReference_3_0 = (CrossReference)cOperandAssignment_3.eContents().get(0);
		private final RuleCall cOperandSEBooleanVariableIDTerminalRuleCall_3_0_1 = (RuleCall)cOperandSEBooleanVariableCrossReference_3_0.eContents().get(1);
		
		//BooleanUnaryExpression se::SEBooleanUnaryExpression:
		//	assignee=[se::SEBooleanVariable] '='
		//	operator=BooleanUnaryOperator
		//	operand=[se::SEBooleanVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[se::SEBooleanVariable] '=' operator=BooleanUnaryOperator operand=[se::SEBooleanVariable]
		public Group getGroup() { return cGroup; }
		
		//assignee=[se::SEBooleanVariable]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[se::SEBooleanVariable]
		public CrossReference getAssigneeSEBooleanVariableCrossReference_0_0() { return cAssigneeSEBooleanVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1() { return cAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//operator=BooleanUnaryOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//BooleanUnaryOperator
		public RuleCall getOperatorBooleanUnaryOperatorEnumRuleCall_2_0() { return cOperatorBooleanUnaryOperatorEnumRuleCall_2_0; }
		
		//operand=[se::SEBooleanVariable]
		public Assignment getOperandAssignment_3() { return cOperandAssignment_3; }
		
		//[se::SEBooleanVariable]
		public CrossReference getOperandSEBooleanVariableCrossReference_3_0() { return cOperandSEBooleanVariableCrossReference_3_0; }
		
		//ID
		public RuleCall getOperandSEBooleanVariableIDTerminalRuleCall_3_0_1() { return cOperandSEBooleanVariableIDTerminalRuleCall_3_0_1; }
	}
	public class BooleanBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeSEBooleanVariableCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeSEBooleanVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperand1SEBooleanVariableCrossReference_2_0 = (CrossReference)cOperand1Assignment_2.eContents().get(0);
		private final RuleCall cOperand1SEBooleanVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cOperand1SEBooleanVariableCrossReference_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorBooleanBinaryOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cOperand2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cOperand2SEBooleanVariableCrossReference_4_0 = (CrossReference)cOperand2Assignment_4.eContents().get(0);
		private final RuleCall cOperand2SEBooleanVariableIDTerminalRuleCall_4_0_1 = (RuleCall)cOperand2SEBooleanVariableCrossReference_4_0.eContents().get(1);
		
		//BooleanBinaryExpression se::SEBooleanBinaryExpression:
		//	assignee=[se::SEBooleanVariable] '='
		//	operand1=[se::SEBooleanVariable] operator=BooleanBinaryOperator
		//	operand2=[se::SEBooleanVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[se::SEBooleanVariable] '=' operand1=[se::SEBooleanVariable] operator=BooleanBinaryOperator
		//operand2=[se::SEBooleanVariable]
		public Group getGroup() { return cGroup; }
		
		//assignee=[se::SEBooleanVariable]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[se::SEBooleanVariable]
		public CrossReference getAssigneeSEBooleanVariableCrossReference_0_0() { return cAssigneeSEBooleanVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1() { return cAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//operand1=[se::SEBooleanVariable]
		public Assignment getOperand1Assignment_2() { return cOperand1Assignment_2; }
		
		//[se::SEBooleanVariable]
		public CrossReference getOperand1SEBooleanVariableCrossReference_2_0() { return cOperand1SEBooleanVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getOperand1SEBooleanVariableIDTerminalRuleCall_2_0_1() { return cOperand1SEBooleanVariableIDTerminalRuleCall_2_0_1; }
		
		//operator=BooleanBinaryOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//BooleanBinaryOperator
		public RuleCall getOperatorBooleanBinaryOperatorEnumRuleCall_3_0() { return cOperatorBooleanBinaryOperatorEnumRuleCall_3_0; }
		
		//operand2=[se::SEBooleanVariable]
		public Assignment getOperand2Assignment_4() { return cOperand2Assignment_4; }
		
		//[se::SEBooleanVariable]
		public CrossReference getOperand2SEBooleanVariableCrossReference_4_0() { return cOperand2SEBooleanVariableCrossReference_4_0; }
		
		//ID
		public RuleCall getOperand2SEBooleanVariableIDTerminalRuleCall_4_0_1() { return cOperand2SEBooleanVariableIDTerminalRuleCall_4_0_1; }
	}
	public class InitialNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.InitialNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOutgoingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_3_2_0 = (CrossReference)cOutgoingAssignment_3_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cOutgoingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//InitialNode activitydiagram::InitialNode:
		//	{activitydiagram::InitialNode}
		//	'initial'
		//	name=ID ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::InitialNode} 'initial' name=ID ('out' '(' outgoing+=[activitydiagram::ActivityEdge] (","
		//outgoing+=[activitydiagram::ActivityEdge])* ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::InitialNode}
		public Action getInitialNodeAction_0() { return cInitialNodeAction_0; }
		
		//'initial'
		public Keyword getInitialKeyword_1() { return cInitialKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'out'
		public Keyword getOutKeyword_3_0() { return cOutKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_3_2() { return cOutgoingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_3_2_0() { return cOutgoingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_3_3_1() { return cOutgoingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_3_3_1_0() { return cOutgoingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class ActivityFinalNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ActivityFinalNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityFinalNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//ActivityFinalNode activitydiagram::ActivityFinalNode:
		//	{activitydiagram::ActivityFinalNode}
		//	'final'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::ActivityFinalNode} 'final' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::ActivityFinalNode}
		public Action getActivityFinalNodeAction_0() { return cActivityFinalNodeAction_0; }
		
		//'final'
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}
	public class ForkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ForkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForkNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cOutgoingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//ForkNode activitydiagram::ForkNode:
		//	{activitydiagram::ForkNode}
		//	'fork'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
		//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::ForkNode} 'fork' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '('
		//outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::ForkNode}
		public Action getForkNodeAction_0() { return cForkNodeAction_0; }
		
		//'fork'
		public Keyword getForkKeyword_1() { return cForkKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in' '(' incoming+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_3_1() { return cOutgoingAssignment_4_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_3_1_0() { return cOutgoingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class JoinNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.JoinNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//JoinNode activitydiagram::JoinNode:
		//	{activitydiagram::JoinNode}
		//	'join'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::JoinNode} 'join' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::JoinNode}
		public Action getJoinNodeAction_0() { return cJoinNodeAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'out' '(' outgoing+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class MergeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.MergeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMergeNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMergeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//MergeNode activitydiagram::MergeNode:
		//	{activitydiagram::MergeNode}
		//	'merge'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::MergeNode} 'merge' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] (","
		//incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::MergeNode}
		public Action getMergeNodeAction_0() { return cMergeNodeAction_0; }
		
		//'merge'
		public Keyword getMergeKeyword_1() { return cMergeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[activitydiagram::ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//'out' '(' outgoing+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class DecisionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.DecisionNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecisionNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecisionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cOutgoingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//DecisionNode activitydiagram::DecisionNode:
		//	{activitydiagram::DecisionNode}
		//	'decision'
		//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
		//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{activitydiagram::DecisionNode} 'decision' name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '('
		//outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup() { return cGroup; }
		
		//{activitydiagram::DecisionNode}
		public Action getDecisionNodeAction_0() { return cDecisionNodeAction_0; }
		
		//'decision'
		public Keyword getDecisionKeyword_1() { return cDecisionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'in' '(' incoming+=[activitydiagram::ActivityEdge] ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[activitydiagram::ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," outgoing+=[activitydiagram::ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//outgoing+=[activitydiagram::ActivityEdge]
		public Assignment getOutgoingAssignment_4_3_1() { return cOutgoingAssignment_4_3_1; }
		
		//[activitydiagram::ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_3_1_0() { return cOutgoingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class IntegerVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerVariableBindSEIntegerVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelegateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelegateIntegerVariableDeclParserRuleCall_2_0 = (RuleCall)cDelegateAssignment_2.eContents().get(0);
		
		//IntegerVariable activitydiagram::IntegerVariable:
		//	{iot_se::IntegerVariableBindSEIntegerVariable}
		//	'int' delegate=IntegerVariableDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::IntegerVariableBindSEIntegerVariable} 'int' delegate=IntegerVariableDecl
		public Group getGroup() { return cGroup; }
		
		//{iot_se::IntegerVariableBindSEIntegerVariable}
		public Action getIntegerVariableBindSEIntegerVariableAction_0() { return cIntegerVariableBindSEIntegerVariableAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//delegate=IntegerVariableDecl
		public Assignment getDelegateAssignment_2() { return cDelegateAssignment_2; }
		
		//IntegerVariableDecl
		public RuleCall getDelegateIntegerVariableDeclParserRuleCall_2_0() { return cDelegateIntegerVariableDeclParserRuleCall_2_0; }
	}
	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanVariableBindSEBooleanVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelegateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelegateBooleanVariableDeclParserRuleCall_2_0 = (RuleCall)cDelegateAssignment_2.eContents().get(0);
		
		//BooleanVariable activitydiagram::BooleanVariable:
		//	{iot_se::BooleanVariableBindSEBooleanVariable}
		//	'bool' delegate=BooleanVariableDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//{iot_se::BooleanVariableBindSEBooleanVariable} 'bool' delegate=BooleanVariableDecl
		public Group getGroup() { return cGroup; }
		
		//{iot_se::BooleanVariableBindSEBooleanVariable}
		public Action getBooleanVariableBindSEBooleanVariableAction_0() { return cBooleanVariableBindSEBooleanVariableAction_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//delegate=BooleanVariableDecl
		public Assignment getDelegateAssignment_2() { return cDelegateAssignment_2; }
		
		//BooleanVariableDecl
		public RuleCall getDelegateBooleanVariableDeclParserRuleCall_2_0() { return cDelegateBooleanVariableDeclParserRuleCall_2_0; }
	}
	public class BooleanVariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanVariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialValueBooleanValueParserRuleCall_2_0 = (RuleCall)cInitialValueAssignment_2.eContents().get(0);
		
		//BooleanVariableDecl se::SEBooleanVariable:
		//	name=ID '=' initialValue=BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' initialValue=BooleanValue
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//initialValue=BooleanValue
		public Assignment getInitialValueAssignment_2() { return cInitialValueAssignment_2; }
		
		//BooleanValue
		public RuleCall getInitialValueBooleanValueParserRuleCall_2_0() { return cInitialValueBooleanValueParserRuleCall_2_0; }
	}
	public class IntegerVariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerVariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitialValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitialValueIntegerValueParserRuleCall_2_0 = (RuleCall)cInitialValueAssignment_2.eContents().get(0);
		
		//IntegerVariableDecl se::SEIntegerVariable:
		//	name=ID '=' initialValue=IntegerValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' initialValue=IntegerValue
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//initialValue=IntegerValue
		public Assignment getInitialValueAssignment_2() { return cInitialValueAssignment_2; }
		
		//IntegerValue
		public RuleCall getInitialValueIntegerValueParserRuleCall_2_0() { return cInitialValueIntegerValueParserRuleCall_2_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSEBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanValue se::SEBooleanValue:
		//	{se::SEBooleanValue} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{se::SEBooleanValue} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{se::SEBooleanValue}
		public Action getSEBooleanValueAction_0() { return cSEBooleanValueAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSEIntegerValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerValue se::SEIntegerValue:
		//	{se::SEIntegerValue} value=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//{se::SEIntegerValue} value=INTEGER
		public Group getGroup() { return cGroup; }
		
		//{se::SEIntegerValue}
		public Action getSEIntegerValueAction_0() { return cSEIntegerValueAction_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
	}
	public class ControlFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.ControlFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceActivityNodeCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceActivityNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceActivityNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetActivityNodeCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetActivityNodeIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetActivityNodeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cGuardBooleanVariableCrossReference_6_1_0 = (CrossReference)cGuardAssignment_6_1.eContents().get(0);
		private final RuleCall cGuardBooleanVariableIDTerminalRuleCall_6_1_0_1 = (RuleCall)cGuardBooleanVariableCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ControlFlow activitydiagram::ControlFlow:
		//	'flow'
		//	name=ID
		//	'from' source=[activitydiagram::ActivityNode]
		//	'to' target=[activitydiagram::ActivityNode] ('[' guard=[activitydiagram::BooleanVariable] ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'flow' name=ID 'from' source=[activitydiagram::ActivityNode] 'to' target=[activitydiagram::ActivityNode] ('['
		//guard=[activitydiagram::BooleanVariable] ']')?
		public Group getGroup() { return cGroup; }
		
		//'flow'
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//source=[activitydiagram::ActivityNode]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[activitydiagram::ActivityNode]
		public CrossReference getSourceActivityNodeCrossReference_3_0() { return cSourceActivityNodeCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceActivityNodeIDTerminalRuleCall_3_0_1() { return cSourceActivityNodeIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//target=[activitydiagram::ActivityNode]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[activitydiagram::ActivityNode]
		public CrossReference getTargetActivityNodeCrossReference_5_0() { return cTargetActivityNodeCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetActivityNodeIDTerminalRuleCall_5_0_1() { return cTargetActivityNodeIDTerminalRuleCall_5_0_1; }
		
		//('[' guard=[activitydiagram::BooleanVariable] ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//guard=[activitydiagram::BooleanVariable]
		public Assignment getGuardAssignment_6_1() { return cGuardAssignment_6_1; }
		
		//[activitydiagram::BooleanVariable]
		public CrossReference getGuardBooleanVariableCrossReference_6_1_0() { return cGuardBooleanVariableCrossReference_6_1_0; }
		
		//ID
		public RuleCall getGuardBooleanVariableIDTerminalRuleCall_6_1_0_1() { return cGuardBooleanVariableIDTerminalRuleCall_6_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}
	
	public class BoardTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BoardType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRaspberryPiEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRaspberryPiRaspberryPiKeyword_0_0 = (Keyword)cRaspberryPiEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cArduinoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cArduinoArduinoKeyword_1_0 = (Keyword)cArduinoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBeagleBoardEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBeagleBoardBeagleBoardKeyword_2_0 = (Keyword)cBeagleBoardEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BoardType returns iot::BoardType:
		//	RaspberryPi | Arduino | BeagleBoard;
		public EnumRule getRule() { return rule; }
		
		//RaspberryPi | Arduino | BeagleBoard
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RaspberryPi
		public EnumLiteralDeclaration getRaspberryPiEnumLiteralDeclaration_0() { return cRaspberryPiEnumLiteralDeclaration_0; }
		
		//'RaspberryPi'
		public Keyword getRaspberryPiRaspberryPiKeyword_0_0() { return cRaspberryPiRaspberryPiKeyword_0_0; }
		
		//Arduino
		public EnumLiteralDeclaration getArduinoEnumLiteralDeclaration_1() { return cArduinoEnumLiteralDeclaration_1; }
		
		//'Arduino'
		public Keyword getArduinoArduinoKeyword_1_0() { return cArduinoArduinoKeyword_1_0; }
		
		//BeagleBoard
		public EnumLiteralDeclaration getBeagleBoardEnumLiteralDeclaration_2() { return cBeagleBoardEnumLiteralDeclaration_2; }
		
		//'BeagleBoard'
		public Keyword getBeagleBoardBeagleBoardKeyword_2_0() { return cBeagleBoardBeagleBoardKeyword_2_0; }
	}
	public class Param_attributeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.param_attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPARAM_INEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPARAM_INInKeyword_0_0 = (Keyword)cPARAM_INEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPARAM_OUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPARAM_OUTOutKeyword_1_0 = (Keyword)cPARAM_OUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPARAM_INOUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPARAM_INOUTInoutKeyword_2_0 = (Keyword)cPARAM_INOUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum param_attribute returns idlmm::ParameterMode:
		//	PARAM_IN='in'
		//	| PARAM_OUT='out'
		//	| PARAM_INOUT='inout';
		public EnumRule getRule() { return rule; }
		
		//PARAM_IN='in' | PARAM_OUT='out' | PARAM_INOUT='inout'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PARAM_IN='in'
		public EnumLiteralDeclaration getPARAM_INEnumLiteralDeclaration_0() { return cPARAM_INEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getPARAM_INInKeyword_0_0() { return cPARAM_INInKeyword_0_0; }
		
		//PARAM_OUT='out'
		public EnumLiteralDeclaration getPARAM_OUTEnumLiteralDeclaration_1() { return cPARAM_OUTEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getPARAM_OUTOutKeyword_1_0() { return cPARAM_OUTOutKeyword_1_0; }
		
		//PARAM_INOUT='inout'
		public EnumLiteralDeclaration getPARAM_INOUTEnumLiteralDeclaration_2() { return cPARAM_INOUTEnumLiteralDeclaration_2; }
		
		//'inout'
		public Keyword getPARAM_INOUTInoutKeyword_2_0() { return cPARAM_INOUTInoutKeyword_2_0; }
	}
	public class Float_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.float_type");
		private final EnumLiteralDeclaration cPK_FLOATEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_FLOATFloatKeyword_0 = (Keyword)cPK_FLOATEnumLiteralDeclaration.eContents().get(0);
		
		//enum float_type returns idlmm::PrimitiveKind:
		//	PK_FLOAT='float';
		public EnumRule getRule() { return rule; }
		
		//PK_FLOAT='float'
		public EnumLiteralDeclaration getPK_FLOATEnumLiteralDeclaration() { return cPK_FLOATEnumLiteralDeclaration; }
		
		//'float'
		public Keyword getPK_FLOATFloatKeyword_0() { return cPK_FLOATFloatKeyword_0; }
	}
	public class Double_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.double_type");
		private final EnumLiteralDeclaration cPK_DOUBLEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_DOUBLEDoubleKeyword_0 = (Keyword)cPK_DOUBLEEnumLiteralDeclaration.eContents().get(0);
		
		//enum double_type returns idlmm::PrimitiveKind:
		//	PK_DOUBLE='double';
		public EnumRule getRule() { return rule; }
		
		//PK_DOUBLE='double'
		public EnumLiteralDeclaration getPK_DOUBLEEnumLiteralDeclaration() { return cPK_DOUBLEEnumLiteralDeclaration; }
		
		//'double'
		public Keyword getPK_DOUBLEDoubleKeyword_0() { return cPK_DOUBLEDoubleKeyword_0; }
	}
	public class Short_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.short_type");
		private final EnumLiteralDeclaration cPK_SHORTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_SHORTShortKeyword_0 = (Keyword)cPK_SHORTEnumLiteralDeclaration.eContents().get(0);
		
		//enum short_type returns idlmm::PrimitiveKind:
		//	PK_SHORT='short';
		public EnumRule getRule() { return rule; }
		
		//PK_SHORT='short'
		public EnumLiteralDeclaration getPK_SHORTEnumLiteralDeclaration() { return cPK_SHORTEnumLiteralDeclaration; }
		
		//'short'
		public Keyword getPK_SHORTShortKeyword_0() { return cPK_SHORTShortKeyword_0; }
	}
	public class Long_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.long_type");
		private final EnumLiteralDeclaration cPK_LONGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_LONGLongKeyword_0 = (Keyword)cPK_LONGEnumLiteralDeclaration.eContents().get(0);
		
		//enum long_type returns idlmm::PrimitiveKind:
		//	PK_LONG='long';
		public EnumRule getRule() { return rule; }
		
		//PK_LONG='long'
		public EnumLiteralDeclaration getPK_LONGEnumLiteralDeclaration() { return cPK_LONGEnumLiteralDeclaration; }
		
		//'long'
		public Keyword getPK_LONGLongKeyword_0() { return cPK_LONGLongKeyword_0; }
	}
	public class Char_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.char_type");
		private final EnumLiteralDeclaration cPK_CHAREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_CHARCharKeyword_0 = (Keyword)cPK_CHAREnumLiteralDeclaration.eContents().get(0);
		
		//enum char_type returns idlmm::PrimitiveKind:
		//	PK_CHAR='char';
		public EnumRule getRule() { return rule; }
		
		//PK_CHAR='char'
		public EnumLiteralDeclaration getPK_CHAREnumLiteralDeclaration() { return cPK_CHAREnumLiteralDeclaration; }
		
		//'char'
		public Keyword getPK_CHARCharKeyword_0() { return cPK_CHARCharKeyword_0; }
	}
	public class Wide_char_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.wide_char_type");
		private final EnumLiteralDeclaration cPK_WCHAREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_WCHARWcharKeyword_0 = (Keyword)cPK_WCHAREnumLiteralDeclaration.eContents().get(0);
		
		//enum wide_char_type returns idlmm::PrimitiveKind:
		//	PK_WCHAR='wchar';
		public EnumRule getRule() { return rule; }
		
		//PK_WCHAR='wchar'
		public EnumLiteralDeclaration getPK_WCHAREnumLiteralDeclaration() { return cPK_WCHAREnumLiteralDeclaration; }
		
		//'wchar'
		public Keyword getPK_WCHARWcharKeyword_0() { return cPK_WCHARWcharKeyword_0; }
	}
	public class String_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.string_type");
		private final EnumLiteralDeclaration cPK_STRINGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_STRINGStringKeyword_0 = (Keyword)cPK_STRINGEnumLiteralDeclaration.eContents().get(0);
		
		//enum string_type returns idlmm::PrimitiveKind:
		//	PK_STRING='string';
		public EnumRule getRule() { return rule; }
		
		//PK_STRING='string'
		public EnumLiteralDeclaration getPK_STRINGEnumLiteralDeclaration() { return cPK_STRINGEnumLiteralDeclaration; }
		
		//'string'
		public Keyword getPK_STRINGStringKeyword_0() { return cPK_STRINGStringKeyword_0; }
	}
	public class Wide_string_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.wide_string_type");
		private final EnumLiteralDeclaration cPK_WSTRINGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_WSTRINGWstringKeyword_0 = (Keyword)cPK_WSTRINGEnumLiteralDeclaration.eContents().get(0);
		
		//enum wide_string_type returns idlmm::PrimitiveKind:
		//	PK_WSTRING='wstring';
		public EnumRule getRule() { return rule; }
		
		//PK_WSTRING='wstring'
		public EnumLiteralDeclaration getPK_WSTRINGEnumLiteralDeclaration() { return cPK_WSTRINGEnumLiteralDeclaration; }
		
		//'wstring'
		public Keyword getPK_WSTRINGWstringKeyword_0() { return cPK_WSTRINGWstringKeyword_0; }
	}
	public class Boolean_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.boolean_type");
		private final EnumLiteralDeclaration cPK_BOOLEANEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_BOOLEANBooleanKeyword_0 = (Keyword)cPK_BOOLEANEnumLiteralDeclaration.eContents().get(0);
		
		//enum boolean_type returns idlmm::PrimitiveKind:
		//	PK_BOOLEAN='boolean';
		public EnumRule getRule() { return rule; }
		
		//PK_BOOLEAN='boolean'
		public EnumLiteralDeclaration getPK_BOOLEANEnumLiteralDeclaration() { return cPK_BOOLEANEnumLiteralDeclaration; }
		
		//'boolean'
		public Keyword getPK_BOOLEANBooleanKeyword_0() { return cPK_BOOLEANBooleanKeyword_0; }
	}
	public class Octet_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.octet_type");
		private final EnumLiteralDeclaration cPK_OCTETEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_OCTETOctetKeyword_0 = (Keyword)cPK_OCTETEnumLiteralDeclaration.eContents().get(0);
		
		//enum octet_type returns idlmm::PrimitiveKind:
		//	PK_OCTET='octet';
		public EnumRule getRule() { return rule; }
		
		//PK_OCTET='octet'
		public EnumLiteralDeclaration getPK_OCTETEnumLiteralDeclaration() { return cPK_OCTETEnumLiteralDeclaration; }
		
		//'octet'
		public Keyword getPK_OCTETOctetKeyword_0() { return cPK_OCTETOctetKeyword_0; }
	}
	public class Any_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.any_type");
		private final EnumLiteralDeclaration cPK_ANYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_ANYAnyKeyword_0 = (Keyword)cPK_ANYEnumLiteralDeclaration.eContents().get(0);
		
		//enum any_type returns idlmm::PrimitiveKind:
		//	PK_ANY='any';
		public EnumRule getRule() { return rule; }
		
		//PK_ANY='any'
		public EnumLiteralDeclaration getPK_ANYEnumLiteralDeclaration() { return cPK_ANYEnumLiteralDeclaration; }
		
		//'any'
		public Keyword getPK_ANYAnyKeyword_0() { return cPK_ANYAnyKeyword_0; }
	}
	public class Object_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.object_type");
		private final EnumLiteralDeclaration cPK_OBJREFEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_OBJREFObjectKeyword_0 = (Keyword)cPK_OBJREFEnumLiteralDeclaration.eContents().get(0);
		
		//enum object_type returns idlmm::PrimitiveKind:
		//	PK_OBJREF='Object';
		public EnumRule getRule() { return rule; }
		
		//PK_OBJREF='Object'
		public EnumLiteralDeclaration getPK_OBJREFEnumLiteralDeclaration() { return cPK_OBJREFEnumLiteralDeclaration; }
		
		//'Object'
		public Keyword getPK_OBJREFObjectKeyword_0() { return cPK_OBJREFObjectKeyword_0; }
	}
	public class Void_typeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.void_type");
		private final EnumLiteralDeclaration cPK_VOIDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPK_VOIDVoidKeyword_0 = (Keyword)cPK_VOIDEnumLiteralDeclaration.eContents().get(0);
		
		//enum void_type returns idlmm::PrimitiveKind:
		//	PK_VOID='void';
		public EnumRule getRule() { return rule; }
		
		//PK_VOID='void'
		public EnumLiteralDeclaration getPK_VOIDEnumLiteralDeclaration() { return cPK_VOIDEnumLiteralDeclaration; }
		
		//'void'
		public Keyword getPK_VOIDVoidKeyword_0() { return cPK_VOIDVoidKeyword_0; }
	}
	public class IntegerCalculationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerCalculationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IntegerCalculationOperator returns se::SEIntegerCalculationOperator:
		//	ADD='+' | SUBRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBRACT='-'
		public EnumLiteralDeclaration getSUBRACTEnumLiteralDeclaration_1() { return cSUBRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBRACTHyphenMinusKeyword_1_0() { return cSUBRACTHyphenMinusKeyword_1_0; }
	}
	public class IntegerComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.IntegerComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSMALLEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSMALLERLessThanSignKeyword_0_0 = (Keyword)cSMALLEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLER_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSMALLER_EQUALSLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSMALLER_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQUALSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUALSGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATERGreaterThanSignKeyword_4_0 = (Keyword)cGREATEREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum IntegerComparisonOperator returns se::SEIntegerComparisonOperator:
		//	SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>';
		public EnumRule getRule() { return rule; }
		
		//SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SMALLER='<'
		public EnumLiteralDeclaration getSMALLEREnumLiteralDeclaration_0() { return cSMALLEREnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getSMALLERLessThanSignKeyword_0_0() { return cSMALLERLessThanSignKeyword_0_0; }
		
		//SMALLER_EQUALS='<='
		public EnumLiteralDeclaration getSMALLER_EQUALSEnumLiteralDeclaration_1() { return cSMALLER_EQUALSEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getSMALLER_EQUALSLessThanSignEqualsSignKeyword_1_0() { return cSMALLER_EQUALSLessThanSignEqualsSignKeyword_1_0; }
		
		//EQUALS='=='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_2() { return cEQUALSEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_2_0() { return cEQUALSEqualsSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQUALS='>='
		public EnumLiteralDeclaration getGREATER_EQUALSEnumLiteralDeclaration_3() { return cGREATER_EQUALSEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_EQUALSGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUALSGreaterThanSignEqualsSignKeyword_3_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_4() { return cGREATEREnumLiteralDeclaration_4; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_4_0() { return cGREATERGreaterThanSignKeyword_4_0; }
	}
	public class BooleanUnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanUnaryOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum BooleanUnaryOperator returns se::SEBooleanUnaryOperator:
		//	NOT='!';
		public EnumRule getRule() { return rule; }
		
		//NOT='!'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	public class BooleanBinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.BooleanBinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanBinaryOperator returns se::SEBooleanBinaryOperator:
		//	AND='&' | OR='|';
		public EnumRule getRule() { return rule; }
		
		//AND='&' | OR='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}
	
	private final SystemElements pSystem;
	private final HWComponentElements pHWComponent;
	private final SensorElements pSensor;
	private final ActuatorElements pActuator;
	private final BoardElements pBoard;
	private final BoardTypeElements eBoardType;
	private final SketchElements pSketch;
	private final IotOperationDefElements pIotOperationDef;
	private final OperationDefElements pOperationDef;
	private final IdlStmtElements pIdlStmt;
	private final ParameterDefElements pParameterDef;
	private final Param_attributeElements eParam_attribute;
	private final PrimitiveDefElements pPrimitiveDef;
	private final Floating_pt_typeElements pFloating_pt_type;
	private final Float_typeElements eFloat_type;
	private final Double_typeElements eDouble_type;
	private final Longdouble_typeElements pLongdouble_type;
	private final Integer_typeElements pInteger_type;
	private final Short_typeElements eShort_type;
	private final Long_typeElements eLong_type;
	private final Longlong_typeElements pLonglong_type;
	private final Ushort_typeElements pUshort_type;
	private final Ulong_typeElements pUlong_type;
	private final Ulonglong_typeElements pUlonglong_type;
	private final Charstr_typeElements pCharstr_type;
	private final Char_typeElements eChar_type;
	private final Wide_char_typeElements eWide_char_type;
	private final String_typeElements eString_type;
	private final Wide_string_typeElements eWide_string_type;
	private final Other_typeElements pOther_type;
	private final Boolean_typeElements eBoolean_type;
	private final Octet_typeElements eOctet_type;
	private final Any_typeElements eAny_type;
	private final Object_typeElements eObject_type;
	private final Void_typeElements eVoid_type;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final PrintElements pPrint;
	private final AssignElements pAssign;
	private final IfStmtElements pIfStmt;
	private final EqualityTestElements pEqualityTest;
	private final ASPlusElements pASPlus;
	private final ASMinusElements pASMinus;
	private final ArithElements pArith;
	private final ParenthesisElements pParenthesis;
	private final ALLitElements pALLit;
	private final VarRefElements pVarRef;
	private final RandElements pRand;
	private final TerminalRule tINTEGER;
	private final IotActivityElements pIotActivity;
	private final ActivityElements pActivity;
	private final ActivityNodeElements pActivityNode;
	private final ActivityEdgeElements pActivityEdge;
	private final VariableElements pVariable;
	private final OpaqueActionElements pOpaqueAction;
	private final ExpBindOpDefElements pExpBindOpDef;
	private final ExpBindStatementElements pExpBindStatement;
	private final ExpressionElements pExpression;
	private final IntegerCalculationOperatorElements eIntegerCalculationOperator;
	private final IntegerComparisonOperatorElements eIntegerComparisonOperator;
	private final BooleanUnaryOperatorElements eBooleanUnaryOperator;
	private final BooleanBinaryOperatorElements eBooleanBinaryOperator;
	private final IntegerCalculationExpressionElements pIntegerCalculationExpression;
	private final IntegerComparisonExpressionElements pIntegerComparisonExpression;
	private final BooleanUnaryExpressionElements pBooleanUnaryExpression;
	private final BooleanBinaryExpressionElements pBooleanBinaryExpression;
	private final InitialNodeElements pInitialNode;
	private final ActivityFinalNodeElements pActivityFinalNode;
	private final ForkNodeElements pForkNode;
	private final JoinNodeElements pJoinNode;
	private final MergeNodeElements pMergeNode;
	private final DecisionNodeElements pDecisionNode;
	private final IntegerVariableElements pIntegerVariable;
	private final BooleanVariableElements pBooleanVariable;
	private final BooleanVariableDeclElements pBooleanVariableDecl;
	private final IntegerVariableDeclElements pIntegerVariableDecl;
	private final BooleanValueElements pBooleanValue;
	private final IntegerValueElements pIntegerValue;
	private final ControlFlowElements pControlFlow;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IoTGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSystem = new SystemElements();
		this.pHWComponent = new HWComponentElements();
		this.pSensor = new SensorElements();
		this.pActuator = new ActuatorElements();
		this.pBoard = new BoardElements();
		this.eBoardType = new BoardTypeElements();
		this.pSketch = new SketchElements();
		this.pIotOperationDef = new IotOperationDefElements();
		this.pOperationDef = new OperationDefElements();
		this.pIdlStmt = new IdlStmtElements();
		this.pParameterDef = new ParameterDefElements();
		this.eParam_attribute = new Param_attributeElements();
		this.pPrimitiveDef = new PrimitiveDefElements();
		this.pFloating_pt_type = new Floating_pt_typeElements();
		this.eFloat_type = new Float_typeElements();
		this.eDouble_type = new Double_typeElements();
		this.pLongdouble_type = new Longdouble_typeElements();
		this.pInteger_type = new Integer_typeElements();
		this.eShort_type = new Short_typeElements();
		this.eLong_type = new Long_typeElements();
		this.pLonglong_type = new Longlong_typeElements();
		this.pUshort_type = new Ushort_typeElements();
		this.pUlong_type = new Ulong_typeElements();
		this.pUlonglong_type = new Ulonglong_typeElements();
		this.pCharstr_type = new Charstr_typeElements();
		this.eChar_type = new Char_typeElements();
		this.eWide_char_type = new Wide_char_typeElements();
		this.eString_type = new String_typeElements();
		this.eWide_string_type = new Wide_string_typeElements();
		this.pOther_type = new Other_typeElements();
		this.eBoolean_type = new Boolean_typeElements();
		this.eOctet_type = new Octet_typeElements();
		this.eAny_type = new Any_typeElements();
		this.eObject_type = new Object_typeElements();
		this.eVoid_type = new Void_typeElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pPrint = new PrintElements();
		this.pAssign = new AssignElements();
		this.pIfStmt = new IfStmtElements();
		this.pEqualityTest = new EqualityTestElements();
		this.pASPlus = new ASPlusElements();
		this.pASMinus = new ASMinusElements();
		this.pArith = new ArithElements();
		this.pParenthesis = new ParenthesisElements();
		this.pALLit = new ALLitElements();
		this.pVarRef = new VarRefElements();
		this.pRand = new RandElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "iot.simpleexpressions.xtext.IoT.INTEGER");
		this.pIotActivity = new IotActivityElements();
		this.pActivity = new ActivityElements();
		this.pActivityNode = new ActivityNodeElements();
		this.pActivityEdge = new ActivityEdgeElements();
		this.pVariable = new VariableElements();
		this.pOpaqueAction = new OpaqueActionElements();
		this.pExpBindOpDef = new ExpBindOpDefElements();
		this.pExpBindStatement = new ExpBindStatementElements();
		this.pExpression = new ExpressionElements();
		this.eIntegerCalculationOperator = new IntegerCalculationOperatorElements();
		this.eIntegerComparisonOperator = new IntegerComparisonOperatorElements();
		this.eBooleanUnaryOperator = new BooleanUnaryOperatorElements();
		this.eBooleanBinaryOperator = new BooleanBinaryOperatorElements();
		this.pIntegerCalculationExpression = new IntegerCalculationExpressionElements();
		this.pIntegerComparisonExpression = new IntegerComparisonExpressionElements();
		this.pBooleanUnaryExpression = new BooleanUnaryExpressionElements();
		this.pBooleanBinaryExpression = new BooleanBinaryExpressionElements();
		this.pInitialNode = new InitialNodeElements();
		this.pActivityFinalNode = new ActivityFinalNodeElements();
		this.pForkNode = new ForkNodeElements();
		this.pJoinNode = new JoinNodeElements();
		this.pMergeNode = new MergeNodeElements();
		this.pDecisionNode = new DecisionNodeElements();
		this.pIntegerVariable = new IntegerVariableElements();
		this.pBooleanVariable = new BooleanVariableElements();
		this.pBooleanVariableDecl = new BooleanVariableDeclElements();
		this.pIntegerVariableDecl = new IntegerVariableDeclElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pControlFlow = new ControlFlowElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("iot.simpleexpressions.xtext.IoT".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//System iot::System:
	//	'system' name=ID '{' (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)?
	//	sketch=Sketch?
	//	'}';
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}
	
	//HWComponent iot::HWComp:
	//	Sensor | Actuator;
	public HWComponentElements getHWComponentAccess() {
		return pHWComponent;
	}
	
	public ParserRule getHWComponentRule() {
		return getHWComponentAccess().getRule();
	}
	
	//Sensor iot::Sensor:
	//	'sensor' name=ID ('{' ('provides' services+=IotOperationDef)*
	//	'}')?;
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actuator iot::Actuator:
	//	'actuator' name=ID ('{' ('provides' services+=IotOperationDef)*
	//	'}')?;
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//Board iot::Board:
	//	{iot::Board}
	//	'board' name=ID '[' type=BoardType ']' ('{' ('provides' components+=[iot::HWComp])*
	//	'}')?;
	public BoardElements getBoardAccess() {
		return pBoard;
	}
	
	public ParserRule getBoardRule() {
		return getBoardAccess().getRule();
	}
	
	//enum BoardType returns iot::BoardType:
	//	RaspberryPi | Arduino | BeagleBoard;
	public BoardTypeElements getBoardTypeAccess() {
		return eBoardType;
	}
	
	public EnumRule getBoardTypeRule() {
		return getBoardTypeAccess().getRule();
	}
	
	//Sketch iot::Sketch:
	//	{iot::Sketch}
	//	'sketch'
	//	'{'
	//	activity=IotActivity
	//	'}';
	public SketchElements getSketchAccess() {
		return pSketch;
	}
	
	public ParserRule getSketchRule() {
		return getSketchAccess().getRule();
	}
	
	//IotOperationDef iot::IotOperationDef:
	//	{iot_se::IotOperationDefBindOperationDef} delegate=OperationDef;
	public IotOperationDefElements getIotOperationDefAccess() {
		return pIotOperationDef;
	}
	
	public ParserRule getIotOperationDefRule() {
		return getIotOperationDefAccess().getRule();
	}
	
	//OperationDef idlmm::OperationDef:
	//	'operation'
	//	identifier=ID
	//	'(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')'
	//	'{'
	//	stmt=IdlStmt
	//	'}';
	public OperationDefElements getOperationDefAccess() {
		return pOperationDef;
	}
	
	public ParserRule getOperationDefRule() {
		return getOperationDefAccess().getRule();
	}
	
	//IdlStmt idlmm::IdlStmt:
	//	{iot_se::IdlStmtBindBlock} delegate=Block;
	public IdlStmtElements getIdlStmtAccess() {
		return pIdlStmt;
	}
	
	public ParserRule getIdlStmtRule() {
		return getIdlStmtAccess().getRule();
	}
	
	//ParameterDef idlmm::ParameterDef:
	//	direction=param_attribute
	//	identifier=ID;
	public ParameterDefElements getParameterDefAccess() {
		return pParameterDef;
	}
	
	public ParserRule getParameterDefRule() {
		return getParameterDefAccess().getRule();
	}
	
	//enum param_attribute returns idlmm::ParameterMode:
	//	PARAM_IN='in'
	//	| PARAM_OUT='out'
	//	| PARAM_INOUT='inout';
	public Param_attributeElements getParam_attributeAccess() {
		return eParam_attribute;
	}
	
	public EnumRule getParam_attributeRule() {
		return getParam_attributeAccess().getRule();
	}
	
	//PrimitiveDef idlmm::PrimitiveDef:
	//	integer_type
	//	| floating_pt_type
	//	| charstr_type
	//	| other_type;
	public PrimitiveDefElements getPrimitiveDefAccess() {
		return pPrimitiveDef;
	}
	
	public ParserRule getPrimitiveDefRule() {
		return getPrimitiveDefAccess().getRule();
	}
	
	////---------------------------
	//// BASE TYPES
	////---------------------------
	//floating_pt_type idlmm::PrimitiveDef:
	//	kind=float_type
	//	| kind=double_type
	//	| kind=longdouble_type;
	public Floating_pt_typeElements getFloating_pt_typeAccess() {
		return pFloating_pt_type;
	}
	
	public ParserRule getFloating_pt_typeRule() {
		return getFloating_pt_typeAccess().getRule();
	}
	
	//enum float_type returns idlmm::PrimitiveKind:
	//	PK_FLOAT='float';
	public Float_typeElements getFloat_typeAccess() {
		return eFloat_type;
	}
	
	public EnumRule getFloat_typeRule() {
		return getFloat_typeAccess().getRule();
	}
	
	//enum double_type returns idlmm::PrimitiveKind:
	//	PK_DOUBLE='double';
	public Double_typeElements getDouble_typeAccess() {
		return eDouble_type;
	}
	
	public EnumRule getDouble_typeRule() {
		return getDouble_typeAccess().getRule();
	}
	
	//longdouble_type idlmm::PrimitiveKind:
	//	'long' 'double';
	public Longdouble_typeElements getLongdouble_typeAccess() {
		return pLongdouble_type;
	}
	
	public ParserRule getLongdouble_typeRule() {
		return getLongdouble_typeAccess().getRule();
	}
	
	//integer_type idlmm::PrimitiveDef:
	//	kind=short_type
	//	| kind=long_type
	//	| kind=longlong_type
	//	| kind=ushort_type
	//	| kind=ulong_type
	//	| kind=ulonglong_type;
	public Integer_typeElements getInteger_typeAccess() {
		return pInteger_type;
	}
	
	public ParserRule getInteger_typeRule() {
		return getInteger_typeAccess().getRule();
	}
	
	//enum short_type returns idlmm::PrimitiveKind:
	//	PK_SHORT='short';
	public Short_typeElements getShort_typeAccess() {
		return eShort_type;
	}
	
	public EnumRule getShort_typeRule() {
		return getShort_typeAccess().getRule();
	}
	
	//enum long_type returns idlmm::PrimitiveKind:
	//	PK_LONG='long';
	public Long_typeElements getLong_typeAccess() {
		return eLong_type;
	}
	
	public EnumRule getLong_typeRule() {
		return getLong_typeAccess().getRule();
	}
	
	//longlong_type idlmm::PrimitiveKind:
	//	'long' 'long';
	public Longlong_typeElements getLonglong_typeAccess() {
		return pLonglong_type;
	}
	
	public ParserRule getLonglong_typeRule() {
		return getLonglong_typeAccess().getRule();
	}
	
	//ushort_type idlmm::PrimitiveKind:
	//	'unsigned' 'short';
	public Ushort_typeElements getUshort_typeAccess() {
		return pUshort_type;
	}
	
	public ParserRule getUshort_typeRule() {
		return getUshort_typeAccess().getRule();
	}
	
	//ulong_type idlmm::PrimitiveKind:
	//	'unsigned' 'long';
	public Ulong_typeElements getUlong_typeAccess() {
		return pUlong_type;
	}
	
	public ParserRule getUlong_typeRule() {
		return getUlong_typeAccess().getRule();
	}
	
	//ulonglong_type idlmm::PrimitiveKind:
	//	'unsigned' 'long' 'long';
	public Ulonglong_typeElements getUlonglong_typeAccess() {
		return pUlonglong_type;
	}
	
	public ParserRule getUlonglong_typeRule() {
		return getUlonglong_typeAccess().getRule();
	}
	
	//charstr_type idlmm::PrimitiveDef:
	//	kind=char_type
	//	| kind=wide_char_type
	//	| kind=string_type
	//	| kind=wide_string_type;
	public Charstr_typeElements getCharstr_typeAccess() {
		return pCharstr_type;
	}
	
	public ParserRule getCharstr_typeRule() {
		return getCharstr_typeAccess().getRule();
	}
	
	//enum char_type returns idlmm::PrimitiveKind:
	//	PK_CHAR='char';
	public Char_typeElements getChar_typeAccess() {
		return eChar_type;
	}
	
	public EnumRule getChar_typeRule() {
		return getChar_typeAccess().getRule();
	}
	
	//enum wide_char_type returns idlmm::PrimitiveKind:
	//	PK_WCHAR='wchar';
	public Wide_char_typeElements getWide_char_typeAccess() {
		return eWide_char_type;
	}
	
	public EnumRule getWide_char_typeRule() {
		return getWide_char_typeAccess().getRule();
	}
	
	//enum string_type returns idlmm::PrimitiveKind:
	//	PK_STRING='string';
	public String_typeElements getString_typeAccess() {
		return eString_type;
	}
	
	public EnumRule getString_typeRule() {
		return getString_typeAccess().getRule();
	}
	
	//enum wide_string_type returns idlmm::PrimitiveKind:
	//	PK_WSTRING='wstring';
	public Wide_string_typeElements getWide_string_typeAccess() {
		return eWide_string_type;
	}
	
	public EnumRule getWide_string_typeRule() {
		return getWide_string_typeAccess().getRule();
	}
	
	//other_type idlmm::PrimitiveDef:
	//	kind=boolean_type
	//	| kind=octet_type
	//	| kind=any_type;
	public Other_typeElements getOther_typeAccess() {
		return pOther_type;
	}
	
	public ParserRule getOther_typeRule() {
		return getOther_typeAccess().getRule();
	}
	
	//enum boolean_type returns idlmm::PrimitiveKind:
	//	PK_BOOLEAN='boolean';
	public Boolean_typeElements getBoolean_typeAccess() {
		return eBoolean_type;
	}
	
	public EnumRule getBoolean_typeRule() {
		return getBoolean_typeAccess().getRule();
	}
	
	//enum octet_type returns idlmm::PrimitiveKind:
	//	PK_OCTET='octet';
	public Octet_typeElements getOctet_typeAccess() {
		return eOctet_type;
	}
	
	public EnumRule getOctet_typeRule() {
		return getOctet_typeAccess().getRule();
	}
	
	//enum any_type returns idlmm::PrimitiveKind:
	//	PK_ANY='any';
	public Any_typeElements getAny_typeAccess() {
		return eAny_type;
	}
	
	public EnumRule getAny_typeRule() {
		return getAny_typeAccess().getRule();
	}
	
	//enum object_type returns idlmm::PrimitiveKind:
	//	PK_OBJREF='Object';
	public Object_typeElements getObject_typeAccess() {
		return eObject_type;
	}
	
	public EnumRule getObject_typeRule() {
		return getObject_typeAccess().getRule();
	}
	
	//enum void_type returns idlmm::PrimitiveKind:
	//	PK_VOID='void';
	public Void_typeElements getVoid_typeAccess() {
		return eVoid_type;
	}
	
	public EnumRule getVoid_typeRule() {
		return getVoid_typeAccess().getRule();
	}
	
	//Block al::Block:
	//	{al::Block} stmts+=Statement*;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement al::Stmt:
	//	Print | Assign | IfStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Print al::Print:
	//	{al::Print}
	//	'println' '(' name=STRING ')';
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	//Assign al::Assign:
	//	name=ID '=' val=ASPlus;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}
	
	//IfStmt al::IfStmt:
	//	'if' '(' test=EqualityTest ')' 'then'
	//	ifBranch=Assign ('else'
	//	elseBranch=Assign)?
	//	'end';
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//EqualityTest al::EqualityTest:
	//	lhs=ASPlus '==' rhs=ASPlus;
	public EqualityTestElements getEqualityTestAccess() {
		return pEqualityTest;
	}
	
	public ParserRule getEqualityTestRule() {
		return getEqualityTestAccess().getRule();
	}
	
	//ASPlus al::Arith:
	//	ASMinus ({al::ArithPlus.lhs=current} '+' rhs=Arith)?;
	public ASPlusElements getASPlusAccess() {
		return pASPlus;
	}
	
	public ParserRule getASPlusRule() {
		return getASPlusAccess().getRule();
	}
	
	//ASMinus al::Arith:
	//	Arith ({al::ArithMinus.lhs=current} '-' rhs=Arith)?;
	public ASMinusElements getASMinusAccess() {
		return pASMinus;
	}
	
	public ParserRule getASMinusRule() {
		return getASMinusAccess().getRule();
	}
	
	//Arith al::Arith:
	//	ALLit | VarRef | Rand | Parenthesis;
	public ArithElements getArithAccess() {
		return pArith;
	}
	
	public ParserRule getArithRule() {
		return getArithAccess().getRule();
	}
	
	//Parenthesis al::Arith:
	//	'(' ASPlus ')';
	public ParenthesisElements getParenthesisAccess() {
		return pParenthesis;
	}
	
	public ParserRule getParenthesisRule() {
		return getParenthesisAccess().getRule();
	}
	
	//ALLit al::Arith:
	//	{al::ArithLit} val=INTEGER;
	public ALLitElements getALLitAccess() {
		return pALLit;
	}
	
	public ParserRule getALLitRule() {
		return getALLitAccess().getRule();
	}
	
	//VarRef al::Arith:
	//	{al::ALVarRef} name=ID;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	//Rand al::RandRange:
	//	'rand' '(' min=INTEGER ',' max=INTEGER ')';
	public RandElements getRandAccess() {
		return pRand;
	}
	
	public ParserRule getRandRule() {
		return getRandAccess().getRule();
	}
	
	//terminal INTEGER returns ecore::EInt:
	//	'-'? INT;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//IotActivity iot::IotActivity:
	//	{iot_se::IoTActivityBindActivity} delegate=Activity;
	public IotActivityElements getIotActivityAccess() {
		return pIotActivity;
	}
	
	public ParserRule getIotActivityRule() {
		return getIotActivityAccess().getRule();
	}
	
	//Activity activitydiagram::Activity:
	//	{activitydiagram::Activity}
	//	'activity'
	//	name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')?
	//	'{' (locals+=Variable ("," locals+=Variable)*)? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
	//	('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
	//	'}';
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}
	
	//ActivityNode activitydiagram::ActivityNode:
	//	OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;
	public ActivityNodeElements getActivityNodeAccess() {
		return pActivityNode;
	}
	
	public ParserRule getActivityNodeRule() {
		return getActivityNodeAccess().getRule();
	}
	
	//ActivityEdge activitydiagram::ActivityEdge:
	//	ControlFlow;
	public ActivityEdgeElements getActivityEdgeAccess() {
		return pActivityEdge;
	}
	
	public ParserRule getActivityEdgeRule() {
		return getActivityEdgeAccess().getRule();
	}
	
	//Variable activitydiagram::Variable:
	//	IntegerVariable | BooleanVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//OpaqueAction activitydiagram::OpaqueAction:
	//	{activitydiagram::OpaqueAction}
	//	'action'
	//	name=ID ('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')? ('in' '('
	//	incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')? ('out' '('
	//	outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')? ('service'
	//	expressions+=ExpBindOpDef)?;
	public OpaqueActionElements getOpaqueActionAccess() {
		return pOpaqueAction;
	}
	
	public ParserRule getOpaqueActionRule() {
		return getOpaqueActionAccess().getRule();
	}
	
	//ExpBindOpDef activitydiagram::Exp:
	//	{iot_se::ExpressionBindOperationDef} delegate=[idlmm::OperationDef];
	public ExpBindOpDefElements getExpBindOpDefAccess() {
		return pExpBindOpDef;
	}
	
	public ParserRule getExpBindOpDefRule() {
		return getExpBindOpDefAccess().getRule();
	}
	
	//ExpBindStatement activitydiagram::Exp:
	//	{iot_se::ExpressionBindSEExpression} delegate=Expression;
	public ExpBindStatementElements getExpBindStatementAccess() {
		return pExpBindStatement;
	}
	
	public ParserRule getExpBindStatementRule() {
		return getExpBindStatementAccess().getRule();
	}
	
	//Expression se::SEExpression:
	//	IntegerCalculationExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//enum IntegerCalculationOperator returns se::SEIntegerCalculationOperator:
	//	ADD='+' | SUBRACT='-';
	public IntegerCalculationOperatorElements getIntegerCalculationOperatorAccess() {
		return eIntegerCalculationOperator;
	}
	
	public EnumRule getIntegerCalculationOperatorRule() {
		return getIntegerCalculationOperatorAccess().getRule();
	}
	
	//enum IntegerComparisonOperator returns se::SEIntegerComparisonOperator:
	//	SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>';
	public IntegerComparisonOperatorElements getIntegerComparisonOperatorAccess() {
		return eIntegerComparisonOperator;
	}
	
	public EnumRule getIntegerComparisonOperatorRule() {
		return getIntegerComparisonOperatorAccess().getRule();
	}
	
	//enum BooleanUnaryOperator returns se::SEBooleanUnaryOperator:
	//	NOT='!';
	public BooleanUnaryOperatorElements getBooleanUnaryOperatorAccess() {
		return eBooleanUnaryOperator;
	}
	
	public EnumRule getBooleanUnaryOperatorRule() {
		return getBooleanUnaryOperatorAccess().getRule();
	}
	
	//enum BooleanBinaryOperator returns se::SEBooleanBinaryOperator:
	//	AND='&' | OR='|';
	public BooleanBinaryOperatorElements getBooleanBinaryOperatorAccess() {
		return eBooleanBinaryOperator;
	}
	
	public EnumRule getBooleanBinaryOperatorRule() {
		return getBooleanBinaryOperatorAccess().getRule();
	}
	
	//IntegerCalculationExpression se::SEIntegerCalculationExpression:
	//	assignee=[se::SEIntegerVariable] '='
	//	operand1=[se::SEIntegerVariable] operator=IntegerCalculationOperator
	//	operand2=[se::SEIntegerVariable];
	public IntegerCalculationExpressionElements getIntegerCalculationExpressionAccess() {
		return pIntegerCalculationExpression;
	}
	
	public ParserRule getIntegerCalculationExpressionRule() {
		return getIntegerCalculationExpressionAccess().getRule();
	}
	
	//IntegerComparisonExpression se::SEIntegerComparisonExpression:
	//	assignee=[se::SEBooleanVariable] '='
	//	operand1=[se::SEIntegerVariable] operator=IntegerComparisonOperator
	//	operand2=[se::SEIntegerVariable];
	public IntegerComparisonExpressionElements getIntegerComparisonExpressionAccess() {
		return pIntegerComparisonExpression;
	}
	
	public ParserRule getIntegerComparisonExpressionRule() {
		return getIntegerComparisonExpressionAccess().getRule();
	}
	
	//BooleanUnaryExpression se::SEBooleanUnaryExpression:
	//	assignee=[se::SEBooleanVariable] '='
	//	operator=BooleanUnaryOperator
	//	operand=[se::SEBooleanVariable];
	public BooleanUnaryExpressionElements getBooleanUnaryExpressionAccess() {
		return pBooleanUnaryExpression;
	}
	
	public ParserRule getBooleanUnaryExpressionRule() {
		return getBooleanUnaryExpressionAccess().getRule();
	}
	
	//BooleanBinaryExpression se::SEBooleanBinaryExpression:
	//	assignee=[se::SEBooleanVariable] '='
	//	operand1=[se::SEBooleanVariable] operator=BooleanBinaryOperator
	//	operand2=[se::SEBooleanVariable];
	public BooleanBinaryExpressionElements getBooleanBinaryExpressionAccess() {
		return pBooleanBinaryExpression;
	}
	
	public ParserRule getBooleanBinaryExpressionRule() {
		return getBooleanBinaryExpressionAccess().getRule();
	}
	
	//InitialNode activitydiagram::InitialNode:
	//	{activitydiagram::InitialNode}
	//	'initial'
	//	name=ID ('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')');
	public InitialNodeElements getInitialNodeAccess() {
		return pInitialNode;
	}
	
	public ParserRule getInitialNodeRule() {
		return getInitialNodeAccess().getRule();
	}
	
	//ActivityFinalNode activitydiagram::ActivityFinalNode:
	//	{activitydiagram::ActivityFinalNode}
	//	'final'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')');
	public ActivityFinalNodeElements getActivityFinalNodeAccess() {
		return pActivityFinalNode;
	}
	
	public ParserRule getActivityFinalNodeRule() {
		return getActivityFinalNodeAccess().getRule();
	}
	
	//ForkNode activitydiagram::ForkNode:
	//	{activitydiagram::ForkNode}
	//	'fork'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
	//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
	public ForkNodeElements getForkNodeAccess() {
		return pForkNode;
	}
	
	public ParserRule getForkNodeRule() {
		return getForkNodeAccess().getRule();
	}
	
	//JoinNode activitydiagram::JoinNode:
	//	{activitydiagram::JoinNode}
	//	'join'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
	public JoinNodeElements getJoinNodeAccess() {
		return pJoinNode;
	}
	
	public ParserRule getJoinNodeRule() {
		return getJoinNodeAccess().getRule();
	}
	
	//MergeNode activitydiagram::MergeNode:
	//	{activitydiagram::MergeNode}
	//	'merge'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	//	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');
	public MergeNodeElements getMergeNodeAccess() {
		return pMergeNode;
	}
	
	public ParserRule getMergeNodeRule() {
		return getMergeNodeAccess().getRule();
	}
	
	//DecisionNode activitydiagram::DecisionNode:
	//	{activitydiagram::DecisionNode}
	//	'decision'
	//	name=ID ('in' '(' incoming+=[activitydiagram::ActivityEdge] ')') ('out' '(' outgoing+=[activitydiagram::ActivityEdge]
	//	("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;
	public DecisionNodeElements getDecisionNodeAccess() {
		return pDecisionNode;
	}
	
	public ParserRule getDecisionNodeRule() {
		return getDecisionNodeAccess().getRule();
	}
	
	//IntegerVariable activitydiagram::IntegerVariable:
	//	{iot_se::IntegerVariableBindSEIntegerVariable}
	//	'int' delegate=IntegerVariableDecl;
	public IntegerVariableElements getIntegerVariableAccess() {
		return pIntegerVariable;
	}
	
	public ParserRule getIntegerVariableRule() {
		return getIntegerVariableAccess().getRule();
	}
	
	//BooleanVariable activitydiagram::BooleanVariable:
	//	{iot_se::BooleanVariableBindSEBooleanVariable}
	//	'bool' delegate=BooleanVariableDecl;
	public BooleanVariableElements getBooleanVariableAccess() {
		return pBooleanVariable;
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}
	
	//BooleanVariableDecl se::SEBooleanVariable:
	//	name=ID '=' initialValue=BooleanValue;
	public BooleanVariableDeclElements getBooleanVariableDeclAccess() {
		return pBooleanVariableDecl;
	}
	
	public ParserRule getBooleanVariableDeclRule() {
		return getBooleanVariableDeclAccess().getRule();
	}
	
	//IntegerVariableDecl se::SEIntegerVariable:
	//	name=ID '=' initialValue=IntegerValue;
	public IntegerVariableDeclElements getIntegerVariableDeclAccess() {
		return pIntegerVariableDecl;
	}
	
	public ParserRule getIntegerVariableDeclRule() {
		return getIntegerVariableDeclAccess().getRule();
	}
	
	//BooleanValue se::SEBooleanValue:
	//	{se::SEBooleanValue} (value?='true' | 'false');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//IntegerValue se::SEIntegerValue:
	//	{se::SEIntegerValue} value=INTEGER;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//ControlFlow activitydiagram::ControlFlow:
	//	'flow'
	//	name=ID
	//	'from' source=[activitydiagram::ActivityNode]
	//	'to' target=[activitydiagram::ActivityNode] ('[' guard=[activitydiagram::BooleanVariable] ']')?;
	public ControlFlowElements getControlFlowAccess() {
		return pControlFlow;
	}
	
	public ParserRule getControlFlowRule() {
		return getControlFlowAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

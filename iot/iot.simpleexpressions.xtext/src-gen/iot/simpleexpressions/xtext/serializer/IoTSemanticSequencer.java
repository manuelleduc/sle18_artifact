/*
 * generated by Xtext 2.12.0
 */
package iot.simpleexpressions.xtext.serializer;

import activitydiagram.Activity;
import activitydiagram.ActivityFinalNode;
import activitydiagram.ActivitydiagramPackage;
import activitydiagram.ControlFlow;
import activitydiagram.DecisionNode;
import activitydiagram.ForkNode;
import activitydiagram.InitialNode;
import activitydiagram.JoinNode;
import activitydiagram.MergeNode;
import activitydiagram.OpaqueAction;
import com.google.inject.Inject;
import idlmm.IdlmmPackage;
import idlmm.OperationDef;
import idlmm.ParameterDef;
import idlmm.PrimitiveDef;
import iot.Actuator;
import iot.Board;
import iot.IotPackage;
import iot.Sensor;
import iot.Sketch;
import iot.simpleexpressions.xtext.services.IoTGrammarAccess;
import java.util.Set;
import model.BooleanVariableBindSEBooleanVariable;
import model.ExpressionBindOperationDef;
import model.ExpressionBindSEExpression;
import model.IdlStmtBindBlock;
import model.IntegerVariableBindSEIntegerVariable;
import model.IoTActivityBindActivity;
import model.IotOperationDefBindOperationDef;
import model.ModelPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import simpleALEnv.ALVarRef;
import simpleALEnv.ArithLit;
import simpleALEnv.ArithMinus;
import simpleALEnv.ArithPlus;
import simpleALEnv.Assign;
import simpleALEnv.Block;
import simpleALEnv.EqualityTest;
import simpleALEnv.IfStmt;
import simpleALEnv.Print;
import simpleALEnv.RandRange;
import simpleALEnv.SimpleALEnvPackage;
import simpleexpressions.SEBooleanBinaryExpression;
import simpleexpressions.SEBooleanUnaryExpression;
import simpleexpressions.SEBooleanValue;
import simpleexpressions.SEBooleanVariable;
import simpleexpressions.SEIntegerCalculationExpression;
import simpleexpressions.SEIntegerComparisonExpression;
import simpleexpressions.SEIntegerValue;
import simpleexpressions.SEIntegerVariable;
import simpleexpressions.SimpleexpressionsPackage;

@SuppressWarnings("all")
public class IoTSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IoTGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActivitydiagramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActivitydiagramPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ActivitydiagramPackage.ACTIVITY_FINAL_NODE:
				sequence_ActivityFinalNode(context, (ActivityFinalNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.CONTROL_FLOW:
				sequence_ControlFlow(context, (ControlFlow) semanticObject); 
				return; 
			case ActivitydiagramPackage.DECISION_NODE:
				sequence_DecisionNode(context, (DecisionNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.FORK_NODE:
				sequence_ForkNode(context, (ForkNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.JOIN_NODE:
				sequence_JoinNode(context, (JoinNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.MERGE_NODE:
				sequence_MergeNode(context, (MergeNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.OPAQUE_ACTION:
				sequence_OpaqueAction(context, (OpaqueAction) semanticObject); 
				return; 
			}
		else if (epackage == IdlmmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IdlmmPackage.OPERATION_DEF:
				sequence_OperationDef(context, (OperationDef) semanticObject); 
				return; 
			case IdlmmPackage.PARAMETER_DEF:
				sequence_ParameterDef(context, (ParameterDef) semanticObject); 
				return; 
			case IdlmmPackage.PRIMITIVE_DEF:
				if (rule == grammarAccess.getCharstr_typeRule()) {
					sequence_charstr_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPrimitiveDefRule()) {
					sequence_charstr_type_floating_pt_type_integer_type_other_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getFloating_pt_typeRule()) {
					sequence_floating_pt_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInteger_typeRule()) {
					sequence_integer_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOther_typeRule()) {
					sequence_other_type(context, (PrimitiveDef) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == IotPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IotPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case IotPackage.BOARD:
				sequence_Board(context, (Board) semanticObject); 
				return; 
			case IotPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case IotPackage.SKETCH:
				sequence_Sketch(context, (Sketch) semanticObject); 
				return; 
			case IotPackage.SYSTEM:
				sequence_System(context, (iot.System) semanticObject); 
				return; 
			}
		else if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.BOOLEAN_VARIABLE_BIND_SE_BOOLEAN_VARIABLE:
				sequence_BooleanVariable(context, (BooleanVariableBindSEBooleanVariable) semanticObject); 
				return; 
			case ModelPackage.EXPRESSION_BIND_OPERATION_DEF:
				sequence_ExpBindOpDef(context, (ExpressionBindOperationDef) semanticObject); 
				return; 
			case ModelPackage.EXPRESSION_BIND_SE_EXPRESSION:
				sequence_ExpBindStatement(context, (ExpressionBindSEExpression) semanticObject); 
				return; 
			case ModelPackage.IDL_STMT_BIND_BLOCK:
				sequence_IdlStmt(context, (IdlStmtBindBlock) semanticObject); 
				return; 
			case ModelPackage.INTEGER_VARIABLE_BIND_SE_INTEGER_VARIABLE:
				sequence_IntegerVariable(context, (IntegerVariableBindSEIntegerVariable) semanticObject); 
				return; 
			case ModelPackage.IO_TACTIVITY_BIND_ACTIVITY:
				sequence_IotActivity(context, (IoTActivityBindActivity) semanticObject); 
				return; 
			case ModelPackage.IOT_OPERATION_DEF_BIND_OPERATION_DEF:
				sequence_IotOperationDef(context, (IotOperationDefBindOperationDef) semanticObject); 
				return; 
			}
		else if (epackage == SimpleALEnvPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleALEnvPackage.AL_VAR_REF:
				sequence_VarRef(context, (ALVarRef) semanticObject); 
				return; 
			case SimpleALEnvPackage.ARITH_LIT:
				sequence_ALLit(context, (ArithLit) semanticObject); 
				return; 
			case SimpleALEnvPackage.ARITH_MINUS:
				sequence_ASMinus(context, (ArithMinus) semanticObject); 
				return; 
			case SimpleALEnvPackage.ARITH_PLUS:
				sequence_ASPlus(context, (ArithPlus) semanticObject); 
				return; 
			case SimpleALEnvPackage.ASSIGN:
				sequence_Assign(context, (Assign) semanticObject); 
				return; 
			case SimpleALEnvPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case SimpleALEnvPackage.EQUALITY_TEST:
				sequence_EqualityTest(context, (EqualityTest) semanticObject); 
				return; 
			case SimpleALEnvPackage.IF_STMT:
				sequence_IfStmt(context, (IfStmt) semanticObject); 
				return; 
			case SimpleALEnvPackage.PRINT:
				sequence_Print(context, (Print) semanticObject); 
				return; 
			case SimpleALEnvPackage.RAND_RANGE:
				sequence_Rand(context, (RandRange) semanticObject); 
				return; 
			}
		else if (epackage == SimpleexpressionsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpleexpressionsPackage.SE_BOOLEAN_BINARY_EXPRESSION:
				sequence_BooleanBinaryExpression(context, (SEBooleanBinaryExpression) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_BOOLEAN_UNARY_EXPRESSION:
				sequence_BooleanUnaryExpression(context, (SEBooleanUnaryExpression) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_BOOLEAN_VALUE:
				sequence_BooleanValue(context, (SEBooleanValue) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_BOOLEAN_VARIABLE:
				sequence_BooleanVariableDecl(context, (SEBooleanVariable) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_INTEGER_CALCULATION_EXPRESSION:
				sequence_IntegerCalculationExpression(context, (SEIntegerCalculationExpression) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_INTEGER_COMPARISON_EXPRESSION:
				sequence_IntegerComparisonExpression(context, (SEIntegerComparisonExpression) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_INTEGER_VALUE:
				sequence_IntegerValue(context, (SEIntegerValue) semanticObject); 
				return; 
			case SimpleexpressionsPackage.SE_INTEGER_VARIABLE:
				sequence_IntegerVariableDecl(context, (SEIntegerVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ASPlus returns ArithLit
	 *     ASPlus.ArithPlus_1_0 returns ArithLit
	 *     ASMinus returns ArithLit
	 *     ASMinus.ArithMinus_1_0 returns ArithLit
	 *     Arith returns ArithLit
	 *     Parenthesis returns ArithLit
	 *     ALLit returns ArithLit
	 *
	 * Constraint:
	 *     val=INTEGER
	 */
	protected void sequence_ALLit(ISerializationContext context, ArithLit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ARITH_LIT__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ARITH_LIT__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALLitAccess().getValINTEGERTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ASPlus returns ArithMinus
	 *     ASPlus.ArithPlus_1_0 returns ArithMinus
	 *     ASMinus returns ArithMinus
	 *     ASMinus.ArithMinus_1_0 returns ArithMinus
	 *     Arith returns ArithMinus
	 *     Parenthesis returns ArithMinus
	 *
	 * Constraint:
	 *     (lhs=ASMinus_ArithMinus_1_0 rhs=Arith)
	 */
	protected void sequence_ASMinus(ISerializationContext context, ArithMinus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__LHS));
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getASMinusAccess().getArithMinusLhsAction_1_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getASMinusAccess().getRhsArithParserRuleCall_1_2_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ASPlus returns ArithPlus
	 *     ASPlus.ArithPlus_1_0 returns ArithPlus
	 *     ASMinus returns ArithPlus
	 *     ASMinus.ArithMinus_1_0 returns ArithPlus
	 *     Arith returns ArithPlus
	 *     Parenthesis returns ArithPlus
	 *
	 * Constraint:
	 *     (lhs=ASPlus_ArithPlus_1_0 rhs=Arith)
	 */
	protected void sequence_ASPlus(ISerializationContext context, ArithPlus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__LHS));
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ARITH_OP__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getASPlusAccess().getArithPlusLhsAction_1_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getASPlusAccess().getRhsArithParserRuleCall_1_2_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ActivityFinalNode
	 *     ActivityFinalNode returns ActivityFinalNode
	 *
	 * Constraint:
	 *     (name=ID incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)
	 */
	protected void sequence_ActivityFinalNode(ISerializationContext context, ActivityFinalNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (inputs+=Variable inputs+=Variable*)? 
	 *         (locals+=Variable locals+=Variable*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)?
	 *     )
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HWComponent returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (name=ID services+=IotOperationDef*)
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Assign
	 *     Assign returns Assign
	 *
	 * Constraint:
	 *     (name=ID val=ASPlus)
	 */
	protected void sequence_Assign(ISerializationContext context, Assign semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ASSIGN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ASSIGN__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.ASSIGN__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.ASSIGN__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssignAccess().getValASPlusParserRuleCall_2_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     stmts+=Statement*
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Board returns Board
	 *
	 * Constraint:
	 *     (name=ID type=BoardType components+=[HWComp|ID]*)
	 */
	protected void sequence_Board(ISerializationContext context, Board semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SEBooleanBinaryExpression
	 *     BooleanBinaryExpression returns SEBooleanBinaryExpression
	 *
	 * Constraint:
	 *     (assignee=[SEBooleanVariable|ID] operand1=[SEBooleanVariable|ID] operator=BooleanBinaryOperator operand2=[SEBooleanVariable|ID])
	 */
	protected void sequence_BooleanBinaryExpression(ISerializationContext context, SEBooleanBinaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE, false));
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getOperand1SEBooleanVariableIDTerminalRuleCall_2_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERAND1, false));
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getOperatorBooleanBinaryOperatorEnumRuleCall_3_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getOperand2SEBooleanVariableIDTerminalRuleCall_4_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_BOOLEAN_BINARY_EXPRESSION__OPERAND2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SEBooleanUnaryExpression
	 *     BooleanUnaryExpression returns SEBooleanUnaryExpression
	 *
	 * Constraint:
	 *     (assignee=[SEBooleanVariable|ID] operator=BooleanUnaryOperator operand=[SEBooleanVariable|ID])
	 */
	protected void sequence_BooleanUnaryExpression(ISerializationContext context, SEBooleanUnaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_UNARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_UNARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_BOOLEAN_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanUnaryExpressionAccess().getAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE, false));
		feeder.accept(grammarAccess.getBooleanUnaryExpressionAccess().getOperatorBooleanUnaryOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBooleanUnaryExpressionAccess().getOperandSEBooleanVariableIDTerminalRuleCall_3_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_BOOLEAN_UNARY_EXPRESSION__OPERAND, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BooleanValue returns SEBooleanValue
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_BooleanValue(ISerializationContext context, SEBooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BooleanVariableDecl returns SEBooleanVariable
	 *
	 * Constraint:
	 *     (name=ID initialValue=BooleanValue)
	 */
	protected void sequence_BooleanVariableDecl(ISerializationContext context, SEBooleanVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__INITIAL_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__INITIAL_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanVariableDeclAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBooleanVariableDeclAccess().getInitialValueBooleanValueParserRuleCall_2_0(), semanticObject.getInitialValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns BooleanVariableBindSEBooleanVariable
	 *     BooleanVariable returns BooleanVariableBindSEBooleanVariable
	 *
	 * Constraint:
	 *     delegate=BooleanVariableDecl
	 */
	protected void sequence_BooleanVariable(ISerializationContext context, BooleanVariableBindSEBooleanVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.BOOLEAN_VARIABLE_BIND_SE_BOOLEAN_VARIABLE__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.BOOLEAN_VARIABLE_BIND_SE_BOOLEAN_VARIABLE__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanVariableAccess().getDelegateBooleanVariableDeclParserRuleCall_2_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns ControlFlow
	 *     ControlFlow returns ControlFlow
	 *
	 * Constraint:
	 *     (name=ID source=[ActivityNode|ID] target=[ActivityNode|ID] guard=[BooleanVariable|ID]?)
	 */
	protected void sequence_ControlFlow(ISerializationContext context, ControlFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (name=ID incoming+=[ActivityEdge|ID] (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)?)
	 */
	protected void sequence_DecisionNode(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EqualityTest returns EqualityTest
	 *
	 * Constraint:
	 *     (lhs=ASPlus rhs=ASPlus)
	 */
	protected void sequence_EqualityTest(ISerializationContext context, EqualityTest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.EQUALITY_TEST__LHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.EQUALITY_TEST__LHS));
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.EQUALITY_TEST__RHS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.EQUALITY_TEST__RHS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualityTestAccess().getLhsASPlusParserRuleCall_0_0(), semanticObject.getLhs());
		feeder.accept(grammarAccess.getEqualityTestAccess().getRhsASPlusParserRuleCall_2_0(), semanticObject.getRhs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpBindOpDef returns ExpressionBindOperationDef
	 *
	 * Constraint:
	 *     delegate=[OperationDef|ID]
	 */
	protected void sequence_ExpBindOpDef(ISerializationContext context, ExpressionBindOperationDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpBindOpDefAccess().getDelegateOperationDefIDTerminalRuleCall_1_0_1(), semanticObject.eGet(ModelPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpBindStatement returns ExpressionBindSEExpression
	 *
	 * Constraint:
	 *     delegate=Expression
	 */
	protected void sequence_ExpBindStatement(ISerializationContext context, ExpressionBindSEExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.EXPRESSION_BIND_SE_EXPRESSION__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.EXPRESSION_BIND_SE_EXPRESSION__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpBindStatementAccess().getDelegateExpressionParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (name=ID incoming+=[ActivityEdge|ID] (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)?)
	 */
	protected void sequence_ForkNode(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IdlStmt returns IdlStmtBindBlock
	 *
	 * Constraint:
	 *     delegate=Block
	 */
	protected void sequence_IdlStmt(ISerializationContext context, IdlStmtBindBlock semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.IDL_STMT_BIND_BLOCK__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.IDL_STMT_BIND_BLOCK__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdlStmtAccess().getDelegateBlockParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns IfStmt
	 *     IfStmt returns IfStmt
	 *
	 * Constraint:
	 *     (test=EqualityTest ifBranch=Assign elseBranch=Assign?)
	 */
	protected void sequence_IfStmt(ISerializationContext context, IfStmt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns InitialNode
	 *     InitialNode returns InitialNode
	 *
	 * Constraint:
	 *     (name=ID outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SEIntegerCalculationExpression
	 *     IntegerCalculationExpression returns SEIntegerCalculationExpression
	 *
	 * Constraint:
	 *     (assignee=[SEIntegerVariable|ID] operand1=[SEIntegerVariable|ID] operator=IntegerCalculationOperator operand2=[SEIntegerVariable|ID])
	 */
	protected void sequence_IntegerCalculationExpression(ISerializationContext context, SEIntegerCalculationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_CALCULATION_EXPRESSION__ASSIGNEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_CALCULATION_EXPRESSION__ASSIGNEE));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_CALCULATION_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_CALCULATION_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerCalculationExpressionAccess().getAssigneeSEIntegerVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_INTEGER_CALCULATION_EXPRESSION__ASSIGNEE, false));
		feeder.accept(grammarAccess.getIntegerCalculationExpressionAccess().getOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND1, false));
		feeder.accept(grammarAccess.getIntegerCalculationExpressionAccess().getOperatorIntegerCalculationOperatorEnumRuleCall_3_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getIntegerCalculationExpressionAccess().getOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns SEIntegerComparisonExpression
	 *     IntegerComparisonExpression returns SEIntegerComparisonExpression
	 *
	 * Constraint:
	 *     (assignee=[SEBooleanVariable|ID] operand1=[SEIntegerVariable|ID] operator=IntegerComparisonOperator operand2=[SEIntegerVariable|ID])
	 */
	protected void sequence_IntegerComparisonExpression(ISerializationContext context, SEIntegerComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_COMPARISON_EXPRESSION__ASSIGNEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_COMPARISON_EXPRESSION__ASSIGNEE));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_COMPARISON_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_COMPARISON_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getAssigneeSEBooleanVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_INTEGER_COMPARISON_EXPRESSION__ASSIGNEE, false));
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getOperand1SEIntegerVariableIDTerminalRuleCall_2_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND1, false));
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getOperatorIntegerComparisonOperatorEnumRuleCall_3_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getOperand2SEIntegerVariableIDTerminalRuleCall_4_0_1(), semanticObject.eGet(SimpleexpressionsPackage.Literals.SE_INTEGER_EXPRESSION__OPERAND2, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntegerValue returns SEIntegerValue
	 *
	 * Constraint:
	 *     value=INTEGER
	 */
	protected void sequence_IntegerValue(ISerializationContext context, SEIntegerValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_INTEGER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerValueAccess().getValueINTEGERTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntegerVariableDecl returns SEIntegerVariable
	 *
	 * Constraint:
	 *     (name=ID initialValue=IntegerValue)
	 */
	protected void sequence_IntegerVariableDecl(ISerializationContext context, SEIntegerVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__INITIAL_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleexpressionsPackage.Literals.SE_VARIABLE__INITIAL_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerVariableDeclAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIntegerVariableDeclAccess().getInitialValueIntegerValueParserRuleCall_2_0(), semanticObject.getInitialValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns IntegerVariableBindSEIntegerVariable
	 *     IntegerVariable returns IntegerVariableBindSEIntegerVariable
	 *
	 * Constraint:
	 *     delegate=IntegerVariableDecl
	 */
	protected void sequence_IntegerVariable(ISerializationContext context, IntegerVariableBindSEIntegerVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.INTEGER_VARIABLE_BIND_SE_INTEGER_VARIABLE__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.INTEGER_VARIABLE_BIND_SE_INTEGER_VARIABLE__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerVariableAccess().getDelegateIntegerVariableDeclParserRuleCall_2_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IotActivity returns IoTActivityBindActivity
	 *
	 * Constraint:
	 *     delegate=Activity
	 */
	protected void sequence_IotActivity(ISerializationContext context, IoTActivityBindActivity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.IO_TACTIVITY_BIND_ACTIVITY__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.IO_TACTIVITY_BIND_ACTIVITY__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIotActivityAccess().getDelegateActivityParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IotOperationDef returns IotOperationDefBindOperationDef
	 *
	 * Constraint:
	 *     delegate=OperationDef
	 */
	protected void sequence_IotOperationDef(ISerializationContext context, IotOperationDefBindOperationDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.IOT_OPERATION_DEF_BIND_OPERATION_DEF__DELEGATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.IOT_OPERATION_DEF_BIND_OPERATION_DEF__DELEGATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIotOperationDefAccess().getDelegateOperationDefParserRuleCall_1_0(), semanticObject.getDelegate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (name=ID (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? outgoing+=[ActivityEdge|ID])
	 */
	protected void sequence_JoinNode(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (name=ID (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? outgoing+=[ActivityEdge|ID])
	 */
	protected void sequence_MergeNode(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns OpaqueAction
	 *     OpaqueAction returns OpaqueAction
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (expressions+=ExpBindStatement expressions+=ExpBindStatement*)? 
	 *         (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? 
	 *         (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)? 
	 *         expressions+=ExpBindOpDef?
	 *     )
	 */
	protected void sequence_OpaqueAction(ISerializationContext context, OpaqueAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationDef returns OperationDef
	 *
	 * Constraint:
	 *     (identifier=ID (parameters+=ParameterDef parameters+=ParameterDef*)? stmt=IdlStmt)
	 */
	protected void sequence_OperationDef(ISerializationContext context, OperationDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterDef returns ParameterDef
	 *
	 * Constraint:
	 *     (direction=param_attribute identifier=ID)
	 */
	protected void sequence_ParameterDef(ISerializationContext context, ParameterDef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__DIRECTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__DIRECTION));
			if (transientValues.isValueTransient(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__IDENTIFIER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IdlmmPackage.Literals.PARAMETER_DEF__IDENTIFIER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterDefAccess().getDirectionParam_attributeEnumRuleCall_0_0(), semanticObject.getDirection());
		feeder.accept(grammarAccess.getParameterDefAccess().getIdentifierIDTerminalRuleCall_1_0(), semanticObject.getIdentifier());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Print
	 *     Print returns Print
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Print(ISerializationContext context, Print semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.PRINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.PRINT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrintAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ASPlus returns RandRange
	 *     ASPlus.ArithPlus_1_0 returns RandRange
	 *     ASMinus returns RandRange
	 *     ASMinus.ArithMinus_1_0 returns RandRange
	 *     Arith returns RandRange
	 *     Parenthesis returns RandRange
	 *     Rand returns RandRange
	 *
	 * Constraint:
	 *     (min=INTEGER max=INTEGER)
	 */
	protected void sequence_Rand(ISerializationContext context, RandRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.RAND_RANGE__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.RAND_RANGE__MIN));
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.RAND_RANGE__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.RAND_RANGE__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRandAccess().getMinINTEGERTerminalRuleCall_2_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getRandAccess().getMaxINTEGERTerminalRuleCall_4_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HWComponent returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (name=ID services+=IotOperationDef*)
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sketch returns Sketch
	 *
	 * Constraint:
	 *     activity=IotActivity
	 */
	protected void sequence_Sketch(ISerializationContext context, Sketch semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotPackage.Literals.SKETCH__ACTIVITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotPackage.Literals.SKETCH__ACTIVITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSketchAccess().getActivityIotActivityParserRuleCall_3_0(), semanticObject.getActivity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     System returns System
	 *
	 * Constraint:
	 *     (name=ID (components+=HWComponent components+=HWComponent*)? (boards+=Board boards+=Board*)? sketch=Sketch?)
	 */
	protected void sequence_System(ISerializationContext context, iot.System semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ASPlus returns ALVarRef
	 *     ASPlus.ArithPlus_1_0 returns ALVarRef
	 *     ASMinus returns ALVarRef
	 *     ASMinus.ArithMinus_1_0 returns ALVarRef
	 *     Arith returns ALVarRef
	 *     Parenthesis returns ALVarRef
	 *     VarRef returns ALVarRef
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_VarRef(ISerializationContext context, ALVarRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpleALEnvPackage.Literals.AL_VAR_REF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpleALEnvPackage.Literals.AL_VAR_REF__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarRefAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     charstr_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (kind=char_type | kind=wide_char_type | kind=string_type | kind=wide_string_type)
	 */
	protected void sequence_charstr_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveDef returns PrimitiveDef
	 *
	 * Constraint:
	 *     (
	 *         kind=float_type | 
	 *         kind=double_type | 
	 *         kind=longdouble_type | 
	 *         kind=short_type | 
	 *         kind=long_type | 
	 *         kind=longlong_type | 
	 *         kind=ushort_type | 
	 *         kind=ulong_type | 
	 *         kind=ulonglong_type | 
	 *         kind=char_type | 
	 *         kind=wide_char_type | 
	 *         kind=string_type | 
	 *         kind=wide_string_type | 
	 *         kind=boolean_type | 
	 *         kind=octet_type | 
	 *         kind=any_type
	 *     )
	 */
	protected void sequence_charstr_type_floating_pt_type_integer_type_other_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     floating_pt_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (kind=float_type | kind=double_type | kind=longdouble_type)
	 */
	protected void sequence_floating_pt_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     integer_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (
	 *         kind=short_type | 
	 *         kind=long_type | 
	 *         kind=longlong_type | 
	 *         kind=ushort_type | 
	 *         kind=ulong_type | 
	 *         kind=ulonglong_type
	 *     )
	 */
	protected void sequence_integer_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     other_type returns PrimitiveDef
	 *
	 * Constraint:
	 *     (kind=boolean_type | kind=octet_type | kind=any_type)
	 */
	protected void sequence_other_type(ISerializationContext context, PrimitiveDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

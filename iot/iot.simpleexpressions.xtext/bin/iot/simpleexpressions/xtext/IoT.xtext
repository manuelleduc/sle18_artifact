// automatically generated by Xtext
grammar iot.simpleexpressions.xtext.IoT with org.eclipse.xtext.common.Terminals

import "platform:/resource/iot.model/model/iot.ecore" as iot
import "platform:/resource/org.xtext.activitydiagram.model/model/activitydiagram.ecore" as activitydiagram
import "platform:/resource/org.csu.idl.idlmm/model/IDLMM.ecore" as idlmm
import "platform:/resource/simpleexpressions.model/model/simpleexpressions.ecore" as se
import "platform:/resource/SimpleALEnv/model/simpleALEnv.ecore" as al
import "platform:/resource/iot.simpleexpression.model/model/model.ecore" as iot_se
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

System returns iot::System:
	'system' name=ID '{'
	(components+=HWComponent (components+=HWComponent)*)?
	(boards+=Board (boards+=Board)*)?
	(sketch=Sketch)?
	'}';

HWComponent returns iot::HWComp:
	Sensor | Actuator;

Sensor returns iot::Sensor:
	'sensor' name=ID ('{'
	('provides' services+=IotOperationDef)*
	'}')?;

Actuator returns iot::Actuator:
	'actuator' name=ID ('{'
	('provides' services+=IotOperationDef)*
	'}')?;

Board returns iot::Board:
	{iot::Board}
	'board' name=ID '[' type=BoardType ']'
	('{'
	('provides' components+=[iot::HWComp|ID])*
	'}')?;

enum BoardType returns iot::BoardType:
	RaspberryPi='RaspberryPi' | Arduino='Arduino' | BeagleBoard='BeagleBoard';

Sketch returns iot::Sketch:
	{iot::Sketch}
	'sketch'
	'{'
	activity=IotActivity
	'}';

IotOperationDef returns iot::IotOperationDef:
	{iot_se::IotOperationDefBindOperationDef}
	delegate=OperationDef;

OperationDef returns idlmm::OperationDef:
	'operation'
	identifier=ID
	'(' (parameters+=ParameterDef (',' parameters+=ParameterDef)*)? ')'
	'{'
	stmt=IdlStmt
	'}';

IdlStmt returns idlmm::IdlStmt:
	{iot_se::IdlStmtBindBlock}
	delegate=Block;

ParameterDef returns idlmm::ParameterDef:
	direction=param_attribute
	identifier=ID;

enum param_attribute returns idlmm::ParameterMode:
	PARAM_IN='in'
	| PARAM_OUT='out'
	| PARAM_INOUT='inout';

PrimitiveDef returns idlmm::PrimitiveDef:
	integer_type
	| floating_pt_type
	| charstr_type
	| other_type;

	//---------------------------
// BASE TYPES
//---------------------------
floating_pt_type returns idlmm::PrimitiveDef:
	kind=float_type
	| kind=double_type
	| kind=longdouble_type;

enum float_type returns idlmm::PrimitiveKind:
	PK_FLOAT='float';

enum double_type returns idlmm::PrimitiveKind:
	PK_DOUBLE='double';

longdouble_type returns idlmm::PrimitiveKind:
	'long' 'double';

integer_type returns idlmm::PrimitiveDef:
	kind=short_type
	| kind=long_type
	| kind=longlong_type
	| kind=ushort_type
	| kind=ulong_type
	| kind=ulonglong_type;

enum short_type returns idlmm::PrimitiveKind:
	PK_SHORT='short';

enum long_type returns idlmm::PrimitiveKind:
	PK_LONG='long';

longlong_type returns idlmm::PrimitiveKind:
	'long' 'long';

ushort_type returns idlmm::PrimitiveKind:
	'unsigned' 'short';

ulong_type returns idlmm::PrimitiveKind:
	'unsigned' 'long';

ulonglong_type returns idlmm::PrimitiveKind:
	'unsigned' 'long' 'long';

charstr_type returns idlmm::PrimitiveDef:
	kind=char_type
	| kind=wide_char_type
	| kind=string_type
	| kind=wide_string_type;

enum char_type returns idlmm::PrimitiveKind:
	PK_CHAR='char';

enum wide_char_type returns idlmm::PrimitiveKind:
	PK_WCHAR='wchar';

enum string_type returns idlmm::PrimitiveKind:
	PK_STRING='string';

enum wide_string_type returns idlmm::PrimitiveKind:
	PK_WSTRING='wstring';

other_type returns idlmm::PrimitiveDef:
	kind=boolean_type
	| kind=octet_type
	| kind=any_type;

enum boolean_type returns idlmm::PrimitiveKind:
	PK_BOOLEAN='boolean';

enum octet_type returns idlmm::PrimitiveKind:
	PK_OCTET='octet';

enum any_type returns idlmm::PrimitiveKind:
	PK_ANY='any';

enum object_type returns idlmm::PrimitiveKind:
	PK_OBJREF='Object';

enum void_type returns idlmm::PrimitiveKind:
	PK_VOID='void';

Block returns al::Block:
	{al::Block}
	(stmts+=Statement)*;

Statement returns al::Stmt:
	Print | Assign | IfStmt;

Print returns al::Print:
	{al::Print}
	'println' '(' name=STRING ')';

Assign returns al::Assign:
	name=ID '=' val=ASPlus;
	
IfStmt returns al::IfStmt:
	'if' '(' test=EqualityTest ')' 'then'
		ifBranch=Assign
	('else'
		elseBranch=Assign
	)?
	'end'
;

EqualityTest returns al::EqualityTest:
	lhs=ASPlus '==' rhs=ASPlus
;


ASPlus returns al::Arith:
	ASMinus ({al::ArithPlus.lhs=current} '+' rhs=Arith)?
;

ASMinus returns al::Arith:
	Arith ({al::ArithMinus.lhs=current} '-' rhs=Arith)?
;


Arith returns al::Arith:
	ALLit | VarRef | Rand | Parenthesis
;

Parenthesis returns al::Arith:
	'(' ASPlus ')'
;

ALLit returns al::Arith:
	{al::ArithLit}
	val=INTEGER
;

VarRef returns al::Arith:
	{al::ALVarRef}
	name=ID
;

Rand returns al::RandRange:
	'rand' '(' min=INTEGER ',' max=INTEGER ')'
;

terminal INTEGER returns ecore::EInt : '-'? INT ;

IotActivity returns iot::IotActivity:
	{iot_se::IoTActivityBindActivity}
	delegate=Activity;

Activity returns activitydiagram::Activity:
	{activitydiagram::Activity}
	'activity'
	name=ID ('(' inputs+=Variable ("," inputs+=Variable)* ')')?
	'{'
	(locals+=Variable ("," locals+=Variable)*)?
	('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
	('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
	'}';

ActivityNode returns activitydiagram::ActivityNode:
	OpaqueAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;

ActivityEdge returns activitydiagram::ActivityEdge:
	ControlFlow;

Variable returns activitydiagram::Variable:
	IntegerVariable | BooleanVariable;

OpaqueAction returns activitydiagram::OpaqueAction:
	{activitydiagram::OpaqueAction}
	'action'
	name=ID
	('comp' '{' expressions+=ExpBindStatement ("," expressions+=ExpBindStatement)* '}')?
	('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?
	('service' expressions+=ExpBindOpDef)?;

ExpBindOpDef returns activitydiagram::Exp:
	{iot_se::ExpressionBindOperationDef} delegate=[idlmm::OperationDef];

ExpBindStatement returns activitydiagram::Exp:
	{iot_se::ExpressionBindSEExpression} delegate=Expression;

Expression returns se::SEExpression:
	IntegerCalculationExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression;

enum IntegerCalculationOperator returns se::SEIntegerCalculationOperator:
	ADD='+' | SUBRACT='-';

enum IntegerComparisonOperator returns se::SEIntegerComparisonOperator:
	SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>';

enum BooleanUnaryOperator returns se::SEBooleanUnaryOperator:
	NOT='!';

enum BooleanBinaryOperator returns se::SEBooleanBinaryOperator:
	AND='&' | OR='|';

IntegerCalculationExpression returns se::SEIntegerCalculationExpression:
	assignee=[se::SEIntegerVariable] '='
	operand1=[se::SEIntegerVariable]
	operator=IntegerCalculationOperator
	operand2=[se::SEIntegerVariable];

IntegerComparisonExpression returns se::SEIntegerComparisonExpression:
	assignee=[se::SEBooleanVariable] '='
	operand1=[se::SEIntegerVariable]
	operator=IntegerComparisonOperator
	operand2=[se::SEIntegerVariable];

BooleanUnaryExpression returns se::SEBooleanUnaryExpression:
	assignee=[se::SEBooleanVariable] '='
	operator=BooleanUnaryOperator
	operand=[se::SEBooleanVariable];

BooleanBinaryExpression returns se::SEBooleanBinaryExpression:
	assignee=[se::SEBooleanVariable] '='
	operand1=[se::SEBooleanVariable]
	operator=BooleanBinaryOperator
	operand2=[se::SEBooleanVariable];

InitialNode returns activitydiagram::InitialNode:
	{activitydiagram::InitialNode}
	'initial'
	name=ID
	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')');

ActivityFinalNode returns activitydiagram::ActivityFinalNode:
	{activitydiagram::ActivityFinalNode}
	'final'
	name=ID
	('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')');

ForkNode returns activitydiagram::ForkNode:
	{activitydiagram::ForkNode}
	'fork'
	name=ID
	('in' '(' incoming+=[activitydiagram::ActivityEdge] ')')
	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;

JoinNode returns activitydiagram::JoinNode:
	{activitydiagram::JoinNode}
	'join'
	name=ID
	('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');

MergeNode returns activitydiagram::MergeNode:
	{activitydiagram::MergeNode}
	'merge'
	name=ID
	('in' '(' incoming+=[activitydiagram::ActivityEdge] ("," incoming+=[activitydiagram::ActivityEdge])* ')')?
	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ')');

DecisionNode returns activitydiagram::DecisionNode:
	{activitydiagram::DecisionNode}
	'decision'
	name=ID
	('in' '(' incoming+=[activitydiagram::ActivityEdge] ')')
	('out' '(' outgoing+=[activitydiagram::ActivityEdge] ("," outgoing+=[activitydiagram::ActivityEdge])* ')')?;

IntegerVariable returns activitydiagram::IntegerVariable:
	{iot_se::IntegerVariableBindSEIntegerVariable}
	'int' delegate=IntegerVariableDecl;

BooleanVariable returns activitydiagram::BooleanVariable:
	{iot_se::BooleanVariableBindSEBooleanVariable}
	'bool' delegate=BooleanVariableDecl;

BooleanVariableDecl returns se::SEBooleanVariable:
	name=ID '=' initialValue=BooleanValue;

IntegerVariableDecl returns se::SEIntegerVariable:
	name=ID '=' initialValue=IntegerValue;

BooleanValue returns se::SEBooleanValue:
	{se::SEBooleanValue}
	(value?='true' | 'false');

IntegerValue returns se::SEIntegerValue:
	{se::SEIntegerValue}
	value=INTEGER;

ControlFlow returns activitydiagram::ControlFlow:
	'flow'
	name=ID
	'from' source=[activitydiagram::ActivityNode]
	'to' target=[activitydiagram::ActivityNode]
	('[' guard=[activitydiagram::BooleanVariable] ']')?;

/*
 * generated by Xtext 2.12.0
 */
package iot.simpleexpressions.xtext.scoping

import activitydiagram.ActivitydiagramPackage
import activitydiagram.BooleanVariable
import idlmm.OperationDef
import iot.Sketch
import iot.System
import model.BooleanVariableBindSEBooleanVariable
import model.IotOperationDefBindOperationDef
import model.ModelPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.MapBasedScope
import simpleexpressions.SEBooleanVariable
import simpleexpressions.SimpleexpressionsPackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class IoTScopeProvider extends AbstractIoTScopeProvider {
	override getScope(EObject context, EReference reference) {
		if (reference == SimpleexpressionsPackage.Literals.SE_BOOLEAN_EXPRESSION__ASSIGNEE) {
			val sketch = EcoreUtil2.getContainerOfType(context, Sketch)
			val variables = EcoreUtil2.getAllContentsOfType(sketch, BooleanVariable)
			return MapBasedScope.createScope(IScope.NULLSCOPE, variables.map [
				val od = it as BooleanVariableBindSEBooleanVariable
				val name = (od.delegate as SEBooleanVariable).name
				EObjectDescription.create(name, od.delegate)
			])
		} else if (reference == ModelPackage.Literals.EXPRESSION_BIND_OPERATION_DEF__DELEGATE) {
			val system = EcoreUtil2.getContainerOfType(context, System)
			val operations = system.components.map[services].flatten.map[it as IotOperationDefBindOperationDef].map [
				delegate
			]

			return MapBasedScope.createScope(IScope.NULLSCOPE, operations.map [
				val od = it as OperationDef
				EObjectDescription.create(od.identifier, od)
			])
		} else if (reference == ActivitydiagramPackage.Literals.CONTROL_FLOW__GUARD) {
			val sketch = EcoreUtil2.getContainerOfType(context, Sketch)
			val variables = EcoreUtil2.getAllContentsOfType(sketch, BooleanVariable)
			return MapBasedScope.createScope(IScope.NULLSCOPE, variables.map [
				val od = it as BooleanVariableBindSEBooleanVariable
				val bvar = od.delegate as SEBooleanVariable
				EObjectDescription.create(bvar.name, od)
			])
		}
		return super.getScope(context, reference)
	}
}

behavior exec_iot_lua

import org.xtext.lua.semantics.model.Environment
import activitydiagram.*
import org.xtext.lua.lua.*
import idlmm.*
import ecore "platform:/resource/iot.lua.model/model/iot_lua.ecore"
import ale activitydiagram_exec
import ale lua_exec
open class ExpressionBindStatement {
	override void execute(Context c) {
		val e = new Environment
		c.inputValues.forEach [
			e.putVariable(alg.$(it.variable).name(), it.value)
		]
		(obj.eContainer as OpaqueAction).activity.locals.forEach [
				e.putVariable(alg.$(it).name(), alg.$(it.currentValue).value)
		]
		alg.$(obj.delegate).execute(e)
		e.variables.entrySet.forEach[ev|
			c.activity.locals.filter[
					alg.$(it).name() == ev.key
				].forEach [
					alg.$(it.currentValue).setValue(ev.value)
				]
		]
	}
}
open class BooleanVariableBindStatement_Assignment {
	override Value execute(Context c) {
		val e = new Environment
		c.inputValues.forEach [
			e.putVariable(alg.$(it.variable).name(), it.value)
		]
		(obj.eContainer as Activity).locals.forEach [
			e.putVariable(alg.$(it).name(), it.currentValue)
		]
		alg.$(obj.delegate).execute(e)
		(obj.currentValue as BooleanValue).value = e.getVariable(alg.$(obj).name()) as Boolean
		obj.currentValue
	}
	
	override void init(Context c) {
		val e = new Environment
		alg.$(obj.delegate).execute(e)
		obj.currentValue = ActivitydiagramFactory.eINSTANCE.createBooleanValue => [ value = e.getVariable(alg.$(obj).name()) as Boolean ]
	} 
	override String print() {
		'TODO'
	}
	override String name() {
		((obj.delegate as Statement_Assignment).variable.get(0) as Expression_VariableName).variable
	}
}
open class IntegerVariableBindStatement_Assignment {
	override Value execute(Context c) {
		val e = new Environment
		c.inputValues.forEach [
			e.putVariable(alg.$(it.variable).name(), it.value)
		]
		(obj.eContainer as Activity).locals.forEach [
			e.putVariable(alg.$(it).name(), it.currentValue)
		]
		alg.$(obj.delegate).execute(e)
		(obj.currentValue as IntegerValue).value = (e.getVariable(alg.$(obj).name()) as Integer)
		obj.currentValue
	}
	
	override void init(Context c) {
		val e = new Environment
		alg.$(obj.delegate).execute(e)
		
		obj.currentValue = ActivitydiagramFactory.eINSTANCE.createIntegerValue => [ value = e.getVariable(alg.$(obj).name()) as Double ]
	}
	override String print() {
		'TODO'
	}
	override String name() {
		((obj.delegate as Statement_Assignment).variable.get(0) as Expression_VariableName).variable
	}
}
open class ExpressionBindOperationDef {
	override void execute(Context c) {
		val e = new Environment
		c.inputValues.forEach [
			e.putVariable(alg.$(it.variable).name(), it.value)
		]
		(obj.eContainer as OpaqueAction).activity.locals.forEach [
			e.putVariable(alg.$(it).name(), alg.$(it.currentValue).value)
		]
		alg.$(obj.delegate.stmt).execute(e)
		obj.delegate.parameters.filter[#[ParameterMode::PARAM_OUT, ParameterMode::PARAM_INOUT].contains(direction)].
			forEach [ p |
				c.activity.locals.filter[
					alg.$(it).name() == p.identifier
				].forEach [alg.$(it.currentValue).setValue(e.getVariable(p.identifier))]
			]
	}
}
open abstract class IdlStmt {
	abstract def void execute(Environment e) 
}
open class IdlStmtBindBlock {
	override void execute(Environment e) {
		alg.$(obj.delegate).execute(e)
	}
}
open class IDLType {}
open class OperationDef {}
open class FieldI {}
open class Contained {}
open class IotOperationDefBindOperationDef {}
open abstract class HWComp {}
open class Sensor {}
open class Actuator {}
open class System {}
open class Board {}
open class Sketch {}
open abstract class IotActivity {
	abstract def long main()	
}
open class IotActivityBindActivity { 
	override long main() {
		val start = System.currentTimeMillis
		alg.$(obj.delegate).main(#[])
		val stop = System.currentTimeMillis
		return stop - start
	}
}

open abstract class IotOperationDef {}
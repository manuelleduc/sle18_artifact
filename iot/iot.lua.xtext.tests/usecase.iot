// Simple IoT system

system MySystem {
	sensor Thermometer {
		provides operation getTemp(inout long temp) {
			if (temp == 0) then
				temp = rand(15, 30)
			else
				temp = temp + rand(-10, 10)
			end
		}
	}

	sensor LightMeter {
		provides operation getLuminosity(inout long lumen) {
			if (lumen == 0) then
				lumen = rand(1500, 1700)
			else
				lumen = lumen + rand(-400, 400)
			end
		}
	}

	actuator Heater {
		provides operation lowerTemp(inout long temp) {
			println("Lowering temp by 5")
			temp = temp - 5
		}

		provides operation raiseTemp(inout long temp) {
			println("Raising temp by 5")
			temp = temp + 5
		}
	}

	actuator LightController {
		provides operation turnLightOn(inout long lumen) {
			println("Raising lumen by 400")
			lumen = lumen + 400
		}

		provides operation turnLightOff(inout long lumen) {
			println("Lowering lumen by 400")
			lumen = lumen - 400
		}
	}

	actuator Timer {
		provides operation wait(in long waitingTime, in long temp, in long lumen) {
			print("currentTemp = ")
			println(temp)
			print("currentLumen = ")
			println(lumen)
			sleep(waitingTime)
		}
	}

	board B1 [Arduino] {
		provides Thermometer
		provides Timer
	}

	board B2 [RaspberryPi] {
		provides LightMeter
	}

	board B3 [BeagleBoard] {
		provides Heater
		provides LightController
	}

	sketch {
		activity DummyIoTSketch {
			bool stop = false,
			bool dontStop = true,
			bool tooBright = false,
			bool tooObscure = false,
			bool tooHot = false,
			bool tooCold = false,
			int temp = 0,
			int lumen = 0,
			int tempThreshold = 21,
			int lumenThreshold = 1600,
			int i = 0,
			int one = 1,
			int nbIter = 15,
			int waitingTime = 500

			nodes {
				initial init out (e1),
				merge m1 in(e1, e19) out (e2),
				fork f1 in(e2) out (e3, e4),
				action a1 comp { tooHot = temp >= tempThreshold, tooCold = temp < tempThreshold } in (e3) out (e5) service getTemp,
				action a2 comp { tooBright = lumen >= lumenThreshold, tooObscure = lumen < lumenThreshold } in (e4) out (e6) service getLuminosity,
				decision d1 in (e5) out (e7, e8),
				decision d2 in (e6) out (e9, e10),
				action a3 in (e7) out (e11) service lowerTemp,
				action a4 in (e8) out (e12) service raiseTemp,
				action a5 in (e9) out (e13) service turnLightOff,
				action a6 in (e10) out (e14) service turnLightOn,
				merge m2 in (e11, e12) out (e15),
				merge m3 in (e13, e14) out (e16),
				join j1 in (e15, e16) out (e17),
				action computeIterations comp { i = i + one, stop = i >= nbIter, dontStop = i < nbIter } in (e17) out (e20) service wait,
				decision d3 in (e20) out (e18, e19),
				final fin in (e18)
			}
			edges {
				flow e1 from init to m1,
				flow e2 from m1 to f1,
				flow e3 from f1 to a1,
				flow e4 from f1 to a2,
				flow e5 from a1 to d1,
				flow e6 from a2 to d2,
				flow e7 from d1 to a3 [tooHot],
				flow e8 from d1 to a4 [tooCold],
				flow e9 from d2 to a5 [tooBright],
				flow e10 from d2 to a6 [tooObscure],
				flow e11 from a3 to m2,
				flow e12 from a4 to m2,
				flow e13 from a5 to m3,
				flow e14 from a6 to m3,
				flow e15 from m2 to j1,
				flow e16 from m3 to j1,
				flow e17 from j1 to computeIterations,
				flow e18 from d3 to fin [stop],
				flow e19 from d3 to m1 [dontStop],
				flow e20 from computeIterations to d3
			}
		}
	}
}
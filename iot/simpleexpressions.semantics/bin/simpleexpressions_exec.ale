behavior simpleexpressions_exec

import simpleexpressions.*

import ecore "platform:/resource/simpleexpressions.model/model/simpleexpressions.ecore"

open class SEIntegerComparisonExpression {
	override Object execute() {
		if (obj.operator.value == SEIntegerComparisonOperator.EQUALS_VALUE) {
			val cv = (obj.assignee.currentValue as SEBooleanValue)
			val o1 = alg.$(obj.operand1).execute()
			val o2 = alg.$(obj.operand2).execute()
			cv.value = o1 == o2
		} else if (obj.operator.value == SEIntegerComparisonOperator.GREATER_EQUALS_VALUE) {
			val v1 = alg.$(obj.operand1).execute() as Integer
			val v2 = alg.$(obj.operand2).execute() as Integer
			(obj.assignee.currentValue as SEBooleanValue).value = v1 >= v2

		} else if (obj.operator.value == SEIntegerComparisonOperator.GREATER_VALUE) {
			(obj.assignee.currentValue as SEBooleanValue).value = alg.$(obj.operand1).execute() as Integer >
				alg.$(obj.operand2).execute() as Integer
		} else if (obj.operator.value == SEIntegerComparisonOperator.SMALLER_EQUALS_VALUE) {
			(obj.assignee.currentValue as SEBooleanValue).value = (alg.$(obj.operand1).execute() as Integer) <=
				(alg.$(obj.operand2).execute() as Integer)
		} else if (obj.operator.value == SEIntegerComparisonOperator.SMALLER_VALUE) {
			val v1 = alg.$(obj.operand1).execute() as Integer
			val v2 = alg.$(obj.operand2).execute() as Integer
			(obj.assignee.currentValue as SEBooleanValue).value = v1 < v2
		}
		obj.operator.value
	}
}

open abstract class SEExpression {
	abstract def Object execute()
}

open abstract class SEBooleanExpression {
	// done
}

open class SEBooleanBinaryExpression {
	override Object execute() {
		if (obj.operator.value == SEBooleanBinaryOperator.AND_VALUE) {
			val a = obj.assignee.currentValue as SEBooleanValue
			val r1 = alg.$(obj.operand1)
			val o1 = r1.execute() as Boolean
			val r2 = alg.$(obj.operand2)
			val o2 = r2.execute() as Boolean
			a.value = o1 && o2
		} else if (obj.operator.value == SEBooleanBinaryOperator.OR_VALUE) {
			(obj.assignee.currentValue as SEBooleanValue).value = (alg.$(obj.operand1).execute() as Boolean) ||
				(alg.$(obj.operand2).execute() as Boolean)
		}

		obj.operator.value
	}
}
open class SEBooleanUnaryExpression {
	override Object execute() {
		if (obj.operator.value == SEBooleanUnaryOperator.NOT_VALUE) {
			(obj.assignee.currentValue as SEBooleanValue).value = !alg.$(obj.operand).execute() as Boolean
		}
		obj.operator.value

	}
}

open class SEIntegerCalculationExpression {
	override Object  execute() {
		if (obj.operator.value == SEIntegerCalculationOperator.ADD_VALUE) {
			(obj.assignee.currentValue as SEIntegerValue).value = (alg.$(obj.operand1).execute() as Integer) +
				(alg.$(obj.operand2).execute() as Integer)
		} else if (obj.operator.value == SEIntegerCalculationOperator.SUBRACT_VALUE) {
			(obj.assignee.currentValue as SEIntegerValue).value = (alg.$(obj.operand1).execute() as Integer) -
				(alg.$(obj.operand2).execute() as Integer)
		}
		obj.operator.value
	}
}

open class SEBooleanVariable {
	override void init()  {
		obj.currentValue = obj.initialValue
	}
	
	override Object execute() {
		alg.$(obj.currentValue).execute()
	}

	override String print() {
		val text = new StringBuffer()
		text.append(obj.name)
		text.append(" = ")
		text.append((obj.currentValue as SEBooleanValue).isValue)
		return text.toString
	}
}

open abstract class SEIntegerExpression {
	// done
}

open abstract class SEVariable {
	abstract def String print()
	abstract def void init()
	abstract def Object execute()
} 


open class SEIntegerVariable {

	override void init()  {
		obj.currentValue = obj.initialValue
	}
	
	override Object execute() {
		alg.$(obj.currentValue).execute()
	}

	
	override String print() {
		var text = new StringBuffer
		text.append(obj.name)
		text.append(" = ");
		text.append((obj.getCurrentValue() as SEIntegerValue).getValue())
		return text.toString()
	}
}

open abstract class SEValue {
	abstract def Object execute()
}
open class SEBooleanValue {
	override Object execute() {
		obj.value
	}
}

open class SEIntegerValue {
	override Object execute() {
		obj.value
	}
}
/**
 * generated by Xtext 2.12.0
 */
package iot.simpleexpressions.xtext.tests;

import com.google.inject.Inject;
import com.google.inject.Provider;
import iot.simpleexpressions.xtext.tests.IoTInjectorProvider;
import iot_simpleexpression_exec.revisitor.impl.Iot_simpleexpression_execRevisitor;
import iot_simpleexpression_exec.revisitor.operations.iot_simpleexpression_exec.IotActivityOperation;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(IoTInjectorProvider.class)
@SuppressWarnings("all")
public class IoTExecutionTest {
  @Inject
  private Provider<ResourceSet> rsp;
  
  @Test
  public void loadModel() {
    try {
      final ResourceSet rs = this.rsp.get();
      final Resource r = rs.getResource(URI.createURI("usecase.iot"), true);
      r.load(null);
      EObject _head = IterableExtensions.<EObject>head(r.getContents());
      final iot.System s = ((iot.System) _head);
      final Iot_simpleexpression_execRevisitor rev = new Iot_simpleexpression_execRevisitor() {
      };
      final IotActivityOperation o = rev.$(s.getSketch().getActivity());
      o.main();
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}

/*
 * generated by Xtext
 */
grammar InternalLua;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.lua.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.lua.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.lua.services.LuaGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private LuaGrammarAccess grammarAccess;
 	
    public InternalLuaParser(TokenStream input, LuaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Chunk";	
   	}
   	
   	@Override
   	protected LuaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleChunk
entryRuleChunk returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getChunkRule()); }
	 iv_ruleChunk=ruleChunk 
	 { $current=$iv_ruleChunk.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Chunk
ruleChunk returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getChunkAccess().getBlockParserRuleCall()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getSemicolonKeyword_1_1());
    }
)?)*((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getReturnValueLastStatementParserRuleCall_2_0_0()); 
	    }
		lv_returnValue_3_0=ruleLastStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"returnValue",
        		lv_returnValue_3_0, 
        		"LastStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getSemicolonKeyword_2_1());
    }
)?)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLastStatement
entryRuleLastStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLastStatementRule()); }
	 iv_ruleLastStatement=ruleLastStatement 
	 { $current=$iv_ruleLastStatement.current; } 
	 EOF 
;

// Rule LastStatement
ruleLastStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLastStatementAccess().getLastStatement_ReturnParserRuleCall_0()); 
    }
    this_LastStatement_Return_0=ruleLastStatement_Return
    { 
        $current = $this_LastStatement_Return_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLastStatementAccess().getLastStatement_BreakParserRuleCall_1()); 
    }
    this_LastStatement_Break_1=ruleLastStatement_Break
    { 
        $current = $this_LastStatement_Break_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLastStatement_Return
entryRuleLastStatement_Return returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLastStatement_ReturnRule()); }
	 iv_ruleLastStatement_Return=ruleLastStatement_Return 
	 { $current=$iv_ruleLastStatement_Return.current; } 
	 EOF 
;

// Rule LastStatement_Return
ruleLastStatement_Return returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='return' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLastStatement_ReturnAccess().getReturnKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLastStatement_ReturnAccess().getLastStatement_ReturnWithValueAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getLastStatement_ReturnAccess().getReturnValuesExpressionParserRuleCall_2_0_0()); 
	    }
		lv_returnValues_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLastStatement_ReturnRule());
	        }
       		add(
       			$current, 
       			"returnValues",
        		lv_returnValues_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLastStatement_ReturnAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLastStatement_ReturnAccess().getReturnValuesExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_returnValues_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLastStatement_ReturnRule());
	        }
       		add(
       			$current, 
       			"returnValues",
        		lv_returnValues_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleLastStatement_Break
entryRuleLastStatement_Break returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLastStatement_BreakRule()); }
	 iv_ruleLastStatement_Break=ruleLastStatement_Break 
	 { $current=$iv_ruleLastStatement_Break.current; } 
	 EOF 
;

// Rule LastStatement_Break
ruleLastStatement_Break returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='break' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLastStatement_BreakAccess().getBreakKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLastStatement_BreakAccess().getLastStatement_BreakAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_BlockParserRuleCall_0()); 
    }
    this_Statement_Block_0=ruleStatement_Block
    { 
        $current = $this_Statement_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_WhileParserRuleCall_1()); 
    }
    this_Statement_While_1=ruleStatement_While
    { 
        $current = $this_Statement_While_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_RepeatParserRuleCall_2()); 
    }
    this_Statement_Repeat_2=ruleStatement_Repeat
    { 
        $current = $this_Statement_Repeat_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_If_Then_ElseParserRuleCall_3()); 
    }
    this_Statement_If_Then_Else_3=ruleStatement_If_Then_Else
    { 
        $current = $this_Statement_If_Then_Else_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_For_NumericParserRuleCall_4()); 
    }
    this_Statement_For_Numeric_4=ruleStatement_For_Numeric
    { 
        $current = $this_Statement_For_Numeric_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_For_GenericParserRuleCall_5()); 
    }
    this_Statement_For_Generic_5=ruleStatement_For_Generic
    { 
        $current = $this_Statement_For_Generic_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_GlobalFunction_DeclarationParserRuleCall_6()); 
    }
    this_Statement_GlobalFunction_Declaration_6=ruleStatement_GlobalFunction_Declaration
    { 
        $current = $this_Statement_GlobalFunction_Declaration_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_LocalFunction_DeclarationParserRuleCall_7()); 
    }
    this_Statement_LocalFunction_Declaration_7=ruleStatement_LocalFunction_Declaration
    { 
        $current = $this_Statement_LocalFunction_Declaration_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_Local_Variable_DeclarationParserRuleCall_8()); 
    }
    this_Statement_Local_Variable_Declaration_8=ruleStatement_Local_Variable_Declaration
    { 
        $current = $this_Statement_Local_Variable_Declaration_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_FunctioncallOrAssignmentParserRuleCall_9()); 
    }
    this_Statement_FunctioncallOrAssignment_9=ruleStatement_FunctioncallOrAssignment
    { 
        $current = $this_Statement_FunctioncallOrAssignment_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleStatement_Block
entryRuleStatement_Block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_BlockRule()); }
	 iv_ruleStatement_Block=ruleStatement_Block 
	 { $current=$iv_ruleStatement_Block.current; } 
	 EOF 
;

// Rule Statement_Block
ruleStatement_Block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_BlockAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_BlockAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_BlockRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='end' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_BlockAccess().getEndKeyword_2());
    }
)
;





// Entry rule entryRuleStatement_While
entryRuleStatement_While returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_WhileRule()); }
	 iv_ruleStatement_While=ruleStatement_While 
	 { $current=$iv_ruleStatement_While.current; } 
	 EOF 
;

// Rule Statement_While
ruleStatement_While returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_WhileAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_WhileAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_WhileRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='do' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_WhileAccess().getDoKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_WhileAccess().getBlockBlockParserRuleCall_3_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_WhileRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_WhileAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleStatement_Repeat
entryRuleStatement_Repeat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_RepeatRule()); }
	 iv_ruleStatement_Repeat=ruleStatement_Repeat 
	 { $current=$iv_ruleStatement_Repeat.current; } 
	 EOF 
;

// Rule Statement_Repeat
ruleStatement_Repeat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='repeat' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_RepeatAccess().getRepeatKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_RepeatAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_RepeatRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='until' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_RepeatAccess().getUntilKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_RepeatAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_RepeatRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement_If_Then_Else
entryRuleStatement_If_Then_Else returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_If_Then_ElseRule()); }
	 iv_ruleStatement_If_Then_Else=ruleStatement_If_Then_Else 
	 { $current=$iv_ruleStatement_If_Then_Else.current; } 
	 EOF 
;

// Rule Statement_If_Then_Else
ruleStatement_If_Then_Else returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_If_Then_ElseAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_If_Then_ElseAccess().getIfExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_ifExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_If_Then_ElseRule());
	        }
       		set(
       			$current, 
       			"ifExpression",
        		lv_ifExpression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_If_Then_ElseAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_If_Then_ElseAccess().getIfBlockBlockParserRuleCall_3_0()); 
	    }
		lv_ifBlock_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_If_Then_ElseRule());
	        }
       		set(
       			$current, 
       			"ifBlock",
        		lv_ifBlock_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_If_Then_ElseAccess().getElseIfStatement_If_Then_Else_ElseIfPartParserRuleCall_4_0()); 
	    }
		lv_elseIf_4_0=ruleStatement_If_Then_Else_ElseIfPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_If_Then_ElseRule());
	        }
       		add(
       			$current, 
       			"elseIf",
        		lv_elseIf_4_0, 
        		"Statement_If_Then_Else_ElseIfPart");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatement_If_Then_ElseAccess().getElseKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_If_Then_ElseAccess().getElseBlockBlockParserRuleCall_5_1_0()); 
	    }
		lv_elseBlock_6_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_If_Then_ElseRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_6_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatement_If_Then_ElseAccess().getEndKeyword_6());
    }
)
;





// Entry rule entryRuleStatement_If_Then_Else_ElseIfPart
entryRuleStatement_If_Then_Else_ElseIfPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_If_Then_Else_ElseIfPartRule()); }
	 iv_ruleStatement_If_Then_Else_ElseIfPart=ruleStatement_If_Then_Else_ElseIfPart 
	 { $current=$iv_ruleStatement_If_Then_Else_ElseIfPart.current; } 
	 EOF 
;

// Rule Statement_If_Then_Else_ElseIfPart
ruleStatement_If_Then_Else_ElseIfPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elseif' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_If_Then_Else_ElseIfPartAccess().getElseifKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_If_Then_Else_ElseIfPartAccess().getElseifExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_elseifExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_If_Then_Else_ElseIfPartRule());
	        }
       		set(
       			$current, 
       			"elseifExpression",
        		lv_elseifExpression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_If_Then_Else_ElseIfPartAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_If_Then_Else_ElseIfPartAccess().getElseifBlockBlockParserRuleCall_3_0()); 
	    }
		lv_elseifBlock_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_If_Then_Else_ElseIfPartRule());
	        }
       		set(
       			$current, 
       			"elseifBlock",
        		lv_elseifBlock_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement_For_Numeric
entryRuleStatement_For_Numeric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_For_NumericRule()); }
	 iv_ruleStatement_For_Numeric=ruleStatement_For_Numeric 
	 { $current=$iv_ruleStatement_For_Numeric.current; } 
	 EOF 
;

// Rule Statement_For_Numeric
ruleStatement_For_Numeric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_For_NumericAccess().getForKeyword_0());
    }
(
(
		lv_iteratorName_1_0=RULE_LUA_NAME
		{
			newLeafNode(lv_iteratorName_1_0, grammarAccess.getStatement_For_NumericAccess().getIteratorNameLUA_NAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_For_NumericRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"iteratorName",
        		lv_iteratorName_1_0, 
        		"LUA_NAME");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_For_NumericAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_NumericAccess().getStartExprExpressionParserRuleCall_3_0()); 
	    }
		lv_startExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_NumericRule());
	        }
       		set(
       			$current, 
       			"startExpr",
        		lv_startExpr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_For_NumericAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_NumericAccess().getUntilExprExpressionParserRuleCall_5_0()); 
	    }
		lv_untilExpr_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_NumericRule());
	        }
       		set(
       			$current, 
       			"untilExpr",
        		lv_untilExpr_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatement_For_NumericAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_NumericAccess().getStepExprExpressionParserRuleCall_6_1_0()); 
	    }
		lv_stepExpr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_NumericRule());
	        }
       		set(
       			$current, 
       			"stepExpr",
        		lv_stepExpr_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='do' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatement_For_NumericAccess().getDoKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_NumericAccess().getBlockBlockParserRuleCall_8_0()); 
	    }
		lv_block_9_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_NumericRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_9_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStatement_For_NumericAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleStatement_For_Generic
entryRuleStatement_For_Generic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_For_GenericRule()); }
	 iv_ruleStatement_For_Generic=ruleStatement_For_Generic 
	 { $current=$iv_ruleStatement_For_Generic.current; } 
	 EOF 
;

// Rule Statement_For_Generic
ruleStatement_For_Generic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_For_GenericAccess().getForKeyword_0());
    }
(
(
		lv_names_1_0=RULE_LUA_NAME
		{
			newLeafNode(lv_names_1_0, grammarAccess.getStatement_For_GenericAccess().getNamesLUA_NAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_For_GenericRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_1_0, 
        		"LUA_NAME");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_For_GenericAccess().getCommaKeyword_2_0());
    }
(
(
		lv_names_3_0=RULE_LUA_NAME
		{
			newLeafNode(lv_names_3_0, grammarAccess.getStatement_For_GenericAccess().getNamesLUA_NAMETerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_For_GenericRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"names",
        		lv_names_3_0, 
        		"LUA_NAME");
	    }

)
))*	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_For_GenericAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_GenericAccess().getExpressionsExpressionParserRuleCall_4_0()); 
	    }
		lv_expressions_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_GenericRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatement_For_GenericAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_GenericAccess().getExpressionsExpressionParserRuleCall_5_1_0()); 
	    }
		lv_expressions_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_GenericRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='do' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatement_For_GenericAccess().getDoKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_For_GenericAccess().getBlockBlockParserRuleCall_7_0()); 
	    }
		lv_block_9_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_For_GenericRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_9_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='end' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStatement_For_GenericAccess().getEndKeyword_8());
    }
)
;





// Entry rule entryRuleStatement_GlobalFunction_Declaration
entryRuleStatement_GlobalFunction_Declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_GlobalFunction_DeclarationRule()); }
	 iv_ruleStatement_GlobalFunction_Declaration=ruleStatement_GlobalFunction_Declaration 
	 { $current=$iv_ruleStatement_GlobalFunction_Declaration.current; } 
	 EOF 
;

// Rule Statement_GlobalFunction_Declaration
ruleStatement_GlobalFunction_Declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getFunctionKeyword_0());
    }
(
(
		lv_prefix_1_0=RULE_LUA_NAME
		{
			newLeafNode(lv_prefix_1_0, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getPrefixLUA_NAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_GlobalFunction_DeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_1_0, 
        		"LUA_NAME");
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getFullStopKeyword_2_0());
    }
(
(
		lv_prefix_3_0=RULE_LUA_NAME
		{
			newLeafNode(lv_prefix_3_0, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getPrefixLUA_NAMETerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_GlobalFunction_DeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"prefix",
        		lv_prefix_3_0, 
        		"LUA_NAME");
	    }

)
))*(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getColonKeyword_3_0());
    }
(
(
		lv_functionName_5_0=RULE_LUA_NAME
		{
			newLeafNode(lv_functionName_5_0, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getFunctionNameLUA_NAMETerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_GlobalFunction_DeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"functionName",
        		lv_functionName_5_0, 
        		"LUA_NAME");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getFunctionFunctionParserRuleCall_4_0()); 
	    }
		lv_function_6_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_GlobalFunction_DeclarationRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_6_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='end' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatement_GlobalFunction_DeclarationAccess().getEndKeyword_5());
    }
)
;





// Entry rule entryRuleStatement_LocalFunction_Declaration
entryRuleStatement_LocalFunction_Declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_LocalFunction_DeclarationRule()); }
	 iv_ruleStatement_LocalFunction_Declaration=ruleStatement_LocalFunction_Declaration 
	 { $current=$iv_ruleStatement_LocalFunction_Declaration.current; } 
	 EOF 
;

// Rule Statement_LocalFunction_Declaration
ruleStatement_LocalFunction_Declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='local' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_LocalFunction_DeclarationAccess().getLocalKeyword_0());
    }
	otherlv_1='function' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatement_LocalFunction_DeclarationAccess().getFunctionKeyword_1());
    }
(
(
		lv_functionName_2_0=RULE_LUA_NAME
		{
			newLeafNode(lv_functionName_2_0, grammarAccess.getStatement_LocalFunction_DeclarationAccess().getFunctionNameLUA_NAMETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_LocalFunction_DeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"functionName",
        		lv_functionName_2_0, 
        		"LUA_NAME");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_LocalFunction_DeclarationAccess().getFunctionFunctionParserRuleCall_3_0()); 
	    }
		lv_function_3_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_LocalFunction_DeclarationRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_3_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_LocalFunction_DeclarationAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleStatement_Local_Variable_Declaration
entryRuleStatement_Local_Variable_Declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_Local_Variable_DeclarationRule()); }
	 iv_ruleStatement_Local_Variable_Declaration=ruleStatement_Local_Variable_Declaration 
	 { $current=$iv_ruleStatement_Local_Variable_Declaration.current; } 
	 EOF 
;

// Rule Statement_Local_Variable_Declaration
ruleStatement_Local_Variable_Declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='local' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatement_Local_Variable_DeclarationAccess().getLocalKeyword_0());
    }
(
(
		lv_variableNames_1_0=RULE_LUA_NAME
		{
			newLeafNode(lv_variableNames_1_0, grammarAccess.getStatement_Local_Variable_DeclarationAccess().getVariableNamesLUA_NAMETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_Local_Variable_DeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"variableNames",
        		lv_variableNames_1_0, 
        		"LUA_NAME");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_Local_Variable_DeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		lv_variableNames_3_0=RULE_LUA_NAME
		{
			newLeafNode(lv_variableNames_3_0, grammarAccess.getStatement_Local_Variable_DeclarationAccess().getVariableNamesLUA_NAMETerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_Local_Variable_DeclarationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"variableNames",
        		lv_variableNames_3_0, 
        		"LUA_NAME");
	    }

)
))*(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_Local_Variable_DeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_Local_Variable_DeclarationAccess().getInitialValueExpressionParserRuleCall_3_1_0()); 
	    }
		lv_initialValue_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_Local_Variable_DeclarationRule());
	        }
       		add(
       			$current, 
       			"initialValue",
        		lv_initialValue_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatement_Local_Variable_DeclarationAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_Local_Variable_DeclarationAccess().getInitialValueExpressionParserRuleCall_3_2_1_0()); 
	    }
		lv_initialValue_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_Local_Variable_DeclarationRule());
	        }
       		add(
       			$current, 
       			"initialValue",
        		lv_initialValue_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleStatement_FunctioncallOrAssignment
entryRuleStatement_FunctioncallOrAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentRule()); }
	 iv_ruleStatement_FunctioncallOrAssignment=ruleStatement_FunctioncallOrAssignment 
	 { $current=$iv_ruleStatement_FunctioncallOrAssignment.current; } 
	 EOF 
;

// Rule Statement_FunctioncallOrAssignment
ruleStatement_FunctioncallOrAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getExpression_AccessMemberOrArrayElementParserRuleCall_0()); 
    }
    this_Expression_AccessMemberOrArrayElement_0=ruleExpression_AccessMemberOrArrayElement
    { 
        $current = $this_Expression_AccessMemberOrArrayElement_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getStatement_AssignmentVariableAction_1_0_0(),
            $current);
    }
)(((	',' 
)=>	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getCommaKeyword_1_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getVariableExpression_AccessMemberOrArrayElementParserRuleCall_1_0_1_1_0()); 
	    }
		lv_variable_3_0=ruleExpression_AccessMemberOrArrayElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_FunctioncallOrAssignmentRule());
	        }
       		add(
       			$current, 
       			"variable",
        		lv_variable_3_0, 
        		"Expression_AccessMemberOrArrayElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getEqualsSignKeyword_1_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getValuesExpressionParserRuleCall_1_0_3_0()); 
	    }
		lv_values_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_FunctioncallOrAssignmentRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getCommaKeyword_1_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getValuesExpressionParserRuleCall_1_0_4_1_0()); 
	    }
		lv_values_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_FunctioncallOrAssignmentRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getColonKeyword_1_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getStatement_CallMemberFunctionObjectAction_1_1_1(),
            $current);
    }
)(
(
		lv_memberFunctionName_10_0=RULE_LUA_NAME
		{
			newLeafNode(lv_memberFunctionName_10_0, grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getMemberFunctionNameLUA_NAMETerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatement_FunctioncallOrAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"memberFunctionName",
        		lv_memberFunctionName_10_0, 
        		"LUA_NAME");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_3_0()); 
	    }
		lv_arguments_11_0=ruleFunctioncall_Arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_FunctioncallOrAssignmentRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_11_0, 
        		"Functioncall_Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getStatement_CallFunctionObjectAction_1_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_FunctioncallOrAssignmentAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_13_0=ruleFunctioncall_Arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_FunctioncallOrAssignmentRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_13_0, 
        		"Functioncall_Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_COMMENT");
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getExpression_OrParserRuleCall()); 
    }
    this_Expression_Or_0=ruleExpression_Or
    { 
        $current = $this_Expression_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleExpression_Or
entryRuleExpression_Or returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_OrRule()); }
	 iv_ruleExpression_Or=ruleExpression_Or 
	 { $current=$iv_ruleExpression_Or.current; } 
	 EOF 
;

// Rule Expression_Or
ruleExpression_Or returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_OrAccess().getExpression_AndParserRuleCall_0()); 
    }
    this_Expression_And_0=ruleExpression_And
    { 
        $current = $this_Expression_And_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_OrAccess().getOrKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_OrAccess().getExpression_OrLeftAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_OrAccess().getRightExpression_AndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression_And		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_OrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression_And
entryRuleExpression_And returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_AndRule()); }
	 iv_ruleExpression_And=ruleExpression_And 
	 { $current=$iv_ruleExpression_And.current; } 
	 EOF 
;

// Rule Expression_And
ruleExpression_And returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_AndAccess().getExpression_CompareParserRuleCall_0()); 
    }
    this_Expression_Compare_0=ruleExpression_Compare
    { 
        $current = $this_Expression_Compare_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_AndAccess().getAndKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_AndAccess().getExpression_AndLeftAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_AndAccess().getRightExpression_CompareParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression_Compare		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_AndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_Compare");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpression_Compare
entryRuleExpression_Compare returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_CompareRule()); }
	 iv_ruleExpression_Compare=ruleExpression_Compare 
	 { $current=$iv_ruleExpression_Compare.current; } 
	 EOF 
;

// Rule Expression_Compare
ruleExpression_Compare returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_CompareAccess().getExpression_ConcatenationParserRuleCall_0()); 
    }
    this_Expression_Concatenation_0=ruleExpression_Concatenation
    { 
        $current = $this_Expression_Concatenation_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_CompareAccess().getGreaterThanSignKeyword_1_0_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_CompareAccess().getExpression_LargerLeftAction_1_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_CompareRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='>=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpression_CompareAccess().getGreaterThanSignEqualsSignKeyword_1_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_CompareAccess().getExpression_Larger_EqualLeftAction_1_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_1_2_0()); 
	    }
		lv_right_6_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_CompareRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='<' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpression_CompareAccess().getLessThanSignKeyword_1_2_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_CompareAccess().getExpression_SmallerLeftAction_1_2_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_2_2_0()); 
	    }
		lv_right_9_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_CompareRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_10='<=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExpression_CompareAccess().getLessThanSignEqualsSignKeyword_1_3_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_CompareAccess().getExpression_Smaller_EqualLeftAction_1_3_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_3_2_0()); 
	    }
		lv_right_12_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_CompareRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_12_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_13='==' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExpression_CompareAccess().getEqualsSignEqualsSignKeyword_1_4_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_CompareAccess().getExpression_EqualLeftAction_1_4_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_4_2_0()); 
	    }
		lv_right_15_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_CompareRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_15_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_16='~=' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getExpression_CompareAccess().getTildeEqualsSignKeyword_1_5_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_CompareAccess().getExpression_Not_EqualLeftAction_1_5_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_CompareAccess().getRightExpression_ConcatenationParserRuleCall_1_5_2_0()); 
	    }
		lv_right_18_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_CompareRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_18_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleExpression_Concatenation
entryRuleExpression_Concatenation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_ConcatenationRule()); }
	 iv_ruleExpression_Concatenation=ruleExpression_Concatenation 
	 { $current=$iv_ruleExpression_Concatenation.current; } 
	 EOF 
;

// Rule Expression_Concatenation
ruleExpression_Concatenation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_ConcatenationAccess().getExpression_PlusMinusParserRuleCall_0()); 
    }
    this_Expression_PlusMinus_0=ruleExpression_PlusMinus
    { 
        $current = $this_Expression_PlusMinus_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='..' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_ConcatenationAccess().getFullStopFullStopKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_ConcatenationAccess().getExpression_ConcatenationLeftAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_ConcatenationAccess().getRightExpression_ConcatenationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression_Concatenation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_ConcatenationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_Concatenation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression_PlusMinus
entryRuleExpression_PlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_PlusMinusRule()); }
	 iv_ruleExpression_PlusMinus=ruleExpression_PlusMinus 
	 { $current=$iv_ruleExpression_PlusMinus.current; } 
	 EOF 
;

// Rule Expression_PlusMinus
ruleExpression_PlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_PlusMinusAccess().getExpression_MultiplicationDivisionModuloParserRuleCall_0()); 
    }
    this_Expression_MultiplicationDivisionModulo_0=ruleExpression_MultiplicationDivisionModulo
    { 
        $current = $this_Expression_MultiplicationDivisionModulo_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_PlusMinusAccess().getPlusSignKeyword_1_0_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_PlusMinusAccess().getExpression_PlusLeftAction_1_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_PlusMinusAccess().getRightExpression_MultiplicationDivisionModuloParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleExpression_MultiplicationDivisionModulo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_PlusMinusRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_MultiplicationDivisionModulo");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpression_PlusMinusAccess().getHyphenMinusKeyword_1_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_PlusMinusAccess().getExpression_MinusLeftAction_1_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_PlusMinusAccess().getRightExpression_MultiplicationDivisionModuloParserRuleCall_1_1_2_0()); 
	    }
		lv_right_6_0=ruleExpression_MultiplicationDivisionModulo		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_PlusMinusRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"Expression_MultiplicationDivisionModulo");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleExpression_MultiplicationDivisionModulo
entryRuleExpression_MultiplicationDivisionModulo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_MultiplicationDivisionModuloRule()); }
	 iv_ruleExpression_MultiplicationDivisionModulo=ruleExpression_MultiplicationDivisionModulo 
	 { $current=$iv_ruleExpression_MultiplicationDivisionModulo.current; } 
	 EOF 
;

// Rule Expression_MultiplicationDivisionModulo
ruleExpression_MultiplicationDivisionModulo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_UnaryParserRuleCall_0()); 
    }
    this_Expression_Unary_0=ruleExpression_Unary
    { 
        $current = $this_Expression_Unary_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getAsteriskKeyword_1_0_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_MultiplicationLeftAction_1_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getRightExpression_UnaryParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleExpression_Unary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_MultiplicationDivisionModuloRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_Unary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getSolidusKeyword_1_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_DivisionLeftAction_1_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getRightExpression_UnaryParserRuleCall_1_1_2_0()); 
	    }
		lv_right_6_0=ruleExpression_Unary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_MultiplicationDivisionModuloRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"Expression_Unary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='%' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getPercentSignKeyword_1_2_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getExpression_ModuloLeftAction_1_2_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_MultiplicationDivisionModuloAccess().getRightExpression_UnaryParserRuleCall_1_2_2_0()); 
	    }
		lv_right_9_0=ruleExpression_Unary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_MultiplicationDivisionModuloRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"Expression_Unary");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleExpression_Unary
entryRuleExpression_Unary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_UnaryRule()); }
	 iv_ruleExpression_Unary=ruleExpression_Unary 
	 { $current=$iv_ruleExpression_Unary.current; } 
	 EOF 
;

// Rule Expression_Unary
ruleExpression_Unary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_UnaryAccess().getExpression_ExponentiationParserRuleCall_0()); 
    }
    this_Expression_Exponentiation_0=ruleExpression_Exponentiation
    { 
        $current = $this_Expression_Exponentiation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_UnaryAccess().getNotKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_UnaryAccess().getExpression_NegateAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_UnaryAccess().getExpExpression_UnaryParserRuleCall_1_2_0()); 
	    }
		lv_exp_3_0=ruleExpression_Unary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_UnaryRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_3_0, 
        		"Expression_Unary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='#' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpression_UnaryAccess().getNumberSignKeyword_2_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_UnaryAccess().getExpression_LengthAction_2_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_UnaryAccess().getExpExpression_UnaryParserRuleCall_2_2_0()); 
	    }
		lv_exp_6_0=ruleExpression_Unary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_UnaryRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_6_0, 
        		"Expression_Unary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='-' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpression_UnaryAccess().getHyphenMinusKeyword_3_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_UnaryAccess().getExpression_InvertAction_3_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_UnaryAccess().getExpExpression_UnaryParserRuleCall_3_2_0()); 
	    }
		lv_exp_9_0=ruleExpression_Unary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_UnaryRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_9_0, 
        		"Expression_Unary");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExpression_Exponentiation
entryRuleExpression_Exponentiation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_ExponentiationRule()); }
	 iv_ruleExpression_Exponentiation=ruleExpression_Exponentiation 
	 { $current=$iv_ruleExpression_Exponentiation.current; } 
	 EOF 
;

// Rule Expression_Exponentiation
ruleExpression_Exponentiation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_ExponentiationAccess().getExpression_TerminalParserRuleCall_0()); 
    }
    this_Expression_Terminal_0=ruleExpression_Terminal
    { 
        $current = $this_Expression_Terminal_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_ExponentiationAccess().getCircumflexAccentKeyword_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_ExponentiationAccess().getExpression_ExponentiationLeftAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_ExponentiationAccess().getRightExpression_ExponentiationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExpression_Exponentiation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_ExponentiationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression_Exponentiation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpression_Terminal
entryRuleExpression_Terminal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_TerminalRule()); }
	 iv_ruleExpression_Terminal=ruleExpression_Terminal 
	 { $current=$iv_ruleExpression_Terminal.current; } 
	 EOF 
;

// Rule Expression_Terminal
ruleExpression_Terminal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_NilParserRuleCall_0()); 
    }
    this_Expression_Nil_0=ruleExpression_Nil
    { 
        $current = $this_Expression_Nil_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_TrueParserRuleCall_1()); 
    }
    this_Expression_True_1=ruleExpression_True
    { 
        $current = $this_Expression_True_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_FalseParserRuleCall_2()); 
    }
    this_Expression_False_2=ruleExpression_False
    { 
        $current = $this_Expression_False_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_NumberParserRuleCall_3()); 
    }
    this_Expression_Number_3=ruleExpression_Number
    { 
        $current = $this_Expression_Number_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_VarArgsParserRuleCall_4()); 
    }
    this_Expression_VarArgs_4=ruleExpression_VarArgs
    { 
        $current = $this_Expression_VarArgs_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_StringParserRuleCall_5()); 
    }
    this_Expression_String_5=ruleExpression_String
    { 
        $current = $this_Expression_String_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_FunctionParserRuleCall_6()); 
    }
    this_Expression_Function_6=ruleExpression_Function
    { 
        $current = $this_Expression_Function_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_TableConstructorParserRuleCall_7()); 
    }
    this_Expression_TableConstructor_7=ruleExpression_TableConstructor
    { 
        $current = $this_Expression_TableConstructor_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_TerminalAccess().getExpression_FunctioncallParserRuleCall_8()); 
    }
    this_Expression_Functioncall_8=ruleExpression_Functioncall
    { 
        $current = $this_Expression_Functioncall_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpression_Nil
entryRuleExpression_Nil returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_NilRule()); }
	 iv_ruleExpression_Nil=ruleExpression_Nil 
	 { $current=$iv_ruleExpression_Nil.current; } 
	 EOF 
;

// Rule Expression_Nil
ruleExpression_Nil returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='nil' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_NilAccess().getNilKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_NilAccess().getExpression_NilAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleExpression_True
entryRuleExpression_True returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_TrueRule()); }
	 iv_ruleExpression_True=ruleExpression_True 
	 { $current=$iv_ruleExpression_True.current; } 
	 EOF 
;

// Rule Expression_True
ruleExpression_True returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='true' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_TrueAccess().getTrueKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_TrueAccess().getExpression_TrueAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleExpression_False
entryRuleExpression_False returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_FalseRule()); }
	 iv_ruleExpression_False=ruleExpression_False 
	 { $current=$iv_ruleExpression_False.current; } 
	 EOF 
;

// Rule Expression_False
ruleExpression_False returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='false' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_FalseAccess().getFalseKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_FalseAccess().getExpression_FalseAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleExpression_Number
entryRuleExpression_Number returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_NumberRule()); }
	 iv_ruleExpression_Number=ruleExpression_Number 
	 { $current=$iv_ruleExpression_Number.current; } 
	 EOF 
;

// Rule Expression_Number
ruleExpression_Number returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_LUA_NUMBER
		{
			newLeafNode(lv_value_0_0, grammarAccess.getExpression_NumberAccess().getValueLUA_NUMBERTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_NumberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"LUA_NUMBER");
	    }

)
)
;





// Entry rule entryRuleExpression_VarArgs
entryRuleExpression_VarArgs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_VarArgsRule()); }
	 iv_ruleExpression_VarArgs=ruleExpression_VarArgs 
	 { $current=$iv_ruleExpression_VarArgs.current; } 
	 EOF 
;

// Rule Expression_VarArgs
ruleExpression_VarArgs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='...' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_VarArgsAccess().getFullStopFullStopFullStopKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_VarArgsAccess().getExpression_VarArgsAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleExpression_String
entryRuleExpression_String returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_StringRule()); }
	 iv_ruleExpression_String=ruleExpression_String 
	 { $current=$iv_ruleExpression_String.current; } 
	 EOF 
;

// Rule Expression_String
ruleExpression_String returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_LUA_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getExpression_StringAccess().getValueLUA_STRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_StringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"LUA_STRING");
	    }

)
)
;





// Entry rule entryRuleExpression_Function
entryRuleExpression_Function returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_FunctionRule()); }
	 iv_ruleExpression_Function=ruleExpression_Function 
	 { $current=$iv_ruleExpression_Function.current; } 
	 EOF 
;

// Rule Expression_Function
ruleExpression_Function returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_FunctionAccess().getFunctionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_FunctionAccess().getFunctionFunctionParserRuleCall_1_0()); 
	    }
		lv_function_1_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_FunctionRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_1_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='end' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_FunctionAccess().getEndKeyword_2());
    }
)
;





// Entry rule entryRuleExpression_TableConstructor
entryRuleExpression_TableConstructor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_TableConstructorRule()); }
	 iv_ruleExpression_TableConstructor=ruleExpression_TableConstructor 
	 { $current=$iv_ruleExpression_TableConstructor.current; } 
	 EOF 
;

// Rule Expression_TableConstructor
ruleExpression_TableConstructor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_TableConstructorAccess().getLeftCurlyBracketKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_TableConstructorAccess().getExpression_TableConstructorAction_1(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_TableConstructorAccess().getFieldsFieldParserRuleCall_2_0_0()); 
	    }
		lv_fields_2_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_TableConstructorRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpression_TableConstructorAccess().getCommaKeyword_2_1_0_0());
    }

    |	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpression_TableConstructorAccess().getSemicolonKeyword_2_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_TableConstructorAccess().getFieldsFieldParserRuleCall_2_1_1_0()); 
	    }
		lv_fields_5_0=ruleField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_TableConstructorRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_5_0, 
        		"Field");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpression_TableConstructorAccess().getCommaKeyword_2_2_0());
    }

    |	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpression_TableConstructorAccess().getSemicolonKeyword_2_2_1());
    }
)?)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpression_TableConstructorAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleExpression_Functioncall
entryRuleExpression_Functioncall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_FunctioncallRule()); }
	 iv_ruleExpression_Functioncall=ruleExpression_Functioncall 
	 { $current=$iv_ruleExpression_Functioncall.current; } 
	 EOF 
;

// Rule Expression_Functioncall
ruleExpression_Functioncall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_FunctioncallAccess().getExpression_AccessMemberOrArrayElementParserRuleCall_0()); 
    }
    this_Expression_AccessMemberOrArrayElement_0=ruleExpression_AccessMemberOrArrayElement
    { 
        $current = $this_Expression_AccessMemberOrArrayElement_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_FunctioncallAccess().getColonKeyword_1_0_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_FunctioncallAccess().getExpression_CallMemberFunctionObjectAction_1_0_1(),
            $current);
    }
)(
(
		lv_memberFunctionName_3_0=RULE_LUA_NAME
		{
			newLeafNode(lv_memberFunctionName_3_0, grammarAccess.getExpression_FunctioncallAccess().getMemberFunctionNameLUA_NAMETerminalRuleCall_1_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_FunctioncallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"memberFunctionName",
        		lv_memberFunctionName_3_0, 
        		"LUA_NAME");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_FunctioncallAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_0_3_0()); 
	    }
		lv_arguments_4_0=ruleFunctioncall_Arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_FunctioncallRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Functioncall_Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_FunctioncallAccess().getExpression_CallFunctionObjectAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_FunctioncallAccess().getArgumentsFunctioncall_ArgumentsParserRuleCall_1_1_1_0()); 
	    }
		lv_arguments_6_0=ruleFunctioncall_Arguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_FunctioncallRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"Functioncall_Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleExpression_AccessMemberOrArrayElement
entryRuleExpression_AccessMemberOrArrayElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_AccessMemberOrArrayElementRule()); }
	 iv_ruleExpression_AccessMemberOrArrayElement=ruleExpression_AccessMemberOrArrayElement 
	 { $current=$iv_ruleExpression_AccessMemberOrArrayElement.current; } 
	 EOF 
;

// Rule Expression_AccessMemberOrArrayElement
ruleExpression_AccessMemberOrArrayElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getExpression_VariableNameParserRuleCall_0()); 
    }
    this_Expression_VariableName_0=ruleExpression_VariableName
    { 
        $current = $this_Expression_VariableName_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getLeftSquareBracketKeyword_1_0_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getExpression_AccessArrayArrayAction_1_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getIndexExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_index_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_AccessMemberOrArrayElementRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getRightSquareBracketKeyword_1_0_3());
    }
)
    |(	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getFullStopKeyword_1_1_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getExpression_AccessMemberObjectAction_1_1_1(),
            $current);
    }
)(
(
		lv_memberName_7_0=RULE_LUA_NAME
		{
			newLeafNode(lv_memberName_7_0, grammarAccess.getExpression_AccessMemberOrArrayElementAccess().getMemberNameLUA_NAMETerminalRuleCall_1_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_AccessMemberOrArrayElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"memberName",
        		lv_memberName_7_0, 
        		"LUA_NAME");
	    }

)
)))*)
;





// Entry rule entryRuleExpression_VariableName
entryRuleExpression_VariableName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_VariableNameRule()); }
	 iv_ruleExpression_VariableName=ruleExpression_VariableName 
	 { $current=$iv_ruleExpression_VariableName.current; } 
	 EOF 
;

// Rule Expression_VariableName
ruleExpression_VariableName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpression_VariableNameAccess().getLeftParenthesisKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpression_VariableNameAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpression_VariableNameAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_VariableNameAccess().getExpression_VariableNameAction_1_0(),
            $current);
    }
)(
(
		lv_variable_4_0=RULE_LUA_NAME
		{
			newLeafNode(lv_variable_4_0, grammarAccess.getExpression_VariableNameAccess().getVariableLUA_NAMETerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_VariableNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_4_0, 
        		"LUA_NAME");
	    }

)
)))
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_0());
    }
((
(
		lv_parameters_1_0=RULE_LUA_NAME
		{
			newLeafNode(lv_parameters_1_0, grammarAccess.getFunctionAccess().getParametersLUA_NAMETerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_1_0, 
        		"LUA_NAME");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getCommaKeyword_1_1_0());
    }
(
(
		lv_parameters_3_0=RULE_LUA_NAME
		{
			newLeafNode(lv_parameters_3_0, grammarAccess.getFunctionAccess().getParametersLUA_NAMETerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"LUA_NAME");
	    }

)
))*(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getCommaKeyword_1_2());
    }
)?)?(
(
		lv_varArgs_5_0=	'...' 
    {
        newLeafNode(lv_varArgs_5_0, grammarAccess.getFunctionAccess().getVarArgsFullStopFullStopFullStopKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed($current, "varArgs", true, "...");
	    }

)
)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getBodyBlockParserRuleCall_4_0()); 
	    }
		lv_body_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctioncall_Arguments
entryRuleFunctioncall_Arguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctioncall_ArgumentsRule()); }
	 iv_ruleFunctioncall_Arguments=ruleFunctioncall_Arguments 
	 { $current=$iv_ruleFunctioncall_Arguments.current; } 
	 EOF 
;

// Rule Functioncall_Arguments
ruleFunctioncall_Arguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctioncall_ArgumentsAccess().getFunctioncall_ArgumentsAction_0(),
            $current);
    }
)((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctioncall_ArgumentsAccess().getLeftParenthesisKeyword_1_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctioncall_ArgumentsAccess().getArgumentsExpressionParserRuleCall_1_0_1_0_0()); 
	    }
		lv_arguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctioncall_ArgumentsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctioncall_ArgumentsAccess().getCommaKeyword_1_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctioncall_ArgumentsAccess().getArgumentsExpressionParserRuleCall_1_0_1_1_1_0()); 
	    }
		lv_arguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctioncall_ArgumentsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctioncall_ArgumentsAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctioncall_ArgumentsAccess().getArgumentsExpression_TableConstructorParserRuleCall_1_1_0()); 
	    }
		lv_arguments_6_0=ruleExpression_TableConstructor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctioncall_ArgumentsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"Expression_TableConstructor");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctioncall_ArgumentsAccess().getArgumentsExpression_StringParserRuleCall_1_2_0()); 
	    }
		lv_arguments_7_0=ruleExpression_String		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctioncall_ArgumentsRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_7_0, 
        		"Expression_String");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleField
entryRuleField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	 iv_ruleField=ruleField 
	 { $current=$iv_ruleField.current; } 
	 EOF 
;

// Rule Field
ruleField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFieldAccess().getField_AddEntryToTable_BracketsParserRuleCall_0()); 
    }
    this_Field_AddEntryToTable_Brackets_0=ruleField_AddEntryToTable_Brackets
    { 
        $current = $this_Field_AddEntryToTable_Brackets_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFieldAccess().getField_AddEntryToTableParserRuleCall_1()); 
    }
    this_Field_AddEntryToTable_1=ruleField_AddEntryToTable
    { 
        $current = $this_Field_AddEntryToTable_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFieldAccess().getField_AppendEntryToTableParserRuleCall_2()); 
    }
    this_Field_AppendEntryToTable_2=ruleField_AppendEntryToTable
    { 
        $current = $this_Field_AppendEntryToTable_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleField_AddEntryToTable_Brackets
entryRuleField_AddEntryToTable_Brackets returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_AddEntryToTable_BracketsRule()); }
	 iv_ruleField_AddEntryToTable_Brackets=ruleField_AddEntryToTable_Brackets 
	 { $current=$iv_ruleField_AddEntryToTable_Brackets.current; } 
	 EOF 
;

// Rule Field_AddEntryToTable_Brackets
ruleField_AddEntryToTable_Brackets returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getField_AddEntryToTable_BracketsAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getField_AddEntryToTable_BracketsAccess().getIndexExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_indexExpression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_AddEntryToTable_BracketsRule());
	        }
       		set(
       			$current, 
       			"indexExpression",
        		lv_indexExpression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getField_AddEntryToTable_BracketsAccess().getRightSquareBracketKeyword_2());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getField_AddEntryToTable_BracketsAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getField_AddEntryToTable_BracketsAccess().getValueExpressionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_AddEntryToTable_BracketsRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleField_AddEntryToTable
entryRuleField_AddEntryToTable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_AddEntryToTableRule()); }
	 iv_ruleField_AddEntryToTable=ruleField_AddEntryToTable 
	 { $current=$iv_ruleField_AddEntryToTable.current; } 
	 EOF 
;

// Rule Field_AddEntryToTable
ruleField_AddEntryToTable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_LUA_NAME
		{
			newLeafNode(lv_key_0_0, grammarAccess.getField_AddEntryToTableAccess().getKeyLUA_NAMETerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_AddEntryToTableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"LUA_NAME");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getField_AddEntryToTableAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getField_AddEntryToTableAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_AddEntryToTableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleField_AppendEntryToTable
entryRuleField_AppendEntryToTable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_AppendEntryToTableRule()); }
	 iv_ruleField_AppendEntryToTable=ruleField_AppendEntryToTable 
	 { $current=$iv_ruleField_AppendEntryToTable.current; } 
	 EOF 
;

// Rule Field_AppendEntryToTable
ruleField_AppendEntryToTable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getField_AppendEntryToTableAccess().getValueExpressionParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_AppendEntryToTableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





RULE_COMMENT : '--' ('[[' ( options {greedy=false;} : . )*']]'|~('[') ~('\n')* '\n'?);

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_LUA_NAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LUA_STRING : ('\'' ('\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'"'|'\''|'\\'|'0'..'9' '0'..'9' '0'..'9')|~(('\\'|'\'')))* '\''|'"' ('\\' ('a'|'b'|'f'|'n'|'r'|'t'|'v'|'"'|'\''|'\\'|'0'..'9' '0'..'9' '0'..'9')|~(('\\'|'"')))* '"'|'[[' ( options {greedy=false;} : . )*']]');

RULE_LUA_NUMBER : (('0'..'9')+ ('.' ('0'..'9')+ (('E'|'e') '-'? ('0'..'9')+)?)?|'0x' ('0'..'9'|'a'..'f')+);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;


